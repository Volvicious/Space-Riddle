//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T vs_5_0 /Zi /Od /Gfp /E VS /Fo
//    \\?\C:\Projects\Vektoria_2016-06-20\Work\VektoriaApp\Shaders\Cache\Object\Debug\VS.obj
//    /Fe
//    \\?\C:\Projects\Vektoria_2016-06-20\Work\VektoriaApp\Shaders\Cache\Error\VS.txt
//    /Fc
//    \\?\C:\Projects\Vektoria_2016-06-20\Work\VektoriaApp\Shaders\Cache\Assembly\3fe2542c.asm
//    \\?\C:\Projects\Vektoria_2016-06-20\Work\VektoriaApp\shaders\Source\shaders_Standard.hlsl
//
//
// Buffer Definitions: 
//
// cbuffer ObjectInfo
// {
//
//   float4x4 mWorld;                   // Offset:    0 Size:    64
//   float4x4 mView;                    // Offset:   64 Size:    64
//   float4x4 mViewInv;                 // Offset:  128 Size:    64
//   float4x4 mProjection;              // Offset:  192 Size:    64
//   uint4 iLightsAffecting;            // Offset:  256 Size:    16
//   uint iLightCount;                  // Offset:  272 Size:     4
//   uint uDummy1;                      // Offset:  276 Size:     4 [unused]
//   uint uDummy2;                      // Offset:  280 Size:     4 [unused]
//   uint uDummy3;                      // Offset:  284 Size:     4 [unused]
//
// }
//
// Resource bind info for Lights
// {
//
//   struct SLight
//   {
//       
//       float3 f3Position;             // Offset:    0
//       uint uType;                    // Offset:   12
//       float4 f4Color;                // Offset:   16
//       float3 f3Direction;            // Offset:   32
//       float fInnerCosAngle;          // Offset:   44
//       float fOuterCosAngle;          // Offset:   48
//       float fAttenuationConstant;    // Offset:   52
//       float fAttenuationLinear;      // Offset:   56
//       float fAttenuationQuadratic;   // Offset:   60
//       bool bCauseShadow;             // Offset:   64
//       bool bSoftShadow;              // Offset:   68
//       bool bCascadedShadow;          // Offset:   72
//       float4x4 mLightViewProj;       // Offset:   76
//
//   } $Element;                        // Offset:    0 Size:   140
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Lights                            texture  struct         r/o   10        1
// ObjectInfo                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// POSITION                 0   xyzw        0     NONE  float   xyzw
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TEXCOORD                 0   xy          2     NONE  float   xy  
// TANGENT                  0   xyz         3     NONE  float   xyz 
// BITANGENT                0   xyz         4     NONE  float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyzw
// NORMAL                   0   xyz         1     NONE  float   xyz 
// LIGHTS                   5      w        1     NONE  float      w
// TANGENT                  0   xyz         2     NONE  float   xyz 
// LIGHTS                  16      w        2     NONE  float      w
// BITANGENT                0   xyz         3     NONE  float   xyz 
// LIGHTS                  17      w        3     NONE  float      w
// TEXCOORD                 0   xy          4     NONE  float   xy  
// LIGHTS                   4     zw        4     NONE  float     zw
// TEXCOORD                 1   xyz         5     NONE  float   xyz 
// LIGHTS                  29      w        5     NONE  float      w
// TEXCOORD                 2   xyzw        6     NONE  float   xyzw
// LIGHTS                   0   xyzw        7     NONE  float   xyzw
// LIGHTS                   2   xyzw        8     NONE  float   xyzw
// LIGHTS                   3   xyzw        9     NONE  float   xyzw
// LIGHTS                   6   xyzw       10     NONE   uint   xyzw
// LIGHTS                  10   xyzw       11     NONE   uint   xyzw
// LIGHTS                  11   xyzw       12     NONE  float   xyzw
// LIGHTS                  12   xyzw       13     NONE  float   xyzw
// LIGHTS                  14   xyzw       14     NONE  float   xyzw
// LIGHTS                  15   xyzw       15     NONE  float   xyzw
// LIGHTS                  21   xyzw       16     NONE   uint   xyzw
// LIGHTS                  23   xyzw       17     NONE  float   xyzw
// LIGHTS                  24   xyzw       18     NONE  float   xyzw
// LIGHTS                  26   xyzw       19     NONE  float   xyzw
// LIGHTS                  27   xyz        20     NONE  float   xyz 
// LIGHTS                  32   xyzw       21     NONE   uint   xyzw
// LIGHTS                  35   xyzw       22     NONE  float   xyzw
// LIGHTS                  36   xyzw       23     NONE  float   xyzw
// LIGHTS                  38   xyzw       24     NONE  float   xyzw
// LIGHTS                  39   xyz        25     NONE  float   xyz 
// LIGHTS                  43   xyzw       26     NONE   uint   xyzw
// LIGHTS                  47   xyzw       27     NONE  float   xyzw
// COUNT                    0   x          28     NONE   uint   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[18], immediateIndexed
dcl_resource_structured t10, 140 
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o2.w
dcl_output o3.xyz
dcl_output o3.w
dcl_output o4.xy
dcl_output o4.zw
dcl_output o5.xyz
dcl_output o5.w
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_output o11.xyzw
dcl_output o12.xyzw
dcl_output o13.xyzw
dcl_output o14.xyzw
dcl_output o15.xyzw
dcl_output o16.xyzw
dcl_output o17.xyzw
dcl_output o18.xyzw
dcl_output o19.xyzw
dcl_output o20.xyz
dcl_output o21.xyzw
dcl_output o22.xyzw
dcl_output o23.xyzw
dcl_output o24.xyzw
dcl_output o25.xyz
dcl_output o26.xyzw
dcl_output o27.xyzw
dcl_output o28.x
dcl_temps 38

#line 200 "\\?\C:\Projects\Vektoria_2016-06-20\Work\VektoriaApp\shaders\Source\shaders_Standard.hlsl"
dp4 r0.x, v0.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
dp4 r0.y, v0.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
dp4 r0.z, v0.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
dp4 r0.w, v0.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
mov r0.x, r0.x  // output<18:NaN:Inf>
mov r0.y, r0.y  // output<19:NaN:Inf>
mov r0.z, r0.z  // output<20:NaN:Inf>
mov r0.w, r0.w  // output<21:NaN:Inf>
mov r1.xy, v2.xyxx  // output<13,14>
mul r2.xyzw, cb0[4].xyzw, cb0[12].xxxx
mul r3.xyzw, cb0[5].xyzw, cb0[12].yyyy
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[6].xyzw, cb0[12].zzzz
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[7].xyzw, cb0[12].wwww
add r2.xyzw, r2.xyzw, r3.xyzw  // mViewProj<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
mul r3.xyzw, cb0[4].xyzw, cb0[13].xxxx
mul r4.xyzw, cb0[5].xyzw, cb0[13].yyyy
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[6].xyzw, cb0[13].zzzz
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[7].xyzw, cb0[13].wwww
add r3.xyzw, r3.xyzw, r4.xyzw  // mViewProj<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
mul r4.xyzw, cb0[4].xyzw, cb0[14].xxxx
mul r5.xyzw, cb0[5].xyzw, cb0[14].yyyy
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[6].xyzw, cb0[14].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[7].xyzw, cb0[14].wwww
add r4.xyzw, r4.xyzw, r5.xyzw  // mViewProj<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
mul r5.xyzw, cb0[4].xyzw, cb0[15].xxxx
mul r6.xyzw, cb0[5].xyzw, cb0[15].yyyy
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[6].xyzw, cb0[15].zzzz
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[7].xyzw, cb0[15].wwww
add r5.xyzw, r5.xyzw, r6.xyzw  // mViewProj<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
dp4 r2.x, r0.xyzw, r2.xyzw  // output<0:NaN:Inf>
dp4 r2.y, r0.xyzw, r3.xyzw  // output<1:NaN:Inf>
dp4 r2.z, r0.xyzw, r4.xyzw  // output<2:NaN:Inf>
dp4 r2.w, r0.xyzw, r5.xyzw  // output<3:NaN:Inf>

#line 209
dp4 r3.x, l(0.000000, 0.000000, 0.000000, 1.000000), cb0[8].xyzw  // output<15>
dp4 r3.y, l(0.000000, 0.000000, 0.000000, 1.000000), cb0[9].xyzw  // output<16>
dp4 r3.z, l(0.000000, 0.000000, 0.000000, 1.000000), cb0[10].xyzw  // output<17>
dp3 r4.x, v1.xyzx, cb0[0].xyzx
dp3 r4.y, v1.xyzx, cb0[1].xyzx
dp3 r4.z, v1.xyzx, cb0[2].xyzx
dp3 r1.z, r4.xyzx, r4.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, r4.xyzx  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
dp3 r5.x, v3.xyzx, cb0[0].xyzx
dp3 r5.y, v3.xyzx, cb0[1].xyzx
dp3 r5.z, v3.xyzx, cb0[2].xyzx
dp3 r1.z, r5.xyzx, r5.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, r5.xyzx  // output<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
dp3 r6.x, v4.xyzx, cb0[0].xyzx
dp3 r6.y, v4.xyzx, cb0[1].xyzx
dp3 r6.z, v4.xyzx, cb0[2].xyzx
dp3 r1.z, r6.xyzx, r6.xyzx
rsq r1.z, r1.z
mul r6.xyz, r1.zzzz, r6.xyzx  // output<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>

#line 216
if_nz cb0[17].x

#line 219
  mov r7.w, cb0[16].x  // lightCurrentId<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.x, r7.w, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.y, r7.w, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.z, r7.w, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r7.x, r7.w, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.x, r7.w, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.y, r7.w, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.z, r7.w, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.w, r7.w, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.y, r7.w, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.z, r7.w, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.w, r7.w, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.w, r7.w, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r12.w, r7.w, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.z, r7.w, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.w, r7.w, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r3.w, r7.w, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.w, r7.w, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.w, r7.w, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.w, r7.w, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.w, r7.w, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.x, r7.w, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.x, r7.w, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.y, r7.w, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.z, r7.w, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.w, r7.w, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.x, r7.w, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.y, r7.w, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.z, r7.w, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.w, r7.w, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.x, r7.w, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.y, r7.w, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.z, r7.w, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.w, r7.w, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.x, r7.w, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.y, r7.w, l(136), t10.xxxx  // Lights<0>
  ine r12.x, l(0, 0, 0, 0), r4.w  // lightCurrent<16>
  ine r12.y, l(0, 0, 0, 0), r5.w  // lightCurrent<17>
  ine r12.z, l(0, 0, 0, 0), r6.w  // lightCurrent<18>
  mov r9.x, r9.x  // lightCurrent<4>
  mov r9.y, r9.y  // lightCurrent<5>
  mov r9.z, r9.z  // lightCurrent<6>
  mov r9.w, r9.w  // lightCurrent<7>
  mov r8.x, r8.x  // lightCurrent<0>
  mov r8.y, r8.y  // lightCurrent<1>
  mov r8.z, r8.z  // lightCurrent<2>
  mov r10.y, r10.y  // lightCurrent<8>
  mov r10.z, r10.z  // lightCurrent<9>
  mov r10.w, r10.w  // lightCurrent<10>
  mov r11.w, r11.w  // lightCurrent<11>
  mov r12.w, r12.w  // lightCurrent<12>
  mov r1.w, r1.w  // lightCurrent<14>
  mov r3.w, r3.w  // lightCurrent<15>
  mov r7.x, r7.x  // lightCurrent<3>
  mov r1.z, r1.z  // lightCurrent<13>
  mov r7.w, r7.w  // output<38>
  mov r9.xyzw, r9.xyzw  // output<26,27,28,29>
  mov r7.x, r7.x  // output<39>

#line 230
  ieq r4.w, r7.x, l(3)
  if_nz r4.w
    mov r12.x, r12.x  // output<35>
    mov r17.xyz, -r8.xyzx
    add r17.xyz, r0.xyzx, r17.xyzx
    dp3 r4.w, r17.xyzx, r17.xyzx
    rsq r4.w, r4.w
    mul r17.yzw, r4.wwww, r17.xxyz  // output<23:NaN:Inf,24:NaN:Inf,25:NaN:Inf>
    dp3 r4.w, r10.yzwy, r10.yzwy
    rsq r4.w, r4.w
    mul r11.xyz, r4.wwww, r10.yzwy  // output<30:NaN:Inf,31:NaN:Inf,32:NaN:Inf>
    mov r11.w, r11.w  // output<33>
    mov r12.w, r12.w  // output<34>
    mov r18.xyz, -r2.xyzx
    add r18.xyz, r8.xyzx, r18.xyzx
    dp3 r4.w, r18.xyzx, r18.xyzx
    sqrt r4.w, r4.w
    mov r5.w, -r4.w
    max r4.w, r4.w, r5.w  // d<0:NaN:Inf>
    add r5.w, r1.z, l(1.000000)
    mul r6.w, r1.w, r4.w
    add r5.w, r5.w, r6.w
    max r4.w, r4.w, l(1.000000)
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, l(1.000000)
    mul r4.w, r3.w, r4.w
    add r4.w, r4.w, r5.w
    div r17.x, l(1.000000), r4.w  // output<22:NaN:Inf>
    mul r18.xyzw, r8.wwww, cb0[0].xyzw
    mul r19.xyzw, r13.zzzz, cb0[1].xyzw
    add r18.xyzw, r18.xyzw, r19.xyzw
    mul r19.xyzw, r14.zzzz, cb0[2].xyzw
    add r18.xyzw, r18.xyzw, r19.xyzw
    mul r19.xyzw, r15.zzzz, cb0[3].xyzw
    add r18.xyzw, r18.xyzw, r19.xyzw
    mul r19.xyzw, r10.xxxx, cb0[0].xyzw
    mul r20.xyzw, r13.wwww, cb0[1].xyzw
    add r19.xyzw, r19.xyzw, r20.xyzw
    mul r20.xyzw, r14.wwww, cb0[2].xyzw
    add r19.xyzw, r19.xyzw, r20.xyzw
    mul r20.xyzw, r15.wwww, cb0[3].xyzw
    add r19.xyzw, r19.xyzw, r20.xyzw
    mul r20.xyzw, r13.xxxx, cb0[0].xyzw
    mul r21.xyzw, r14.xxxx, cb0[1].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r21.xyzw, r15.xxxx, cb0[2].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r21.xyzw, r16.xxxx, cb0[3].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r13.xyzw, r13.yyyy, cb0[0].xyzw
    mul r14.xyzw, r14.yyyy, cb0[1].xyzw
    add r13.xyzw, r13.xyzw, r14.xyzw
    mul r14.xyzw, r15.yyyy, cb0[2].xyzw
    add r13.xyzw, r13.xyzw, r14.xyzw
    mul r14.xyzw, r16.yyyy, cb0[3].xyzw
    add r13.xyzw, r13.xyzw, r14.xyzw
    dp4 r14.y, v0.xyzw, r18.xyzw  // output<40:NaN:Inf>
    dp4 r14.w, v0.xyzw, r19.xyzw  // output<41:NaN:Inf>
    dp4 r14.z, v0.xyzw, r20.xyzw  // output<42:NaN:Inf>
    dp4 r14.x, v0.xyzw, r13.xyzw  // output<43:NaN:Inf>
    mov r12.y, r12.y  // output<36>

#line 241
    mov r12.z, r12.z  // output<37>

#line 232
    mov r7.yz, r14.yywy  // output<40:NaN:Inf,41:NaN:Inf>
  else 

#line 243
    ieq r4.w, r7.x, l(2)
    if_nz r4.w
      mov r13.xyz, -r8.xyzx
      add r13.xyz, r0.xyzx, r13.xyzx
      dp3 r4.w, r13.xyzx, r13.xyzx
      rsq r4.w, r4.w
      mul r17.yzw, r4.wwww, r13.xxyz  // output<23:NaN:Inf,24:NaN:Inf,25:NaN:Inf>
      mov r13.xyz, -r2.xyzx
      add r8.xyz, r8.xyzx, r13.xyzx
      dp3 r4.w, r8.xyzx, r8.xyzx
      sqrt r4.w, r4.w
      mov r5.w, -r4.w
      max r4.w, r4.w, r5.w  // d<0:NaN:Inf>
      add r1.z, r1.z, l(1.000000)
      mul r1.w, r1.w, r4.w
      add r1.z, r1.w, r1.z
      max r1.w, r4.w, l(1.000000)
      mul r1.w, r1.w, r1.w
      mul r1.w, r1.w, l(1.000000)
      mul r1.w, r1.w, r3.w
      add r1.z, r1.w, r1.z
      div r17.x, l(1.000000), r1.z  // output<22:NaN:Inf>

#line 243
    else 

#line 251
      dp3 r1.z, r10.yzwy, r10.yzwy
      rsq r1.z, r1.z
      mul r8.xyz, r1.zzzz, r10.yzwy
      mov r17.yzw, -r8.xxyz  // output<23:NaN:Inf,24:NaN:Inf,25:NaN:Inf>
      mov r17.x, l(1.000000)  // output<22: 1f>

#line 243
    endif 
    mov r11.xyzw, l(0,0,0,0)  // output<30: 0f,31: 0f,32: 0f,33: 0f>
    mov r12.xyzw, l(0,0,0,0)  // output<35: false,36: false,37: false,34: 0f>
    mov r7.yz, l(0,0,0,0)  // output<40: 0f,41: 0f>
    mov r14.xz, l(0,0,0,0)  // output<43: 0f,42: 0f>

#line 230
  endif 

#line 216
else 
  mov r17.xyzw, l(0,0,0,0)  // output<22: 0f,23: 0f,24: 0f,25: 0f>
  mov r9.xyzw, l(0,0,0,0)  // output<26: 0f,27: 0f,28: 0f,29: 0f>
  mov r11.xyzw, l(0,0,0,0)  // output<30: 0f,31: 0f,32: 0f,33: 0f>
  mov r12.xyzw, l(0,0,0,0)  // output<35: false,36: false,37: false,34: 0f>
  mov r7.xyzw, l(0,0,0,0)  // output<39: 0u,40: 0f,41: 0f,38: 0u>
  mov r14.xz, l(0,0,0,0)  // output<43: 0f,42: 0f>
endif 
ult r1.z, l(1), cb0[17].x
if_nz r1.z

#line 219
  mov r8.x, cb0[16].y  // lightCurrentId<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.x, r8.x, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.y, r8.x, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.z, r8.x, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.y, r8.x, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.x, r8.x, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.y, r8.x, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.z, r8.x, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.w, r8.x, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.y, r8.x, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.z, r8.x, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.w, r8.x, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.w, r8.x, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r18.w, r8.x, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.z, r8.x, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.w, r8.x, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r3.w, r8.x, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.w, r8.x, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.w, r8.x, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.w, r8.x, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.w, r8.x, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.y, r8.x, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.w, r8.x, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.x, r8.x, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.x, r8.x, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.y, r8.x, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.z, r8.x, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.w, r8.x, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.x, r8.x, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.y, r8.x, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.z, r8.x, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.w, r8.x, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.x, r8.x, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.y, r8.x, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.z, r8.x, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.w, r8.x, l(136), t10.xxxx  // Lights<0>
  ine r18.x, l(0, 0, 0, 0), r4.w  // lightCurrent<16>
  ine r18.y, l(0, 0, 0, 0), r5.w  // lightCurrent<17>
  ine r18.z, l(0, 0, 0, 0), r6.w  // lightCurrent<18>
  mov r13.x, r13.x  // lightCurrent<4>
  mov r13.y, r13.y  // lightCurrent<5>
  mov r13.z, r13.z  // lightCurrent<6>
  mov r13.w, r13.w  // lightCurrent<7>
  mov r10.x, r10.x  // lightCurrent<0>
  mov r10.y, r10.y  // lightCurrent<1>
  mov r10.z, r10.z  // lightCurrent<2>
  mov r15.y, r15.y  // lightCurrent<8>
  mov r15.z, r15.z  // lightCurrent<9>
  mov r15.w, r15.w  // lightCurrent<10>
  mov r16.w, r16.w  // lightCurrent<11>
  mov r18.w, r18.w  // lightCurrent<12>
  mov r1.w, r1.w  // lightCurrent<14>
  mov r3.w, r3.w  // lightCurrent<15>
  mov r8.y, r8.y  // lightCurrent<3>
  mov r1.z, r1.z  // lightCurrent<13>
  mov r8.x, r8.x  // output<60>
  mov r13.xyzw, r13.xyzw  // output<48,49,50,51>
  mov r8.y, r8.y  // output<61>

#line 230
  ieq r4.w, r8.y, l(3)
  if_nz r4.w
    mov r18.x, r18.x  // output<57>
    mov r22.xyz, -r10.xyzx
    add r22.xyz, r0.xyzx, r22.xyzx
    dp3 r4.w, r22.xyzx, r22.xyzx
    rsq r4.w, r4.w
    mul r22.yzw, r4.wwww, r22.xxyz  // output<45:NaN:Inf,46:NaN:Inf,47:NaN:Inf>
    dp3 r4.w, r15.yzwy, r15.yzwy
    rsq r4.w, r4.w
    mul r16.xyz, r4.wwww, r15.yzwy  // output<52:NaN:Inf,53:NaN:Inf,54:NaN:Inf>
    mov r16.w, r16.w  // output<55>
    mov r18.w, r18.w  // output<56>
    mov r23.xyz, -r2.xyzx
    add r23.xyz, r10.xyzx, r23.xyzx
    dp3 r4.w, r23.xyzx, r23.xyzx
    sqrt r4.w, r4.w
    mov r5.w, -r4.w
    max r4.w, r4.w, r5.w  // d<0:NaN:Inf>
    add r5.w, r1.z, l(1.000000)
    mul r6.w, r1.w, r4.w
    add r5.w, r5.w, r6.w
    max r4.w, r4.w, l(1.000000)
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, l(1.000000)
    mul r4.w, r3.w, r4.w
    add r4.w, r4.w, r5.w
    div r22.x, l(1.000000), r4.w  // output<44:NaN:Inf>
    mul r23.xyzw, r10.wwww, cb0[0].xyzw
    mul r24.xyzw, r19.xxxx, cb0[1].xyzw
    add r23.xyzw, r23.xyzw, r24.xyzw
    mul r24.xyzw, r20.xxxx, cb0[2].xyzw
    add r23.xyzw, r23.xyzw, r24.xyzw
    mul r24.xyzw, r21.xxxx, cb0[3].xyzw
    add r23.xyzw, r23.xyzw, r24.xyzw
    mul r24.xyzw, r14.yyyy, cb0[0].xyzw
    mul r25.xyzw, r19.yyyy, cb0[1].xyzw
    add r24.xyzw, r24.xyzw, r25.xyzw
    mul r25.xyzw, r20.yyyy, cb0[2].xyzw
    add r24.xyzw, r24.xyzw, r25.xyzw
    mul r25.xyzw, r21.yyyy, cb0[3].xyzw
    add r24.xyzw, r24.xyzw, r25.xyzw
    mul r25.xyzw, r14.wwww, cb0[0].xyzw
    mul r26.xyzw, r19.zzzz, cb0[1].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r20.zzzz, cb0[2].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r21.zzzz, cb0[3].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r15.xxxx, cb0[0].xyzw
    mul r19.xyzw, r19.wwww, cb0[1].xyzw
    add r19.xyzw, r19.xyzw, r26.xyzw
    mul r20.xyzw, r20.wwww, cb0[2].xyzw
    add r19.xyzw, r19.xyzw, r20.xyzw
    mul r20.xyzw, r21.wwww, cb0[3].xyzw
    add r19.xyzw, r19.xyzw, r20.xyzw
    dp4 r20.y, v0.xyzw, r23.xyzw  // output<62:NaN:Inf>
    dp4 r20.w, v0.xyzw, r24.xyzw  // output<63:NaN:Inf>
    dp4 r20.z, v0.xyzw, r25.xyzw  // output<64:NaN:Inf>
    dp4 r20.x, v0.xyzw, r19.xyzw  // output<65:NaN:Inf>
    mov r18.y, r18.y  // output<58>

#line 241
    mov r18.z, r18.z  // output<59>

#line 232
    mov r8.zw, r20.yyyw  // output<62:NaN:Inf,63:NaN:Inf>
  else 

#line 243
    ieq r4.w, r8.y, l(2)
    if_nz r4.w
      mov r19.xyz, -r10.xyzx
      add r19.xyz, r0.xyzx, r19.xyzx
      dp3 r4.w, r19.xyzx, r19.xyzx
      rsq r4.w, r4.w
      mul r22.yzw, r4.wwww, r19.xxyz  // output<45:NaN:Inf,46:NaN:Inf,47:NaN:Inf>
      mov r19.xyz, -r2.xyzx
      add r10.xyz, r10.xyzx, r19.xyzx
      dp3 r4.w, r10.xyzx, r10.xyzx
      sqrt r4.w, r4.w
      mov r5.w, -r4.w
      max r4.w, r4.w, r5.w  // d<0:NaN:Inf>
      add r1.z, r1.z, l(1.000000)
      mul r1.w, r1.w, r4.w
      add r1.z, r1.w, r1.z
      max r1.w, r4.w, l(1.000000)
      mul r1.w, r1.w, r1.w
      mul r1.w, r1.w, l(1.000000)
      mul r1.w, r1.w, r3.w
      add r1.z, r1.w, r1.z
      div r22.x, l(1.000000), r1.z  // output<44:NaN:Inf>

#line 243
    else 

#line 251
      dp3 r1.z, r15.yzwy, r15.yzwy
      rsq r1.z, r1.z
      mul r10.xyz, r1.zzzz, r15.yzwy
      mov r22.yzw, -r10.xxyz  // output<45:NaN:Inf,46:NaN:Inf,47:NaN:Inf>
      mov r22.x, l(1.000000)  // output<44: 1f>

#line 243
    endif 
    mov r16.xyzw, l(0,0,0,0)  // output<52: 0f,53: 0f,54: 0f,55: 0f>
    mov r18.xyzw, l(0,0,0,0)  // output<57: false,58: false,59: false,56: 0f>
    mov r8.zw, l(0,0,0,0)  // output<62: 0f,63: 0f>
    mov r20.xz, l(0,0,0,0)  // output<65: 0f,64: 0f>

#line 230
  endif 

#line 216
else 
  mov r22.xyzw, l(0,0,0,0)  // output<44: 0f,45: 0f,46: 0f,47: 0f>
  mov r13.xyzw, l(0,0,0,0)  // output<48: 0f,49: 0f,50: 0f,51: 0f>
  mov r16.xyzw, l(0,0,0,0)  // output<52: 0f,53: 0f,54: 0f,55: 0f>
  mov r18.xyzw, l(0,0,0,0)  // output<57: false,58: false,59: false,56: 0f>
  mov r8.xyzw, l(0,0,0,0)  // output<60: 0u,61: 0u,62: 0f,63: 0f>
  mov r20.xz, l(0,0,0,0)  // output<65: 0f,64: 0f>
endif 
ult r1.z, l(2), cb0[17].x
if_nz r1.z

#line 219
  mov r10.y, cb0[16].z  // lightCurrentId<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.x, r10.y, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.y, r10.y, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.z, r10.y, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.x, r10.y, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.x, r10.y, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.y, r10.y, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.z, r10.y, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r19.w, r10.y, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.y, r10.y, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.z, r10.y, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.w, r10.y, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.w, r10.y, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r24.w, r10.y, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.z, r10.y, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.w, r10.y, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r3.w, r10.y, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.w, r10.y, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.w, r10.y, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.w, r10.y, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.y, r10.y, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.w, r10.y, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.w, r10.y, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.y, r10.y, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.w, r10.y, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.x, r10.y, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.x, r10.y, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.y, r10.y, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.z, r10.y, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.w, r10.y, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.x, r10.y, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.y, r10.y, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.z, r10.y, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.w, r10.y, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.x, r10.y, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.y, r10.y, l(136), t10.xxxx  // Lights<0>
  ine r24.x, l(0, 0, 0, 0), r4.w  // lightCurrent<16>
  ine r24.y, l(0, 0, 0, 0), r5.w  // lightCurrent<17>
  ine r24.z, l(0, 0, 0, 0), r6.w  // lightCurrent<18>
  mov r19.x, r19.x  // lightCurrent<4>
  mov r19.y, r19.y  // lightCurrent<5>
  mov r19.z, r19.z  // lightCurrent<6>
  mov r19.w, r19.w  // lightCurrent<7>
  mov r15.x, r15.x  // lightCurrent<0>
  mov r15.y, r15.y  // lightCurrent<1>
  mov r15.z, r15.z  // lightCurrent<2>
  mov r21.y, r21.y  // lightCurrent<8>
  mov r21.z, r21.z  // lightCurrent<9>
  mov r21.w, r21.w  // lightCurrent<10>
  mov r23.w, r23.w  // lightCurrent<11>
  mov r24.w, r24.w  // lightCurrent<12>
  mov r1.w, r1.w  // lightCurrent<14>
  mov r3.w, r3.w  // lightCurrent<15>
  mov r10.x, r10.x  // lightCurrent<3>
  mov r1.z, r1.z  // lightCurrent<13>
  mov r10.y, r10.y  // output<82>
  mov r19.xyzw, r19.xyzw  // output<70,71,72,73>
  mov r10.x, r10.x  // output<83>

#line 230
  ieq r4.w, r10.x, l(3)
  if_nz r4.w
    mov r24.x, r24.x  // output<79>
    mov r28.xyz, -r15.xyzx
    add r28.xyz, r0.xyzx, r28.xyzx
    dp3 r4.w, r28.xyzx, r28.xyzx
    rsq r4.w, r4.w
    mul r28.yzw, r4.wwww, r28.xxyz  // output<67:NaN:Inf,68:NaN:Inf,69:NaN:Inf>
    dp3 r4.w, r21.yzwy, r21.yzwy
    rsq r4.w, r4.w
    mul r23.xyz, r4.wwww, r21.yzwy  // output<74:NaN:Inf,75:NaN:Inf,76:NaN:Inf>
    mov r23.w, r23.w  // output<77>
    mov r24.w, r24.w  // output<78>
    mov r29.xyz, -r2.xyzx
    add r29.xyz, r15.xyzx, r29.xyzx
    dp3 r4.w, r29.xyzx, r29.xyzx
    sqrt r4.w, r4.w
    mov r5.w, -r4.w
    max r4.w, r4.w, r5.w  // d<0:NaN:Inf>
    add r5.w, r1.z, l(1.000000)
    mul r6.w, r1.w, r4.w
    add r5.w, r5.w, r6.w
    max r4.w, r4.w, l(1.000000)
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, l(1.000000)
    mul r4.w, r3.w, r4.w
    add r4.w, r4.w, r5.w
    div r28.x, l(1.000000), r4.w  // output<66:NaN:Inf>
    mul r29.xyzw, r14.yyyy, cb0[0].xyzw
    mul r30.xyzw, r20.wwww, cb0[1].xyzw
    add r29.xyzw, r29.xyzw, r30.xyzw
    mul r30.xyzw, r25.zzzz, cb0[2].xyzw
    add r29.xyzw, r29.xyzw, r30.xyzw
    mul r30.xyzw, r26.zzzz, cb0[3].xyzw
    add r29.xyzw, r29.xyzw, r30.xyzw
    mul r30.xyzw, r14.wwww, cb0[0].xyzw
    mul r31.xyzw, r21.xxxx, cb0[1].xyzw
    add r30.xyzw, r30.xyzw, r31.xyzw
    mul r31.xyzw, r25.wwww, cb0[2].xyzw
    add r30.xyzw, r30.xyzw, r31.xyzw
    mul r31.xyzw, r26.wwww, cb0[3].xyzw
    add r30.xyzw, r30.xyzw, r31.xyzw
    mul r31.xyzw, r15.wwww, cb0[0].xyzw
    mul r32.xyzw, r25.xxxx, cb0[1].xyzw
    add r31.xyzw, r31.xyzw, r32.xyzw
    mul r32.xyzw, r26.xxxx, cb0[2].xyzw
    add r31.xyzw, r31.xyzw, r32.xyzw
    mul r32.xyzw, r27.xxxx, cb0[3].xyzw
    add r31.xyzw, r31.xyzw, r32.xyzw
    mul r32.xyzw, r20.yyyy, cb0[0].xyzw
    mul r25.xyzw, r25.yyyy, cb0[1].xyzw
    add r25.xyzw, r25.xyzw, r32.xyzw
    mul r26.xyzw, r26.yyyy, cb0[2].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r27.yyyy, cb0[3].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    dp4 r26.y, v0.xyzw, r29.xyzw  // output<84:NaN:Inf>
    dp4 r26.w, v0.xyzw, r30.xyzw  // output<85:NaN:Inf>
    dp4 r26.z, v0.xyzw, r31.xyzw  // output<86:NaN:Inf>
    dp4 r26.x, v0.xyzw, r25.xyzw  // output<87:NaN:Inf>
    mov r24.y, r24.y  // output<80>

#line 241
    mov r24.z, r24.z  // output<81>

#line 232
    mov r10.zw, r26.yyyw  // output<84:NaN:Inf,85:NaN:Inf>
  else 

#line 243
    ieq r4.w, r10.x, l(2)
    if_nz r4.w
      mov r25.xyz, -r15.xyzx
      add r25.xyz, r0.xyzx, r25.xyzx
      dp3 r4.w, r25.xyzx, r25.xyzx
      rsq r4.w, r4.w
      mul r28.yzw, r4.wwww, r25.xxyz  // output<67:NaN:Inf,68:NaN:Inf,69:NaN:Inf>
      mov r25.xyz, -r2.xyzx
      add r15.xyz, r15.xyzx, r25.xyzx
      dp3 r4.w, r15.xyzx, r15.xyzx
      sqrt r4.w, r4.w
      mov r5.w, -r4.w
      max r4.w, r4.w, r5.w  // d<0:NaN:Inf>
      add r1.z, r1.z, l(1.000000)
      mul r1.w, r1.w, r4.w
      add r1.z, r1.w, r1.z
      max r1.w, r4.w, l(1.000000)
      mul r1.w, r1.w, r1.w
      mul r1.w, r1.w, l(1.000000)
      mul r1.w, r1.w, r3.w
      add r1.z, r1.w, r1.z
      div r28.x, l(1.000000), r1.z  // output<66:NaN:Inf>

#line 243
    else 

#line 251
      dp3 r1.z, r21.yzwy, r21.yzwy
      rsq r1.z, r1.z
      mul r15.xyz, r1.zzzz, r21.yzwy
      mov r28.yzw, -r15.xxyz  // output<67:NaN:Inf,68:NaN:Inf,69:NaN:Inf>
      mov r28.x, l(1.000000)  // output<66: 1f>

#line 243
    endif 
    mov r23.xyzw, l(0,0,0,0)  // output<74: 0f,75: 0f,76: 0f,77: 0f>
    mov r24.xyzw, l(0,0,0,0)  // output<79: false,80: false,81: false,78: 0f>
    mov r10.zw, l(0,0,0,0)  // output<84: 0f,85: 0f>
    mov r26.xz, l(0,0,0,0)  // output<87: 0f,86: 0f>

#line 230
  endif 

#line 216
else 
  mov r28.xyzw, l(0,0,0,0)  // output<66: 0f,67: 0f,68: 0f,69: 0f>
  mov r19.xyzw, l(0,0,0,0)  // output<70: 0f,71: 0f,72: 0f,73: 0f>
  mov r23.xyzw, l(0,0,0,0)  // output<74: 0f,75: 0f,76: 0f,77: 0f>
  mov r24.xyzw, l(0,0,0,0)  // output<79: false,80: false,81: false,78: 0f>
  mov r10.xyzw, l(0,0,0,0)  // output<83: 0u,82: 0u,84: 0f,85: 0f>
  mov r26.xz, l(0,0,0,0)  // output<87: 0f,86: 0f>
endif 
ult r1.z, l(3), cb0[17].x
if_nz r1.z

#line 219
  mov r15.z, cb0[16].w  // lightCurrentId<0>
  mov r1.z, r15.z
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.x, r1.z, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.y, r1.z, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.z, r1.z, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.w, r1.z, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.x, r1.z, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.y, r1.z, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.z, r1.z, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.w, r1.z, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.y, r1.z, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.z, r1.z, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.w, r1.z, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.w, r1.z, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r3.w, r1.z, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.w, r1.z, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.w, r1.z, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.w, r1.z, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.y, r1.z, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r14.w, r1.z, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.y, r1.z, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.w, r1.z, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.w, r1.z, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.y, r1.z, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.w, r1.z, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.x, r1.z, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r29.x, r1.z, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r29.y, r1.z, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r29.z, r1.z, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r29.w, r1.z, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r30.x, r1.z, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r30.y, r1.z, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r30.z, r1.z, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r30.w, r1.z, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r31.x, r1.z, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r31.y, r1.z, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.z, r1.z, l(136), t10.xxxx  // Lights<0>
  ine r14.y, l(0, 0, 0, 0), r14.y  // lightCurrent<16>
  ine r15.x, l(0, 0, 0, 0), r14.w  // lightCurrent<17>
  ine r15.y, l(0, 0, 0, 0), r20.y  // lightCurrent<18>
  mov r25.x, r25.x  // lightCurrent<4>
  mov r25.y, r25.y  // lightCurrent<5>
  mov r25.z, r25.z  // lightCurrent<6>
  mov r25.w, r25.w  // lightCurrent<7>
  mov r21.x, r21.x  // lightCurrent<0>
  mov r21.y, r21.y  // lightCurrent<1>
  mov r21.z, r21.z  // lightCurrent<2>
  mov r27.y, r27.y  // lightCurrent<8>
  mov r27.z, r27.z  // lightCurrent<9>
  mov r27.w, r27.w  // lightCurrent<10>
  mov r1.w, r1.w  // lightCurrent<11>
  mov r3.w, r3.w  // lightCurrent<12>
  mov r5.w, r5.w  // lightCurrent<14>
  mov r6.w, r6.w  // lightCurrent<15>
  mov r15.w, r15.w  // lightCurrent<3>
  mov r4.w, r4.w  // lightCurrent<13>
  mov r15.z, r15.z  // output<104>
  mov r25.xyzw, r25.xyzw  // output<92,93,94,95>
  mov r15.w, r15.w  // output<105>

#line 230
  ieq r14.w, r15.w, l(3)
  if_nz r14.w
    mov r14.y, r14.y  // output<101>
    mov r32.xyz, -r21.xyzx
    add r32.xyz, r0.xyzx, r32.xyzx
    dp3 r14.w, r32.xyzx, r32.xyzx
    rsq r14.w, r14.w
    mul r32.yzw, r14.wwww, r32.xxyz  // output<89:NaN:Inf,90:NaN:Inf,91:NaN:Inf>
    dp3 r14.w, r27.yzwy, r27.yzwy
    rsq r14.w, r14.w
    mul r33.xyz, r14.wwww, r27.yzwy  // output<96:NaN:Inf,97:NaN:Inf,98:NaN:Inf>
    mov r1.w, r1.w  // output<99>
    mov r3.w, r3.w  // output<100>
    mov r34.xyz, -r2.xyzx
    add r34.xyz, r21.xyzx, r34.xyzx
    dp3 r14.w, r34.xyzx, r34.xyzx
    sqrt r14.w, r14.w
    mov r20.y, -r14.w
    max r14.w, r14.w, r20.y  // d<0:NaN:Inf>
    add r20.y, r4.w, l(1.000000)
    mul r31.z, r5.w, r14.w
    add r20.y, r20.y, r31.z
    max r14.w, r14.w, l(1.000000)
    mul r14.w, r14.w, r14.w
    mul r14.w, r14.w, l(1.000000)
    mul r14.w, r6.w, r14.w
    add r14.w, r14.w, r20.y
    div r32.x, l(1.000000), r14.w  // output<88:NaN:Inf>
    mul r34.xyzw, r20.wwww, cb0[0].xyzw
    mul r35.xyzw, r27.xxxx, cb0[1].xyzw
    add r34.xyzw, r34.xyzw, r35.xyzw
    mul r35.xyzw, r29.wwww, cb0[2].xyzw
    add r34.xyzw, r34.xyzw, r35.xyzw
    mul r35.xyzw, r30.wwww, cb0[3].xyzw
    add r34.xyzw, r34.xyzw, r35.xyzw
    mul r35.xyzw, r21.wwww, cb0[0].xyzw
    mul r36.xyzw, r29.xxxx, cb0[1].xyzw
    add r35.xyzw, r35.xyzw, r36.xyzw
    mul r36.xyzw, r30.xxxx, cb0[2].xyzw
    add r35.xyzw, r35.xyzw, r36.xyzw
    mul r36.xyzw, r31.xxxx, cb0[3].xyzw
    add r35.xyzw, r35.xyzw, r36.xyzw
    mul r36.xyzw, r26.yyyy, cb0[0].xyzw
    mul r37.xyzw, r29.yyyy, cb0[1].xyzw
    add r36.xyzw, r36.xyzw, r37.xyzw
    mul r37.xyzw, r30.yyyy, cb0[2].xyzw
    add r36.xyzw, r36.xyzw, r37.xyzw
    mul r31.xyzw, r31.yyyy, cb0[3].xyzw
    add r31.xyzw, r31.xyzw, r36.xyzw
    mul r36.xyzw, r26.wwww, cb0[0].xyzw
    mul r29.xyzw, r29.zzzz, cb0[1].xyzw
    add r29.xyzw, r29.xyzw, r36.xyzw
    mul r30.xyzw, r30.zzzz, cb0[2].xyzw
    add r29.xyzw, r29.xyzw, r30.xyzw
    mul r30.xyzw, r1.zzzz, cb0[3].xyzw
    add r29.xyzw, r29.xyzw, r30.xyzw
    dp4 r30.x, v0.xyzw, r34.xyzw  // output<106:NaN:Inf>
    dp4 r30.y, v0.xyzw, r35.xyzw  // output<107:NaN:Inf>
    dp4 r30.z, v0.xyzw, r31.xyzw  // output<108:NaN:Inf>
    dp4 r30.w, v0.xyzw, r29.xyzw  // output<109:NaN:Inf>
    mov r15.x, r15.x  // output<102>

#line 241
    mov r15.y, r15.y  // output<103>

#line 230
  else 

#line 243
    ieq r1.z, r15.w, l(2)
    if_nz r1.z
      mov r29.xyz, -r21.xyzx
      add r29.xyz, r0.xyzx, r29.xyzx
      dp3 r1.z, r29.xyzx, r29.xyzx
      rsq r1.z, r1.z
      mul r32.yzw, r1.zzzz, r29.xxyz  // output<89:NaN:Inf,90:NaN:Inf,91:NaN:Inf>
      mov r29.xyz, -r2.xyzx
      add r21.xyz, r21.xyzx, r29.xyzx
      dp3 r1.z, r21.xyzx, r21.xyzx
      sqrt r1.z, r1.z
      mov r14.w, -r1.z
      max r1.z, r1.z, r14.w  // d<0:NaN:Inf>
      add r4.w, r4.w, l(1.000000)
      mul r5.w, r1.z, r5.w
      add r4.w, r4.w, r5.w
      max r1.z, r1.z, l(1.000000)
      mul r1.z, r1.z, r1.z
      mul r1.z, r1.z, l(1.000000)
      mul r1.z, r1.z, r6.w
      add r1.z, r1.z, r4.w
      div r32.x, l(1.000000), r1.z  // output<88:NaN:Inf>

#line 243
    else 

#line 251
      dp3 r1.z, r27.yzwy, r27.yzwy
      rsq r1.z, r1.z
      mul r21.xyz, r1.zzzz, r27.yzwy
      mov r32.yzw, -r21.xxyz  // output<89:NaN:Inf,90:NaN:Inf,91:NaN:Inf>
      mov r32.x, l(1.000000)  // output<88: 1f>

#line 243
    endif 
    mov r30.xyzw, l(0,0,0,0)  // output<106: 0f,107: 0f,108: 0f,109: 0f>
    mov r33.xyz, l(0,0,0,0)  // output<96: 0f,97: 0f,98: 0f>
    mov r15.xy, l(0,0,0,0)  // output<102: false,103: false>
    mov r1.w, l(0)  // output<99: 0f>
    mov r3.w, l(0)  // output<100: 0f>
    mov r14.y, l(0)  // output<101: false>

#line 230
  endif 

#line 216
else 
  mov r32.xyzw, l(0,0,0,0)  // output<88: 0f,89: 0f,90: 0f,91: 0f>
  mov r25.xy, l(0,0,0,0)  // output<92: 0f,93: 0f>
  mov r25.zw, l(0,0,0,0)  // output<94: 0f,95: 0f>
  mov r15.xyzw, l(0,0,0,0)  // output<102: false,103: false,104: 0u,105: 0u>
  mov r30.xyzw, l(0,0,0,0)  // output<106: 0f,107: 0f,108: 0f,109: 0f>
  mov r33.xyz, l(0,0,0,0)  // output<96: 0f,97: 0f,98: 0f>
  mov r1.w, l(0)  // output<99: 0f>
  mov r3.w, l(0)  // output<100: 0f>
  mov r14.y, l(0)  // output<101: false>
endif 

#line 256
mov r1.z, cb0[17].x  // output<110>
mov o0.xyzw, r2.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyz, r4.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
mov o1.w, r12.w  // VS<34>
mov o2.xyz, r5.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
mov o2.w, r16.w  // VS<55>
mov o3.xyz, r6.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
mov o3.w, r18.w  // VS<56>
mov o4.xy, r1.xyxx  // VS<13,14>
mov o4.z, r11.w  // VS<33>
mov o4.w, r23.w  // VS<77>
mov o5.xyz, r3.xyzx  // VS<15,16,17>
mov o5.w, r24.w  // VS<78>
mov o6.xyzw, r0.xyzw  // VS<18:NaN:Inf,19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
mov o7.x, r17.x  // VS<22:NaN:Inf>
mov o7.y, r17.y  // VS<23:NaN:Inf>
mov o7.z, r17.z  // VS<24:NaN:Inf>
mov o7.w, r17.w  // VS<25:NaN:Inf>
mov o8.x, r9.x  // VS<26>
mov o8.y, r9.y  // VS<27>
mov o8.z, r9.z  // VS<28>
mov o8.w, r9.w  // VS<29>
mov o9.x, r11.x  // VS<30:NaN:Inf>
mov o9.y, r11.y  // VS<31:NaN:Inf>
mov o9.z, r11.z  // VS<32:NaN:Inf>
mov o9.w, r1.w  // VS<99>
mov o10.x, r12.x  // VS<35>
mov o10.y, r12.y  // VS<36>
mov o10.z, r12.z  // VS<37>
mov o10.w, r7.w  // VS<38>
mov o11.x, r7.x  // VS<39>
mov o11.y, r18.x  // VS<57>
mov o11.z, r18.y  // VS<58>
mov o11.w, r18.z  // VS<59>
mov o12.x, r7.y  // VS<40:NaN:Inf>
mov o12.y, r7.z  // VS<41:NaN:Inf>
mov o12.z, r14.z  // VS<42:NaN:Inf>
mov o12.w, r14.x  // VS<43:NaN:Inf>
mov o13.x, r22.x  // VS<44:NaN:Inf>
mov o13.y, r22.y  // VS<45:NaN:Inf>
mov o13.z, r22.z  // VS<46:NaN:Inf>
mov o13.w, r22.w  // VS<47:NaN:Inf>
mov o14.x, r13.x  // VS<48>
mov o14.y, r13.y  // VS<49>
mov o14.z, r13.z  // VS<50>
mov o14.w, r13.w  // VS<51>
mov o15.x, r16.x  // VS<52:NaN:Inf>
mov o15.y, r16.y  // VS<53:NaN:Inf>
mov o15.z, r16.z  // VS<54:NaN:Inf>
mov o15.w, r3.w  // VS<100>
mov o16.x, r8.x  // VS<60>
mov o16.y, r8.y  // VS<61>
mov o16.z, r24.x  // VS<79>
mov o16.w, r24.y  // VS<80>
mov o17.x, r8.z  // VS<62:NaN:Inf>
mov o17.y, r8.w  // VS<63:NaN:Inf>
mov o17.z, r20.z  // VS<64:NaN:Inf>
mov o17.w, r20.x  // VS<65:NaN:Inf>
mov o18.x, r28.x  // VS<66:NaN:Inf>
mov o18.y, r28.y  // VS<67:NaN:Inf>
mov o18.z, r28.z  // VS<68:NaN:Inf>
mov o18.w, r28.w  // VS<69:NaN:Inf>
mov o19.x, r19.x  // VS<70>
mov o19.y, r19.y  // VS<71>
mov o19.z, r19.z  // VS<72>
mov o19.w, r19.w  // VS<73>
mov o21.x, r24.z  // VS<81>
mov o21.y, r10.y  // VS<82>
mov o21.z, r10.x  // VS<83>
mov o21.w, r14.y  // VS<101>
mov o22.x, r10.z  // VS<84:NaN:Inf>
mov o22.y, r10.w  // VS<85:NaN:Inf>
mov o22.z, r26.z  // VS<86:NaN:Inf>
mov o22.w, r26.x  // VS<87:NaN:Inf>
mov o23.xyzw, r32.xyzw  // VS<88:NaN:Inf,89:NaN:Inf,90:NaN:Inf,91:NaN:Inf>
mov o24.xyzw, r25.xyzw  // VS<92,93,94,95>
mov o26.xyzw, r15.xyzw  // VS<102,103,104,105>
mov o27.xyzw, r30.xyzw  // VS<106:NaN:Inf,107:NaN:Inf,108:NaN:Inf,109:NaN:Inf>
mov o20.x, r23.x  // VS<74:NaN:Inf>
mov o20.y, r23.y  // VS<75:NaN:Inf>
mov o20.z, r23.z  // VS<76:NaN:Inf>
mov o25.xyz, r33.xyzx  // VS<96:NaN:Inf,97:NaN:Inf,98:NaN:Inf>
mov o28.x, r1.z  // VS<110>
ret 
// Approximately 814 instruction slots used
