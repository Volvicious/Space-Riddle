//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewInv;               // Offset:   64 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:  128 Size:    64 [unused]
//   float4x4 g_mProjectionInv;         // Offset:  192 Size:    64
//   float4x4 g_mProjectionInvViewport; // Offset:  256 Size:    64 [unused]
//   float4 g_f4AmbientColorUp;         // Offset:  320 Size:    16
//   float4 g_f4AmbientColorDown;       // Offset:  336 Size:    16
//   float3 g_f3CameraPos;              // Offset:  352 Size:    12
//   float g_fAlphaTest;                // Offset:  364 Size:     4 [unused]
//   uint g_uNumLights;                 // Offset:  368 Size:     4 [unused]
//   uint g_uNumSpotLights;             // Offset:  372 Size:     4 [unused]
//   uint g_uWindowWidth;               // Offset:  376 Size:     4 [unused]
//   uint g_uWindowHeight;              // Offset:  380 Size:     4 [unused]
//   uint g_uMaxNumLightsPerTile;       // Offset:  384 Size:     4
//   uint g_uMaxNumElementsPerTile;     // Offset:  388 Size:     4
//   uint g_uNumTilesX;                 // Offset:  392 Size:     4
//   uint g_uNumTilesY;                 // Offset:  396 Size:     4 [unused]
//   uint g_uMaxVPLs;                   // Offset:  400 Size:     4 [unused]
//   uint g_uMaxNumVPLsPerTile;         // Offset:  404 Size:     4
//   uint g_uMaxNumVPLElementsPerTile;  // Offset:  408 Size:     4
//   float g_fVPLSpotStrength;          // Offset:  412 Size:     4 [unused]
//   float g_fVPLSpotRadius;            // Offset:  416 Size:     4 [unused]
//   float g_fVPLPointStrength;         // Offset:  420 Size:     4 [unused]
//   float g_fVPLPointRadius;           // Offset:  424 Size:     4 [unused]
//   float g_fVPLRemoveBackFaceContrib; // Offset:  428 Size:     4
//   float g_fVPLColorThreshold;        // Offset:  432 Size:     4 [unused]
//   float g_fVPLBrightnessThreshold;   // Offset:  436 Size:     4 [unused]
//   float g_fPerFramePad1;             // Offset:  440 Size:     4 [unused]
//   float g_fPerFramePad2;             // Offset:  444 Size:     4 [unused]
//
// }
//
// cbuffer TexInfo
// {
//
//   float4 f4ColorAmbient;             // Offset:    0 Size:    16 [unused]
//   float fA;                          // Offset:   16 Size:     4 [unused]
//   float fH;                          // Offset:   20 Size:     4 [unused]
//   float fBumpStrength;               // Offset:   24 Size:     4
//   float frTransparency;              // Offset:   28 Size:     4 [unused]
//   float4 f4ColorSSS;                 // Offset:   32 Size:    16
//   float4 f4SSSBRDFParams;            // Offset:   48 Size:    16
//   uint uImage;                       // Offset:   64 Size:     4 [unused]
//   uint uGlow;                        // Offset:   68 Size:     4
//   uint uSpecular;                    // Offset:   72 Size:     4
//   uint uBump;                        // Offset:   76 Size:     4
//   uint uImageBlack;                  // Offset:   80 Size:     4 [unused]
//   uint uGlowAsImage;                 // Offset:   84 Size:     4
//   uint uSpecularAsImage;             // Offset:   88 Size:     4
//   uint uHeightAsImage;               // Offset:   92 Size:     4 [unused]
//   uint uImageWhite;                  // Offset:   96 Size:     4 [unused]
//   uint uGlowWhite;                   // Offset:  100 Size:     4 [unused]
//   uint uSpecularWhite;               // Offset:  104 Size:     4
//   uint uHeight;                      // Offset:  108 Size:     4 [unused]
//   uint uShadingOn;                   // Offset:  112 Size:     4
//   uint uGlowAsAmbient;               // Offset:  116 Size:     4
//   uint uChromaKeying;                // Offset:  120 Size:     4 [unused]
//   uint uEnvironment;                 // Offset:  124 Size:     4
//   uint uPOM;                         // Offset:  128 Size:     4
//   uint uTexBRDF;                     // Offset:  132 Size:     4 [unused]
//   uint uTexSSS;                      // Offset:  136 Size:     4
//   uint uReflectionMap;               // Offset:  140 Size:     4 [unused]
//   uint uixPos;                       // Offset:  144 Size:     4
//   uint uiyPos;                       // Offset:  148 Size:     4
//   uint uixPics;                      // Offset:  152 Size:     4
//   uint uiyPics;                      // Offset:  156 Size:     4
//   float fRoughness;                  // Offset:  160 Size:     4
//   float fIOR;                        // Offset:  164 Size:     4
//   float fSpecular;                   // Offset:  168 Size:     4
//   float fMetallic;                   // Offset:  172 Size:     4
//   float fSubSurface;                 // Offset:  176 Size:     4
//   float fAnistropic;                 // Offset:  180 Size:     4 [unused]
//   float fSheen;                      // Offset:  184 Size:     4
//   float fSheenTint;                  // Offset:  188 Size:     4 [unused]
//   float fClearCoat;                  // Offset:  192 Size:     4
//   float fClearCoatGloss;             // Offset:  196 Size:     4
//   float fSpecularTint;               // Offset:  200 Size:     4
//   uint uTextureAddressMode;          // Offset:  204 Size:     4 [unused]
//
// }
//
// cbuffer ViewportArt
// {
//
//   float4 f4ColorViewportOutline;     // Offset:    0 Size:    16
//   float4 f4FogParams;                // Offset:   16 Size:    16
//   float4x4 mColorModification;       // Offset:   32 Size:    64
//   uint uStyleColor;                  // Offset:   96 Size:     4
//   uint uStyleHalfTransparent;        // Offset:  100 Size:     4
//   uint uStylePopart;                 // Offset:  104 Size:     4 [unused]
//   uint uStyleOutlining;              // Offset:  108 Size:     4
//   uint uStyleMonochrome;             // Offset:  112 Size:     4 [unused]
//   uint uStyleOwn;                    // Offset:  116 Size:     4 [unused]
//   uint uStyleFog;                    // Offset:  120 Size:     4
//   uint uPad0;                        // Offset:  124 Size:     4 [unused]
//
// }
//
// Resource bind info for g_VPLCenterAndRadiusBuffer
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
// Resource bind info for g_VPLDataBuffer
// {
//
//   struct SVPLData
//   {
//       
//       float4 f4Direction;            // Offset:    0
//       float4 f4Color;                // Offset:   16
//       float4 f4SourceLightDirection; // Offset:   32
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_Sampler                         sampler      NA          NA    0        1
// g_pointLightCenterAndRadiusBuffer    texture  float4         buf    2        1
// g_pointLightColorBuffer           texture  float4         buf    3        1
// g_perTilePointLightIndexBuffer    texture    uint         buf    4        1
// g_spotLightCenterAndRadiusBuffer    texture  float4         buf    5        1
// g_spotLightColorBuffer            texture  float4         buf    6        1
// g_spotLightSpotParamsBuffer       texture  float4         buf    7        1
// g_perTileSpotLightIndexBuffer     texture    uint         buf    8        1
// g_VPLCenterAndRadiusBuffer        texture  struct         r/o    9        1
// g_VPLDataBuffer                   texture  struct         r/o   10        1
// g_perTileVPLIndexBuffer           texture    uint         buf   11        1
// tex2D[0]                          texture  float4          2d   15        1
// tex2D[1]                          texture  float4          2d   16        1
// tex2D[2]                          texture  float4          2d   17        1
// tex2D[3]                          texture  float4          2d   18        1
// tex2D[4]                          texture  float4          2d   19        1
// tex2D[5]                          texture  float4          2d   20        1
// tex2D[6]                          texture  float4          2d   21        1
// leantex                           texture  float4          2d   27        1
// cbPerFrame                        cbuffer      NA          NA    2        1
// TexInfo                           cbuffer      NA          NA    5        1
// ViewportArt                       cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyz 
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TANGENT                  0   xyz         2     NONE  float       
// BITANGENT                0   xyz         3     NONE  float       
// TEXCOORD                 0   xy          4     NONE  float   xy  
// TEXCOORD                 1   xyz         5     NONE  float   xyz 
// TEXCOORD                 2   xyzw        6     NONE  float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | enableDoublePrecisionFloatOps
dcl_constantbuffer cb2[27], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_buffer (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (float,float,float,float) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_structured t9, 16 
dcl_resource_structured t10, 48 
dcl_resource_buffer (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t27
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 25

#line 233 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
ult r0.x, l(1), cb5[9].y
ult r0.y, l(1), cb5[9].w
or r0.x, r0.y, r0.x
if_nz r0.x
  utof r0.x, cb5[9].x  // fxPic<0:[0f,4.29497e+009f]>
  utof r0.y, cb5[9].y  // fyPic<0:[0f,4.29497e+009f]>
  utof r0.z, cb5[9].z  // fxPics<0:[0f,4.29497e+009f]>
  utof r0.w, cb5[9].w  // fyPics<0:[0f,4.29497e+009f]>
  div r0.x, r0.x, r0.z
  div r0.z, l(1.000000), r0.z
  mul r0.z, r0.z, v4.x
  add r1.x, r0.z, r0.x  // input<13:NaN:Inf>
  div r0.x, r0.y, r0.w
  div r0.y, l(1.000000), r0.w
  mul r0.y, r0.y, v4.y
  add r1.y, r0.y, r0.x  // input<14:NaN:Inf>

#line 233
else 
  mov r1.xy, v4.xyxx  // input<13,14>
endif 

#line 243
div r0.xyz, v6.xyzx, v6.wwww  // f3VertexPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, l(0,0,0,0)  // f3AccumDiffuse<0: 0f,1: 0f,2: 0f>

#line 248
mov r1.xy, r1.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
deriv_rtx_coarse r3.xyz, v6.yzxy  // f3PosDDx<1:Inf,2:Inf,0:Inf>
deriv_rty_coarse r4.xyz, v6.yzxy  // f3PosDDy<1:Inf,2:Inf,0:Inf>
deriv_rtx_coarse r1.zw, r1.xxxy  // f2TexPosDDx<0:NaN:Inf,1:NaN:Inf>
deriv_rty_coarse r5.xy, r1.xyxx  // f2TexPosDDy<0:NaN:Inf,1:NaN:Inf>
mul r5.yzw, r3.zzxy, r5.yyyy
mul r6.xyz, r4.zxyz, r1.wwww
mov r6.xyz, -r6.xyzx
add r5.yzw, r5.yyzw, r6.xxyz
dp3 r0.w, r5.yzwy, r5.yzwy
rsq r0.w, r0.w
mul r5.yzw, r0.wwww, r5.yyzw  // f3T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r3.xyz, r3.xyzx, r5.xxxx
mul r4.xyz, r4.xyzx, r1.zzzz
mov r4.xyz, -r4.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx  // f3B<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
dp3 r0.w, v1.xyzx, v1.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, v1.yzxy  // f3N<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>

#line 259
mul r6.xyz, r5.zwyz, r4.zxyz
mul r5.xyz, r5.yzwy, r4.xyzx
mov r5.xyz, -r5.xyzx
add r5.xyz, r5.xyzx, r6.xyzx  // f3X<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r6.xyz, r4.yzxy, r5.zxyz
mul r5.xyz, r4.xyzx, r5.xyzx
mov r5.xyz, -r5.xyzx
add r5.xyz, r5.xyzx, r6.xyzx  // f3T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.z, r5.xyzx, r5.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, r5.xyzx  // f3T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r6.xyz, r3.zxyz, r4.xyzx
mul r3.xyz, r3.xyzx, r4.zxyz
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r6.xyzx  // f3X<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r6.xyz, r4.yzxy, r3.zxyz
mul r3.xyz, r4.xyzx, r3.xyzx
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r6.xyzx  // f3B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.z, r3.xyzx, r3.xyzx
rsq r1.z, r1.z
mul r3.xyz, r1.zzzz, r3.xyzx  // f3B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, r5.xyzx  // input<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
mov r6.xyz, r3.xyzx  // input<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>

#line 271
mov r7.xyz, -v6.xyzx
add r8.xyz, r7.xyzx, v5.xyzx
dp3 r1.z, r8.xyzx, r8.xyzx
rsq r1.w, r1.z
mul r8.xyz, r1.wwww, r8.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r7.xyz, r7.xyzx, cb2[22].xyzx
dp3 r1.w, r7.xyzx, r7.xyzx
rsq r1.w, r1.w
mul r7.xyz, r1.wwww, r7.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
ieq r1.w, cb5[8].x, l(1)
if_nz r1.w

#line 281
  dp3 r5.x, r7.xyzx, r5.xyzx  // f3ViewDirTS<0:NaN:Inf>
  dp3 r5.y, r7.xyzx, r3.xyzx  // f3ViewDirTS<1:NaN:Inf>
  dp3 r1.w, r7.xyzx, v1.xyzx  // f3ViewDirTS<2:NaN:Inf>
  mov r3.xy, -r5.xyxx
  mul r3.xy, r3.xyxx, l(0.020000, 0.020000, 0.000000, 0.000000)
  div r3.xy, r3.xyxx, r1.wwww  // f2MaxParallaxOffset<0:NaN:Inf,1:NaN:Inf>
  mov r5.xyz, -r8.xyzx
  dp3 r1.w, r5.xyzx, v1.xyzx
  mul r1.w, r1.w, l(-20.000000)
  add r1.w, r1.w, l(25.000000)
  ftoi r1.w, r1.w  // iSampleCount<0>
  itof r2.w, r1.w
  div r2.w, l(1.000000), r2.w  // fZStep<0:Inf>
  mul r3.xy, r2.wwww, r3.xyxx  // f2TexStep<0:NaN:Inf,1:NaN:Inf>
  deriv_rtx_coarse r3.zw, r1.xxxy  // f2Dx<0:NaN:Inf,1:NaN:Inf>
  deriv_rty_coarse r5.xy, r1.xyxx  // f2Dy<0:NaN:Inf,1:NaN:Inf>

#line 293
  mov r4.w, l(0)  // iSampleIdx<0: 0>
  mov r5.zw, l(0,0,0,0)  // f2CurTexOffset<0: -0f,1: -0f>

#line 297
  mov r2.w, -r2.w
  add r6.w, r2.w, l(1.000000)  // fCurRayZ<0:Inf>
  mov r7.w, l(1.000000)  // fPrevRayZ<0: 1f>

#line 305
  mov r9.xy, r5.zwzz  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r9.zw, r5.zzzw  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r10.xy, r5.zwzz  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r8.w, r4.w  // iSampleIdx<0>
  mov r10.z, r6.w  // fCurRayZ<0:NaN:Inf>
  mov r10.w, r7.w  // fPrevRayZ<0:NaN:Inf>
  mov r11.x, r4.w  // fPrevHeight<0:NaN:Inf>
  loop 
    iadd r11.y, r1.w, l(1)
    ilt r11.z, r8.w, r11.y
    breakc_z r11.z
    add r11.zw, r1.xxxy, r9.xxxy
    sample_d_indexable(texture2d)(float,float,float,float) r11.z, r11.zwzz, t20.xzyw, s0, r3.zwzz, r5.xyxx
    mov r11.z, r11.z  // fCurHeight<0:Inf>
    add r11.z, r11.z, r11.x
    mul r11.z, r11.z, l(0.500000)  // fCurHeight<0:NaN:Inf>
    lt r11.w, r10.z, r11.z
    if_nz r11.w
      mov r11.w, -r10.w
      add r12.x, r11.w, r11.x
      mov r12.y, -r11.z
      add r12.y, r11.x, r12.y
      add r12.y, r10.z, r12.y
      add r11.w, r11.w, r12.y
      div r11.w, r12.x, r11.w  // fT<0:NaN:Inf>
      mul r12.xy, r3.xyxx, r11.wwww
      add r10.xy, r9.zwzz, r12.xyxx  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r8.w, r11.y  // iSampleIdx<0>
    else 

#line 319
      iadd r8.w, r8.w, l(1)  // iSampleIdx<0>
      mov r9.zw, r9.xxxy  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r10.w, r10.z  // fPrevRayZ<0:NaN:Inf>
      mov r11.x, r11.z  // fPrevHeight<0:NaN:Inf>
      add r9.xy, r3.xyxx, r9.xyxx  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
      add r10.z, r2.w, r10.z  // fCurRayZ<0:NaN:Inf>

#line 310
    endif 

#line 305
  endloop 

#line 328
  add r1.xy, r1.xyxx, r10.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>

#line 334
  mul r3.xyz, r0.wwww, v1.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 275
else 
  mov r3.xyz, v1.xyzx  // input<4,5,6>
endif 

#line 337
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyxx, t15.xyzw, s0  // f4DiffTex<0:Inf,1:Inf,2:Inf>

#line 350
ine r0.w, l(0, 0, 0, 0), cb5[4].w
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r1.xyxx, t18.xyzw, s0
  mul r9.xy, r9.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
  add r9.xy, r9.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // f3BumpNormal<0:Inf,1:Inf>
  mul r9.xy, r9.xyxx, cb5[1].zzzz  // f3BumpNormal<0:NaN:Inf,1:NaN:Inf>
  mul r4.xyz, r4.xyzx, r9.xxxx
  mul r6.xyz, r6.xyzx, r9.yyyy
  add r4.xyz, r4.xyzx, r6.xyzx
  add r4.xyz, r3.xyzx, r4.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r0.w, r4.xyzx, r4.xyzx
  rsq r0.w, r0.w
  mul r3.xyz, r0.wwww, r4.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 350
endif 

#line 357
mov r3.xyz, r3.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 369
mul r0.w, r3.y, l(0.500000)
add r0.w, r0.w, l(0.500000)  // fAmbientBlend<0:NaN:Inf>
mul r4.xyz, r0.wwww, cb2[20].xyzx
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r6.xyz, r0.wwww, cb2[21].xyzx
add r4.xyz, r4.xyzx, r6.xyzx  // f3Ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 376
nop 
mov r0.w, cb2[24].x  // uMaxNumLightsPerTile<0>
mov r1.w, cb2[24].y  // uMaxNumElementsPerTile<0>
mov r6.xyz, v0.xyzx  // SVPosition<0,1,2>

#line 122 "constant.h"
nop 
mov r6.xy, r6.xyxx  // ScreenPos<0,1>

#line 112
div r2.w, r6.x, l(32.000000)
round_ni r2.w, r2.w
div r3.w, r6.y, l(32.000000)
round_ni r3.w, r3.w
utof r4.w, cb2[24].z
mul r3.w, r3.w, r4.w
add r2.w, r2.w, r3.w
ftou r2.w, r2.w  // nTileIdx<0>
mov r2.w, r2.w  // GetTileIndex<0>

#line 122
mov r2.w, r2.w  // nTileIndex<0>
imul null, r3.w, r1.w, r2.w  // nStartIndex<0>

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r3.wwww, t4.yzwx
mov r4.w, r4.w  // uHalfZBitsHigh<0>
imad r5.w, r1.w, r2.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r6.x, r5.wwww, t4.xyzw
mov r6.x, r6.x  // uHalfZBitsLow<0>
ishl r4.w, r4.w, l(16)
or r4.w, r6.x, r4.w  // uHalfZBits<0>
mov r4.w, r4.w  // fHalfZ<0:NaN:Inf>
nop 
mov r6.z, r6.z  // z<0>

#line 105
mul r6.x, r6.z, cb2[15].z
add r6.x, r6.x, cb2[15].w
div r6.x, l(1.000000), r6.x  // z<0:Inf>
mov r6.x, r6.x  // ConvertProjDepthToView<0:Inf>

#line 131
mov r6.x, r6.x  // fViewPosZ<0:Inf>
lt r4.w, r6.x, r4.w
imad r6.y, r1.w, r2.w, l(4)
iadd r0.w, r6.y, r0.w
movc r6.z, r4.w, r6.y, r0.w  // uFirstLightIndex<0>
imad r6.w, r1.w, r2.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r6.wwww, t4.yzwx
imad r1.w, r1.w, r2.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r1.wwww, t4.yzwx
movc r4.w, r4.w, r7.w, r8.w  // uNumLights<0>

#line 376 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r6.z, r6.z  // uStartIndex<0>
mov r4.w, r4.w  // uLightCount<0>

#line 380
mov r6.z, r6.z  // i<0>

#line 391
mov r1.xy, r1.xyxx  // f2TexCoord<0:NaN:Inf,1:NaN:Inf>

#line 196 "lightingconstants.h"
sample_indexable(texture2d)(float,float,float,float) r9.xyz, r1.xyxx, t27.xyzw, s0  // f2LeanB<0:Inf,1:Inf>

#line 405 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
sample_indexable(texture2d)(float,float,float,float) r10.xyz, r1.xyxx, t21.xyzw, s0

#line 380
mov r11.xyz, r2.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r7.w, r6.z  // i<0>
loop 
  iadd r8.w, r6.z, r4.w
  ult r8.w, r7.w, r8.w
  breakc_z r8.w
  ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r7.wwww, t4.yzwx
  mov r8.w, r8.w  // uLightIndex<0>

#line 391
  nop 
  mov r8.w, r8.w  // uLightIndex<0>
  mov r12.xyz, r0.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r13.xyz, r3.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r7.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r5.xyzx  // f4DiffMapColor<0:Inf,1:Inf,2:Inf>

#line 185 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r16.xyzw, r8.wwww, t2.wxyz  // f4CenterAndRadius<3:Inf,0:Inf,1:Inf,2:Inf>
  mov r12.xyz, -r12.xyzx
  add r12.xyz, r12.xyzx, r16.yzwy  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r9.w, r12.xyzx, r12.xyzx
  sqrt r9.w, r9.w  // fLightDistance<0:NaN:Inf>

#line 194
  mov r16.x, r16.x  // fRad<0:Inf>
  mov r16.yz, r9.xxyx  // f2LeanB<0:Inf,1:Inf>
  mov r17.xyz, r9.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 200
  lt r10.w, r9.w, r16.x
  if_nz r10.w
    div r10.w, r9.w, r16.x  // fx<0:NaN:Inf>
    mul r10.w, r10.w, r10.w
    mul r10.w, r10.w, r10.w
    mul r10.w, r10.w, l(1.000000)
    mov r10.w, -r10.w
    add r10.w, r10.w, l(1.000000)
    mul r10.w, r10.w, r10.w
    mul r10.w, r10.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    add r9.w, r9.w, l(1.000000)
    div r9.w, r10.w, r9.w
    max r9.w, r9.w, l(0.000000)
    min r9.w, r9.w, l(1.000000)  // fFallOff<0:[0f,1f]>

#line 207
    ld_indexable(buffer)(float,float,float,float) r18.xyz, r8.wwww, t3.xyzw
    nop 
    mov r12.xyz, r12.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r19.xyz, r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r10.w, cb5[10].x  // fRoughness<0>
    mov r11.w, cb5[10].y  // fF0<0>
    mov r20.xyz, r15.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>
    mov r16.yz, r16.yyzy  // f2LeanB<0:Inf,1:Inf>
    mov r17.xyz, r17.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 161 "ggxlighting.h"
    dp3 r12.w, r19.xyzx, r19.xyzx
    rsq r12.w, r12.w
    mul r19.xyz, r12.wwww, r19.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r21.xyz, r19.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r22.xyz, r19.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
    mov r22.xyz, -r22.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r22.xyz, r19.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mul r23.xyz, r19.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r23.xyz, r19.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r24.xyz, r19.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r24.xyz, -r24.xyzx
    add r23.xyz, r23.xyzx, r24.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r12.w, r21.xyzx, r21.xyzx
    sqrt r13.w, r12.w
    dp3 r14.w, r22.xyzx, r22.xyzx
    sqrt r15.w, r14.w
    lt r16.x, r15.w, r13.w
    dp3 r16.w, r23.xyzx, r23.xyzx
    sqrt r17.w, r16.w
    lt r18.w, r17.w, r13.w
    or r16.x, r16.x, r18.w
    if_nz r16.x
      rsq r12.w, r12.w
      mul r21.xyz, r12.wwww, r21.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r12.w, r13.w, r15.w
      lt r13.w, r17.w, r15.w
      or r12.w, r12.w, r13.w
      if_nz r12.w
        rsq r12.w, r14.w
        mul r21.xyz, r12.wwww, r22.xyzx  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r12.w, r16.w
        mul r21.xyz, r12.wwww, r23.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r22.xyz, r19.yzxy, r21.zxyz
    mul r23.xyz, r19.zxyz, r21.yzxy
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx
    dp3 r12.w, r22.xyzx, r22.xyzx
    rsq r12.w, r12.w
    mul r22.xyz, r12.wwww, r22.xyzx  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r23.xyz, r12.xyzx, r14.xyzx
    dp3 r12.w, r23.xyzx, r23.xyzx
    rsq r12.w, r12.w
    mul r24.xyz, r12.wwww, r23.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r21.x, r23.xyzx, r21.xyzx
    dp3 r21.y, r23.xyzx, r22.xyzx
    dp3 r21.z, r23.xyzx, r19.xyzx
    dp3 r12.w, r21.xyzx, r21.xyzx
    rsq r12.w, r12.w
    mul r21.xyz, r12.wwww, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 187
    dp3 r12.w, r12.xyzx, r12.xyzx
    sqrt r12.w, r12.w  // f3Llength<0:NaN:Inf>
    dp3 r13.w, r14.xyzx, r14.xyzx
    sqrt r13.w, r13.w  // f3Vlength<0:NaN:Inf>
    dp3 r14.w, r19.xyzx, r12.xyzx  // fDotNL<0:NaN:Inf>
    dp3 r15.w, r19.xyzx, r14.xyzx  // fDotNV<0:NaN:Inf>
    div r14.w, r14.w, r12.w  // fDotNL<0:NaN:Inf>
    div r13.w, r15.w, r13.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r15.w, r19.xyzx, r24.xyzx  // fDotNH<0:NaN:Inf>
    div r22.xyz, r12.xyzx, r12.wwww
    dp3 r12.w, r22.xyzx, r24.xyzx  // fDotLH<0:NaN:Inf>
    nop 
    mov r20.xyz, r20.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>

#line 118
    mov r16.x, -r20.x
    max r16.x, r16.x, r20.x
    log r16.x, r16.x
    mul r16.x, r16.x, l(2.200000)
    exp r22.x, r16.x  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    mov r16.x, -r20.y
    max r16.x, r16.x, r20.y
    log r16.x, r16.x
    mul r16.x, r16.x, l(2.200000)
    exp r22.y, r16.x  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    mov r16.x, -r20.z
    max r16.x, r16.x, r20.z
    log r16.x, r16.x
    mul r16.x, r16.x, l(2.200000)
    exp r22.z, r16.x  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r22.xyz, r22.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r16.x, r22.x, l(0.300000)
    mul r16.w, r22.y, l(0.600000)
    add r16.x, r16.w, r16.x
    mul r16.w, r22.z, l(0.100000)
    add r16.x, r16.w, r16.x  // fCdLum<0:NaN:Inf>

#line 204
    lt r16.w, l(0.000000), r16.x
    div r20.xyz, r22.xyzx, r16.xxxx
    movc r20.xyz, r16.wwww, r20.xyzx, l(1.000000,1.000000,1.000000,0)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r16.x, l(0.080000), cb5[10].z
    add r20.xyz, r20.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r20.xyz, r20.xyzx, cb5[12].zzzz
    add r20.xyz, r20.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r20.xyz, r16.xxxx, r20.xyzx
    mov r23.xyz, -r20.xyzx
    add r23.xyz, r22.xyzx, r23.xyzx
    mul r23.xyz, r23.xyzx, cb5[10].wwww
    add r20.xyz, r20.xyzx, r23.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r14.w, r14.w  // fu<0:NaN:Inf>

#line 41
    mov r16.x, -r14.w
    add r16.x, r16.x, l(1.000000)
    max r16.x, r16.x, l(0.000000)
    min r16.x, r16.x, l(1.000000)  // fm<0:[-0f,1f]>
    mul r16.w, r16.x, r16.x  // fm2<0:[0f,1f]>
    mul r16.w, r16.w, r16.w
    mul r16.x, r16.x, r16.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r16.x, r16.x  // fFL<0:[-0f,1f]>
    nop 
    mov r13.w, r13.w  // fu<0:NaN:Inf>

#line 41
    mov r16.w, -r13.w
    add r16.w, r16.w, l(1.000000)
    max r16.w, r16.w, l(0.000000)
    min r16.w, r16.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r17.w, r16.w, r16.w  // fm2<0:[0f,1f]>
    mul r17.w, r17.w, r17.w
    mul r16.w, r16.w, r17.w  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r16.w, r16.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r12.xyz, r12.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r19.xyz, r19.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r10.w, r10.w  // fRoughness<0>

#line 48
    mov r17.w, r10.w  // fSigma<0>

#line 51
    dp3 r18.w, r14.xyzx, r19.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r19.w, r12.xyzx, r19.xyzx  // fLDotN<0:NaN:Inf>
    dp3 r20.w, r12.xyzx, r12.xyzx
    sqrt r20.w, r20.w  // f3Llength<0:NaN:Inf>
    dp3 r21.w, r14.xyzx, r14.xyzx
    sqrt r21.w, r21.w  // f3Vlength<0:NaN:Inf>
    div r18.w, r18.w, r21.w  // fVDotN<0:NaN:Inf>
    div r19.w, r19.w, r20.w  // fLDotN<0:NaN:Inf>
    mov r20.w, -r18.w
    max r21.w, r18.w, r20.w
    mov r22.w, -r21.w
    add r22.w, r22.w, l(1.000000)
    sqrt r22.w, r22.w
    mul r23.x, r21.w, l(-0.018729)
    add r23.x, r23.x, l(0.074261)
    mul r23.x, r21.w, r23.x
    add r23.x, r23.x, l(-0.212114)
    mul r21.w, r21.w, r23.x
    add r21.w, r21.w, l(1.570729)
    mul r21.w, r22.w, r21.w
    mul r22.w, r21.w, l(-2.000000)
    add r22.w, r22.w, l(3.141593)
    lt r20.w, r18.w, r20.w
    and r20.w, r20.w, r22.w
    add r20.w, r20.w, r21.w  // fThetaR<0:NaN:Inf>
    mul r17.w, r17.w, l(3.141593)
    div r17.w, r17.w, l(180.000000)
    mul r17.w, r17.w, r17.w
    mul r17.w, r17.w, l(1.000000)  // fSigma2<0:Inf:[0f,1.#INFf]>

#line 63
    mul r23.xyz, r18.wwww, r19.xyzx
    mov r23.xyz, -r23.xyzx
    add r23.xyz, r14.xyzx, r23.xyzx
    dp3 r18.w, r23.xyzx, r23.xyzx
    rsq r18.w, r18.w
    mul r23.xyz, r18.wwww, r23.xyzx
    mul r24.xyz, r19.wwww, r19.xyzx
    mov r24.xyz, -r24.xyzx
    add r24.xyz, r12.xyzx, r24.xyzx
    dp3 r18.w, r24.xyzx, r24.xyzx
    rsq r18.w, r18.w
    mul r24.xyz, r18.wwww, r24.xyzx
    dp3 r18.w, r23.xyzx, r24.xyzx  // fCosPhiDiff<0:NaN:Inf>
    mov r21.w, -r19.w
    max r22.w, r19.w, r21.w
    mov r23.x, -r22.w
    add r23.x, r23.x, l(1.000000)
    sqrt r23.x, r23.x
    mul r23.y, r22.w, l(-0.018729)
    add r23.y, r23.y, l(0.074261)
    mul r23.y, r22.w, r23.y
    add r23.y, r23.y, l(-0.212114)
    mul r22.w, r22.w, r23.y
    add r22.w, r22.w, l(1.570729)
    mul r22.w, r23.x, r22.w
    mul r23.x, r22.w, l(-2.000000)
    add r23.x, r23.x, l(3.141593)
    lt r19.w, r19.w, r21.w
    and r19.w, r19.w, r23.x
    add r19.w, r19.w, r22.w  // fThetaI<0:NaN:Inf>
    max r21.w, r20.w, r19.w  // fAlpha<0:NaN:Inf>
    min r19.w, r20.w, r19.w  // fBeta<0:NaN:Inf>
    lt r20.w, l(1.570796), r21.w
    if_nz r20.w
      mov r22.w, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r20.w
      mul r20.w, r17.w, l(0.500000)
      add r23.x, r17.w, l(0.330000)
      div r20.w, r20.w, r23.x
      mov r20.w, -r20.w
      add r20.w, r20.w, l(1.000000)  // fC1<0:NaN:Inf>
      mul r23.x, r17.w, l(0.450000)
      add r23.y, r17.w, l(0.090000)
      div r23.x, r23.x, r23.y  // fC2<0:NaN:Inf>
      ge r23.z, r18.w, l(0.000000)
      if_nz r23.z
        sincos r23.z, null, r21.w
        mul r23.z, r23.z, r23.x  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r23.w, null, r21.w
        mul r24.x, r19.w, l(2.000000)
        div r24.x, r24.x, l(3.141593)
        mul r24.y, r24.x, l(1.000000)
        mul r24.x, r24.x, r24.x
        mul r24.x, r24.x, r24.y
        mov r24.x, -r24.x
        add r23.w, r23.w, r24.x
        mul r23.z, r23.w, r23.x  // fC2<0:NaN:Inf>
      endif 
      mul r23.x, r17.w, l(0.125000)
      div r23.x, r23.x, r23.y
      mul r23.y, r21.w, l(4.000000)
      mul r23.y, r19.w, r23.y
      div r23.y, r23.y, l(9.869604)
      mul r23.y, r23.y, r23.y
      mul r23.y, r23.y, l(1.000000)
      mul r23.x, r23.y, r23.x  // fC3<0:NaN:Inf>
      mul r23.y, r18.w, r23.z
      sincos r23.z, null, r19.w
      sincos null, r23.w, r19.w
      div r23.z, r23.z, r23.w
      mul r23.y, r23.z, r23.y
      add r20.w, r20.w, r23.y
      mov r23.y, -r18.w
      max r23.y, r18.w, r23.y
      mov r23.y, -r23.y
      add r23.y, r23.y, l(1.000000)
      mul r23.x, r23.x, r23.y
      add r21.w, r19.w, r21.w
      div r21.w, r21.w, l(2.000000)
      sincos r23.y, null, r21.w
      sincos null, r21.w, r21.w
      div r21.w, r23.y, r21.w
      mul r21.w, r21.w, r23.x
      add r20.w, r20.w, r21.w
      mul r20.w, r20.w, l(0.795775)  // fL1<0:NaN:Inf>
      mul r21.w, r17.w, l(0.338204)
      add r17.w, r17.w, l(0.130000)
      div r17.w, r21.w, r17.w
      mul r21.w, r19.w, l(4.000000)
      mul r19.w, r19.w, r21.w
      mul r18.w, r18.w, r19.w
      div r18.w, r18.w, l(9.869604)
      mov r18.w, -r18.w
      add r18.w, r18.w, l(1.000000)
      mul r17.w, r17.w, r18.w  // fL2<0:NaN:Inf>
      add r22.w, r17.w, r20.w  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r22.w, r22.w  // fFd<0:NaN:Inf>

#line 219
    mul r17.w, r12.w, r12.w
    mul r17.w, r10.w, r17.w  // fFss90<0:NaN:Inf>
    add r17.w, r17.w, l(-1.000000)
    mul r16.x, r16.x, r17.w
    add r16.x, r16.x, l(1.000000)
    mul r16.w, r16.w, r17.w
    add r16.w, r16.w, l(1.000000)
    mul r16.x, r16.w, r16.x  // fFss<0:NaN:Inf>
    add r16.w, r13.w, r14.w
    div r16.w, l(1.000000), r16.w
    add r16.w, r16.w, l(-0.500000)
    mul r16.x, r16.w, r16.x
    add r16.x, r16.x, l(0.500000)
    mul r16.x, r16.x, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r16.yz, r16.yyzy  // f2LeanB<0:Inf,1:Inf>
    mov r17.xyz, r17.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>
    mov r21.xyz, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    mul r16.yz, r16.yyzy, l(0.000000, 0.010000, 0.010000, 0.000000)  // f2B<0:Inf,1:Inf>
    mul r17.xyz, r17.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
    mul r17.xyz, r17.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3M<0:Inf,1:Inf,2:Inf>
    nop 
    div r16.w, cb5[10].x, l(5.000000)  // fM<0:[-6.80565e+037f,6.80565e+037f]>

#line 123
    mul r16.w, r16.w, r16.w
    div r16.w, l(2.000000), r16.w
    add r16.w, r16.w, l(-2.000000)  // RoughnessToSpecPower<0:Inf:[-2f,1.#INFf]>

#line 143
    div r16.w, l(1.000000), r16.w  // fInvS<0:Inf>
    add r17.xy, r16.wwww, r17.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r23.xy, r16.yzyy, r16.yzyy
    mul r23.z, r16.z, r16.y
    mov r23.xyz, -r23.xyzx
    add r17.xyz, r17.xyzx, r23.xyzx  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r16.w, r17.y, r17.x
    mul r17.w, r17.z, r17.z
    mov r17.w, -r17.w
    add r16.w, r16.w, r17.w  // fDet<0:NaN:Inf>
    div r21.xy, r21.xyxx, r21.zzzz
    mov r16.yz, -r16.yyzy
    add r16.yz, r16.yyzy, r21.xxyx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r17.w, r16.y, r16.y
    mul r17.y, r17.y, r17.w
    mul r17.w, r16.z, r16.z
    mul r17.x, r17.x, r17.w
    add r17.x, r17.x, r17.y
    mul r16.y, r16.y, l(2.000000)
    mul r16.y, r16.z, r16.y
    mul r16.y, r17.z, r16.y
    mov r16.y, -r16.y
    add r16.y, r16.y, r17.x  // fE<0:NaN:Inf>

#line 152
    lt r16.z, l(0.000000), r21.z
    lt r17.x, l(0.000000), r16.w
    and r16.z, r16.z, r17.x
    if_nz r16.z
      mul r16.y, r16.y, l(-0.500000)
      div r16.y, r16.y, r16.w
      mul r16.y, r16.y, l(1.442695)
      exp r16.y, r16.y
      sqrt r16.z, r16.w
      mul r16.z, r16.z, l(3.141593)
      mul r16.z, r16.z, l(2.000000)
      div r16.y, r16.y, r16.z  // fD<0:NaN:Inf>
    else 
      mov r16.y, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r16.y, r16.y  // LeanMapping<0:NaN:Inf>

#line 229
    mov r16.y, r16.y  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r12.w, r12.w  // fu<0:NaN:Inf>

#line 41
    mov r12.w, -r12.w
    add r12.w, r12.w, l(1.000000)
    max r12.w, r12.w, l(0.000000)
    min r12.w, r12.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r16.z, r12.w, r12.w  // fm2<0:[0f,1f]>
    mul r16.z, r16.z, r16.z
    mul r12.w, r12.w, r16.z  // SchlickFresnel<0:[-0f,1f]>

#line 232
    mov r12.w, r12.w  // fFH<0:[-0f,1f]>
    mov r17.xyz, -r20.xyzx
    add r17.xyz, r17.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r17.xyz, r12.wwww, r17.xyzx
    add r17.xyz, r17.xyzx, r20.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    mul r10.w, r10.w, l(0.500000)
    add r10.w, r10.w, l(0.500000)  // fx<0:[-1.70141e+038f,1.70141e+038f]>

#line 86
    mul r10.w, r10.w, r10.w  // Sqr<0:Inf:[0f,1.#INFf]>

#line 234
    mov r10.w, r10.w  // fRoughG<0:Inf:[0f,1.#INFf]>
    nop 
    mov r10.w, r10.w  // fAlphaG<0:Inf:[0f,1.#INFf]>

#line 111
    mul r10.w, r10.w, r10.w  // fa<0:NaN:Inf>
    mul r16.z, r14.w, r14.w  // fb<0:NaN:Inf>
    nop 
    add r16.w, r10.w, r16.z
    mul r17.w, r10.w, r16.z
    mov r17.w, -r17.w
    add r16.w, r16.w, r17.w  // fx<0:NaN:Inf>

#line 86
    mul r16.w, r16.w, r16.w  // Sqr<0:NaN:Inf>

#line 113
    add r16.w, r14.w, r16.w
    div r16.w, l(1.000000), r16.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r17.w, r13.w, r13.w  // fb<0:NaN:Inf>
    nop 
    add r18.w, r10.w, r17.w
    mul r10.w, r10.w, r17.w
    mov r10.w, -r10.w
    add r10.w, r10.w, r18.w  // fx<0:NaN:Inf>

#line 86
    mul r10.w, r10.w, r10.w  // Sqr<0:NaN:Inf>

#line 113
    add r10.w, r10.w, r13.w
    div r10.w, l(1.000000), r10.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r10.w, r10.w, r16.w  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r15.w, r15.w  // fDotNH<0:NaN:Inf>
    mul r16.w, l(-0.099000), cb5[12].y
    add r16.w, r16.w, l(0.100000)  // fa<0:[-3.3688e+037f,3.3688e+037f]>

#line 91
    ge r18.w, r16.w, l(1.000000)
    if_nz r18.w
      mov r19.w, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r18.w
      mul r16.w, r16.w, r16.w  // fa2<0:Inf:[0f,1.#INFf]>
      add r18.w, r16.w, l(-1.000000)
      mul r20.x, r15.w, r18.w
      mul r15.w, r15.w, r20.x
      add r15.w, r15.w, l(1.000000)  // fT<0:NaN:Inf>
      log r16.w, r16.w
      mul r16.w, r16.w, l(0.693147)
      mul r16.w, r16.w, l(3.141593)
      mul r15.w, r15.w, r16.w
      div r19.w, r18.w, r15.w  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r19.w, r19.w  // fDr<0:NaN:Inf>
    mov r15.w, -r11.w
    add r15.w, r15.w, l(1.000000)
    mul r12.w, r12.w, r15.w
    add r11.w, r11.w, r12.w  // fFr<0:Inf>
    nop 

#line 113
    nop 
    add r12.w, r16.z, l(0.062500)
    mul r15.w, r16.z, l(0.062500)
    mov r15.w, -r15.w
    add r12.w, r12.w, r15.w  // fx<0:NaN:Inf>

#line 86
    mul r12.w, r12.w, r12.w  // Sqr<0:NaN:Inf>

#line 113
    add r12.w, r12.w, r14.w
    div r12.w, l(1.000000), r12.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r15.w, r17.w, l(0.062500)
    mul r16.z, r17.w, l(0.062500)
    mov r16.z, -r16.z
    add r15.w, r15.w, r16.z  // fx<0:NaN:Inf>

#line 86
    mul r15.w, r15.w, r15.w  // Sqr<0:NaN:Inf>

#line 113
    add r15.w, r13.w, r15.w
    div r15.w, l(1.000000), r15.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r12.w, r12.w, r15.w  // fGr<0:NaN:Inf>

#line 254
    lt r14.w, r14.w, l(0.000000)
    if_nz r14.w

#line 258
      mov r12.xyz, -r12.xyzx
      dp3 r12.x, r19.xyzx, r12.xyzx
      max r12.x, r12.x, l(0.000000)
      min r12.x, r12.x, l(1.000000)
      mul r12.x, r12.x, l(1.000000)
      add r12.x, r12.x, l(-1.000000)
      mul r12.x, r12.x, l(-1.000000)
      max r12.x, r12.x, l(0.000000)
      min r12.x, r12.x, l(1.000000)
      mul r12.y, r12.x, l(-2.000000)
      add r12.y, r12.y, l(3.000000)
      mul r12.x, r12.x, r12.x
      mul r12.x, r12.x, r12.y
      max r12.x, r12.x, l(0.000000)
      min r12.x, r12.x, l(1.000000)  // retMul<0:[0f,1f]>
      mul r12.y, r12.x, r12.x
      mul r12.x, r12.x, r12.y
      mov r12.y, -r22.w
      add r12.y, r12.y, r16.x
      mul r12.y, r12.y, cb5[11].x
      add r12.y, r12.y, r22.w
      mul r12.y, r12.y, l(0.318310)
      mul r20.xyz, r22.xyzx, r12.yyyy
      add r20.xyz, r20.xyzx, cb5[11].zzzz
      mov r12.y, -cb5[10].w
      add r12.y, r12.y, l(1.000000)
      mul r20.xyz, r12.yyyy, r20.xyzx
      add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r12.xyz, r12.xxxx, r20.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r10.w, l(0)  // fGs<0: 0f>
      mov r11.w, l(0)  // fFr<0: 0f>
    endif 

#line 263
    if_z r14.w
      lt r13.w, r13.w, l(0.000000)
      if_nz r13.w

#line 267
        mov r14.xyz, -r14.xyzx
        dp3 r14.x, r19.xyzx, r14.xyzx
        add r14.x, r14.x, l(-1.000000)
        mul r14.x, r14.x, l(-1.000000)
        max r14.x, r14.x, l(0.000000)
        min r14.x, r14.x, l(1.000000)
        mul r14.y, r14.x, l(-2.000000)
        add r14.y, r14.y, l(3.000000)
        mul r14.x, r14.x, r14.x
        mul r14.x, r14.x, r14.y
        max r14.x, r14.x, l(0.000000)
        min r14.x, r14.x, l(1.000000)  // retMul<0:[0f,1f]>
        mul r14.y, r14.x, r14.x
        mul r14.x, r14.x, r14.y
        mov r14.y, -r22.w
        add r14.y, r14.y, r16.x
        mul r14.y, r14.y, cb5[11].x
        add r14.y, r14.y, r22.w
        mul r14.y, r14.y, l(0.318310)
        mul r14.yzw, r22.xxyz, r14.yyyy
        add r14.yzw, r14.yyzw, cb5[11].zzzz
        mov r15.w, -cb5[10].w
        add r15.w, r15.w, l(1.000000)
        mul r14.yzw, r14.yyzw, r15.wwww
        add r14.yzw, r14.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r14.yzw, r14.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r12.xyz, r14.yzwy, r14.xxxx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r10.w, l(0)  // fGs<0: 0f>
        mov r11.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r13.w
        mov r13.w, -r22.w
        add r13.w, r13.w, r16.x
        mul r13.w, r13.w, cb5[11].x
        add r13.w, r13.w, r22.w
        mul r13.w, r13.w, l(0.318310)
        mul r14.xyz, r22.xyzx, r13.wwww
        add r14.xyz, r14.xyzx, cb5[11].zzzz
        mov r13.w, -cb5[10].w
        add r13.w, r13.w, l(1.000000)
        mul r14.xyz, r13.wwww, r14.xyzx
        mul r16.xzw, r17.xxyz, r10.wwww
        mul r16.xyz, r16.yyyy, r16.xzwx
        add r14.xyz, r14.xyzx, r16.xyzx
        mul r10.w, l(0.250000), cb5[12].x
        mul r10.w, r12.w, r10.w
        mul r10.w, r11.w, r10.w
        mul r10.w, r19.w, r10.w
        add r12.xyz, r10.wwww, r14.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 207 "lightingconstants.h"
    mul r12.xyz, r12.xyzx, r18.xyzx
    mul r12.xyz, r9.wwww, r12.xyzx
    max r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r12.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3LightColorDiffuseResult<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 216
    mul r12.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3LightColorDiffuseResult<0:[0f,2f],1:[0f,2f],2:[0f,2f]>

#line 200
  else 
    mov r12.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 391 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r12.xyz, r12.xyzx  // f3LightColorDiffuseResult<0:[-0f,2f],1:[-0f,2f],2:[-0f,2f]>

#line 397
  ine r9.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r9.w
    ld_indexable(buffer)(float,float,float,float) r14.xyz, r8.wwww, t2.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r16.xyz, r8.wwww, t3.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>

#line 405
    dp3 r8.w, r10.xyzx, r10.xyzx
    sqrt r8.w, r8.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r14.xyz, r14.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r16.xyz, r16.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r8.w, r8.w  // fThickValue<0:NaN:Inf>
    mov r9.w, cb5[3].x  // f4SSSBRDFParams<0>
    mov r17.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r18.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r19.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r12.xyz, r12.xyzx  // f3LightDiffuseResult<0:[-0f,2f],1:[-0f,2f],2:[-0f,2f]>

#line 158 "constant.h"
    mov r9.w, r9.w  // fMaterialThickness<0>
    mov r17.x, r17.x  // fExtinctionCoefficientRed<0>
    mov r17.y, r17.y  // fExtinctionCoefficientGreen<0>
    mov r17.z, r17.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r15.xyz, r15.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    mov r20.xyz, -r18.xyzx
    add r19.xyz, r19.xyzx, r20.xyzx
    dp3 r10.w, r19.xyzx, r19.xyzx
    rsq r10.w, r10.w
    mul r19.xyz, r10.wwww, r19.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r20.xyz, -r19.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r14.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r18.xyzw, -r18.xyzw
    add r14.xyzw, r14.xyzw, r18.xyzw
    dp4 r10.w, r14.xyzw, r14.xyzw
    sqrt r10.w, r10.w
    div r10.w, l(1.000000), r10.w
    mul r10.w, r10.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r20.xyz, r20.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r13.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r11.w, r20.xyzx, r14.xyzx  // fProduct<0:NaN:Inf>
    mul r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r11.w, r11.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r14.xyz, r10.wwww, r11.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r18.xyz, -r13.xyzx
    dp3 r11.w, r18.xyzx, r20.xyzx
    max r11.w, r11.w, l(0.000000)
    mul r18.xyz, r9.wwww, r11.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r11.w, r20.xyzx, r20.xyzx  // fProduct<0:NaN:Inf>
    mul r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r11.w, r11.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r11.w, r9.w, r11.w
    add r18.xyz, r11.wwww, r18.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r18.xyz, r10.wwww, r18.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r20.x, r17.x, r18.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r20.y, r17.y, r18.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r20.z, r17.z, r18.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r17.xyz, r8.wwww, r20.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r14.xyz, r15.xyzx, r14.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r14.xyz, r17.xyzx, r14.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r16.xyzx, r14.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r8.w, r19.xyzx, r13.xyzx
    max r8.w, r8.w, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
    lt r8.w, r8.w, l(0.700000)
    lt r9.w, l(2.000000), r9.w
    and r8.w, r8.w, r9.w
    if_nz r8.w

#line 205
      mul r13.xyz, r17.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r12.xyz, r12.xyzx, r13.xyzx  // f3LightDiffuseResult<0:[0f,2f],1:[0f,2f],2:[0f,2f]>
    else 

#line 210
      mul r12.xyz, r12.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 407 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r12.xyz, r12.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 397
  endif 

#line 413
  add r11.xyz, r11.xyzx, r12.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 380
  iadd r7.w, r7.w, l(1)  // i<0>
endloop 

#line 422
nop 

#line 122 "constant.h"
nop 

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r2.x, r3.wwww, t8.xyzw
mov r2.x, r2.x  // uHalfZBitsHigh<0>
ld_indexable(buffer)(uint,uint,uint,uint) r2.y, r5.wwww, t8.yxzw
mov r2.y, r2.y  // uHalfZBitsLow<0>
ishl r2.x, r2.x, l(16)
or r2.x, r2.y, r2.x  // uHalfZBits<0>
mov r2.x, r2.x  // fHalfZ<0:NaN:Inf>
nop 
lt r2.x, r6.x, r2.x
movc r0.w, r2.x, r6.y, r0.w  // uFirstLightIndex<0>
ld_indexable(buffer)(uint,uint,uint,uint) r2.y, r6.wwww, t8.yxzw
ld_indexable(buffer)(uint,uint,uint,uint) r1.w, r1.wwww, t8.yzwx
movc r1.w, r2.x, r2.y, r1.w  // uNumLights<0>

#line 422 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r0.w, r0.w  // uStartIndex<0>
mov r1.w, r1.w  // uLightCount<0>

#line 425
mov r0.w, r0.w  // i<0>
mov r2.xyz, r11.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.w, r0.w  // i<0>
loop 
  iadd r4.w, r0.w, r1.w
  ult r4.w, r3.w, r4.w
  breakc_z r4.w
  ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r3.wwww, t8.yzwx
  mov r4.w, r4.w  // uLightIndex<0>

#line 436
  nop 
  mov r4.w, r4.w  // uLightIndex<0>
  mov r6.yzw, r0.xxyz  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r12.xyz, r3.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r13.xyz, r7.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r5.xyzx  // f4DiffMapColor<0:Inf,1:Inf,2:Inf>

#line 251 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r15.xyzw, r4.wwww, t5.xyzw  // f4BoundingSphereCenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
  ld_indexable(buffer)(float,float,float,float) r16.xyzw, r4.wwww, t7.wxyz  // f4SpotParams<3:Inf,0:Inf,1:Inf,2:Inf>

#line 256
  mov r17.xy, r16.yzyy  // f3SpotLightDir<0:Inf,1:Inf>
  mul r5.w, r17.x, r17.x
  mov r5.w, -r5.w
  add r5.w, r5.w, l(1.000000)
  mul r7.w, r17.y, r17.y
  mov r7.w, -r7.w
  add r5.w, r5.w, r7.w
  sqrt r5.w, r5.w  // f3SpotLightDir<2:NaN>

#line 260
  lt r7.w, l(0.000000), r16.w
  mov r8.w, -r5.w
  movc r17.z, r7.w, r5.w, r8.w  // f3SpotLightDir<2:NaN>
  mul r18.xyz, r15.wwww, r17.xyzx
  mov r18.xyz, -r18.xyzx
  add r15.xyz, r15.xyzx, r18.xyzx  // f3LightPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r6.yzw, -r6.yyzw
  add r6.yzw, r6.yyzw, r15.xxyz  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r5.w, r6.yzwy, r6.yzwy
  rsq r8.w, r5.w
  mul r15.xyz, r6.yzwy, r8.wwww  // f3ToLightNormalized<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r5.w, r5.w  // fLightDistance<0:NaN:Inf>
  mov r15.xyz, -r15.xyzx
  dp3 r8.w, r17.xyzx, r17.xyzx
  rsq r8.w, r8.w
  mul r17.xyz, r8.wwww, r17.xyzx
  dp3 r8.w, r15.xyzx, r17.xyzx  // fCosineOfCurrentAngle<0:NaN:Inf>

#line 272
  mov r16.x, r16.x  // fRad<0:Inf>
  mov r9.w, -r16.w
  movc r7.w, r7.w, r16.w, r9.w  // fCosineOfConeAngle<0:Inf>
  mov r15.xy, r9.xyxx  // f2LeanB<0:Inf,1:Inf>
  mov r16.yzw, r9.xxyz  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 279
  lt r9.w, r5.w, r16.x
  lt r10.w, r7.w, r8.w
  and r9.w, r9.w, r10.w
  if_nz r9.w
    mov r7.w, -r7.w
    add r7.w, r7.w, r8.w
    mov r8.w, -r8.w
    add r8.w, r8.w, l(1.000000)
    div r7.w, r7.w, r8.w  // fRadialAttenuation<0:NaN:Inf>
    mul r7.w, r7.w, r7.w
    max r7.w, r7.w, l(0.000000)
    min r7.w, r7.w, l(1.000000)  // fRadialAttenuation<0:[0f,1f]>
    div r8.w, r5.w, r16.x  // fx<0:NaN:Inf>
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, l(1.000000)
    mov r8.w, -r8.w
    add r8.w, r8.w, l(1.000000)
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, l(1.000000)
    mul r5.w, r5.w, r5.w
    add r5.w, r5.w, l(1.000000)
    div r5.w, r8.w, r5.w
    max r5.w, r5.w, l(0.000000)
    min r5.w, r5.w, l(1.000000)
    ftod r15.zw, r5.w  // fFallOff<0>

#line 289
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r4.wwww, t6.xyzw
    nop 
    mov r6.yzw, r6.yyzw  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r18.xyz, r12.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r5.w, cb5[10].x  // fRoughness<0>
    mov r8.w, cb5[10].y  // fF0<0>
    mov r19.xyz, r14.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>
    mov r15.xy, r15.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r16.yzw, r16.yyzw  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 161 "ggxlighting.h"
    dp3 r9.w, r18.xyzx, r18.xyzx
    rsq r9.w, r9.w
    mul r18.xyz, r9.wwww, r18.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r20.xyz, r18.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r21.xyz, r18.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
    mov r21.xyz, -r21.xyzx
    add r20.xyz, r20.xyzx, r21.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r21.xyz, r18.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mul r22.xyz, r18.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r22.xyz, -r22.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r22.xyz, r18.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r23.xyz, r18.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r9.w, r20.xyzx, r20.xyzx
    sqrt r10.w, r9.w
    dp3 r11.w, r21.xyzx, r21.xyzx
    sqrt r12.w, r11.w
    lt r13.w, r12.w, r10.w
    dp3 r14.w, r22.xyzx, r22.xyzx
    sqrt r16.x, r14.w
    lt r17.w, r16.x, r10.w
    or r13.w, r13.w, r17.w
    if_nz r13.w
      rsq r9.w, r9.w
      mul r20.xyz, r9.wwww, r20.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r9.w, r10.w, r12.w
      lt r10.w, r16.x, r12.w
      or r9.w, r9.w, r10.w
      if_nz r9.w
        rsq r9.w, r11.w
        mul r20.xyz, r9.wwww, r21.xyzx  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r9.w, r14.w
        mul r20.xyz, r9.wwww, r22.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r21.xyz, r18.yzxy, r20.zxyz
    mul r22.xyz, r18.zxyz, r20.yzxy
    mov r22.xyz, -r22.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx
    dp3 r9.w, r21.xyzx, r21.xyzx
    rsq r9.w, r9.w
    mul r21.xyz, r9.wwww, r21.xyzx  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r22.xyz, r6.yzwy, r13.xyzx
    dp3 r9.w, r22.xyzx, r22.xyzx
    rsq r9.w, r9.w
    mul r23.xyz, r9.wwww, r22.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r20.x, r22.xyzx, r20.xyzx
    dp3 r20.y, r22.xyzx, r21.xyzx
    dp3 r20.z, r22.xyzx, r18.xyzx
    dp3 r9.w, r20.xyzx, r20.xyzx
    rsq r9.w, r9.w
    mul r20.xyz, r9.wwww, r20.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 187
    dp3 r9.w, r6.yzwy, r6.yzwy
    sqrt r9.w, r9.w  // f3Llength<0:NaN:Inf>
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // f3Vlength<0:NaN:Inf>
    dp3 r11.w, r18.xyzx, r6.yzwy  // fDotNL<0:NaN:Inf>
    dp3 r12.w, r18.xyzx, r13.xyzx  // fDotNV<0:NaN:Inf>
    div r11.w, r11.w, r9.w  // fDotNL<0:NaN:Inf>
    div r10.w, r12.w, r10.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r12.w, r18.xyzx, r23.xyzx  // fDotNH<0:NaN:Inf>
    div r21.xyz, r6.yzwy, r9.wwww
    dp3 r9.w, r21.xyzx, r23.xyzx  // fDotLH<0:NaN:Inf>
    nop 
    mov r19.xyz, r19.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>

#line 118
    mov r13.w, -r19.x
    max r13.w, r13.w, r19.x
    log r13.w, r13.w
    mul r13.w, r13.w, l(2.200000)
    exp r21.x, r13.w  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    mov r13.w, -r19.y
    max r13.w, r13.w, r19.y
    log r13.w, r13.w
    mul r13.w, r13.w, l(2.200000)
    exp r21.y, r13.w  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    mov r13.w, -r19.z
    max r13.w, r13.w, r19.z
    log r13.w, r13.w
    mul r13.w, r13.w, l(2.200000)
    exp r21.z, r13.w  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r21.xyz, r21.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r13.w, r21.x, l(0.300000)
    mul r14.w, r21.y, l(0.600000)
    add r13.w, r13.w, r14.w
    mul r14.w, r21.z, l(0.100000)
    add r13.w, r13.w, r14.w  // fCdLum<0:NaN:Inf>

#line 204
    lt r14.w, l(0.000000), r13.w
    div r19.xyz, r21.xyzx, r13.wwww
    movc r19.xyz, r14.wwww, r19.xyzx, l(1.000000,1.000000,1.000000,0)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.w, l(0.080000), cb5[10].z
    add r19.xyz, r19.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r19.xyz, r19.xyzx, cb5[12].zzzz
    add r19.xyz, r19.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r19.xyz, r13.wwww, r19.xyzx
    mov r22.xyz, -r19.xyzx
    add r22.xyz, r21.xyzx, r22.xyzx
    mul r22.xyz, r22.xyzx, cb5[10].wwww
    add r19.xyz, r19.xyzx, r22.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r11.w, r11.w  // fu<0:NaN:Inf>

#line 41
    mov r13.w, -r11.w
    add r13.w, r13.w, l(1.000000)
    max r13.w, r13.w, l(0.000000)
    min r13.w, r13.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r14.w, r13.w, r13.w  // fm2<0:[0f,1f]>
    mul r14.w, r14.w, r14.w
    mul r13.w, r13.w, r14.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r13.w, r13.w  // fFL<0:[-0f,1f]>
    nop 
    mov r10.w, r10.w  // fu<0:NaN:Inf>

#line 41
    mov r14.w, -r10.w
    add r14.w, r14.w, l(1.000000)
    max r14.w, r14.w, l(0.000000)
    min r14.w, r14.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r16.x, r14.w, r14.w  // fm2<0:[0f,1f]>
    mul r16.x, r16.x, r16.x
    mul r14.w, r14.w, r16.x  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r14.w, r14.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r6.yzw, r6.yyzw  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r18.xyz, r18.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r5.w, r5.w  // fRoughness<0>

#line 48
    mov r16.x, r5.w  // fSigma<0>

#line 51
    dp3 r17.w, r13.xyzx, r18.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r18.w, r6.yzwy, r18.xyzx  // fLDotN<0:NaN:Inf>
    dp3 r19.w, r6.yzwy, r6.yzwy
    sqrt r19.w, r19.w  // f3Llength<0:NaN:Inf>
    dp3 r20.w, r13.xyzx, r13.xyzx
    sqrt r20.w, r20.w  // f3Vlength<0:NaN:Inf>
    div r17.w, r17.w, r20.w  // fVDotN<0:NaN:Inf>
    div r18.w, r18.w, r19.w  // fLDotN<0:NaN:Inf>
    mov r19.w, -r17.w
    max r20.w, r17.w, r19.w
    mov r21.w, -r20.w
    add r21.w, r21.w, l(1.000000)
    sqrt r21.w, r21.w
    mul r22.x, r20.w, l(-0.018729)
    add r22.x, r22.x, l(0.074261)
    mul r22.x, r20.w, r22.x
    add r22.x, r22.x, l(-0.212114)
    mul r20.w, r20.w, r22.x
    add r20.w, r20.w, l(1.570729)
    mul r20.w, r21.w, r20.w
    mul r21.w, r20.w, l(-2.000000)
    add r21.w, r21.w, l(3.141593)
    lt r19.w, r17.w, r19.w
    and r19.w, r19.w, r21.w
    add r19.w, r19.w, r20.w  // fThetaR<0:NaN:Inf>
    mul r16.x, r16.x, l(3.141593)
    div r16.x, r16.x, l(180.000000)
    mul r16.x, r16.x, r16.x
    mul r16.x, r16.x, l(1.000000)  // fSigma2<0:Inf:[0f,1.#INFf]>

#line 63
    mul r22.xyz, r17.wwww, r18.xyzx
    mov r22.xyz, -r22.xyzx
    add r22.xyz, r13.xyzx, r22.xyzx
    dp3 r17.w, r22.xyzx, r22.xyzx
    rsq r17.w, r17.w
    mul r22.xyz, r17.wwww, r22.xyzx
    mul r23.xyz, r18.wwww, r18.xyzx
    mov r23.xyz, -r23.xyzx
    add r23.xyz, r6.yzwy, r23.xyzx
    dp3 r17.w, r23.xyzx, r23.xyzx
    rsq r17.w, r17.w
    mul r23.xyz, r17.wwww, r23.xyzx
    dp3 r17.w, r22.xyzx, r23.xyzx  // fCosPhiDiff<0:NaN:Inf>
    mov r20.w, -r18.w
    max r21.w, r18.w, r20.w
    mov r22.x, -r21.w
    add r22.x, r22.x, l(1.000000)
    sqrt r22.x, r22.x
    mul r22.y, r21.w, l(-0.018729)
    add r22.y, r22.y, l(0.074261)
    mul r22.y, r21.w, r22.y
    add r22.y, r22.y, l(-0.212114)
    mul r21.w, r21.w, r22.y
    add r21.w, r21.w, l(1.570729)
    mul r21.w, r22.x, r21.w
    mul r22.x, r21.w, l(-2.000000)
    add r22.x, r22.x, l(3.141593)
    lt r18.w, r18.w, r20.w
    and r18.w, r18.w, r22.x
    add r18.w, r18.w, r21.w  // fThetaI<0:NaN:Inf>
    max r20.w, r19.w, r18.w  // fAlpha<0:NaN:Inf>
    min r18.w, r19.w, r18.w  // fBeta<0:NaN:Inf>
    lt r19.w, l(1.570796), r20.w
    if_nz r19.w
      mov r21.w, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r19.w
      mul r19.w, r16.x, l(0.500000)
      add r22.x, r16.x, l(0.330000)
      div r19.w, r19.w, r22.x
      mov r19.w, -r19.w
      add r19.w, r19.w, l(1.000000)  // fC1<0:NaN:Inf>
      mul r22.x, r16.x, l(0.450000)
      add r22.y, r16.x, l(0.090000)
      div r22.x, r22.x, r22.y  // fC2<0:NaN:Inf>
      ge r22.z, r17.w, l(0.000000)
      if_nz r22.z
        sincos r22.z, null, r20.w
        mul r22.z, r22.z, r22.x  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r22.w, null, r20.w
        mul r23.x, r18.w, l(2.000000)
        div r23.x, r23.x, l(3.141593)
        mul r23.y, r23.x, l(1.000000)
        mul r23.x, r23.x, r23.x
        mul r23.x, r23.x, r23.y
        mov r23.x, -r23.x
        add r22.w, r22.w, r23.x
        mul r22.z, r22.w, r22.x  // fC2<0:NaN:Inf>
      endif 
      mul r22.x, r16.x, l(0.125000)
      div r22.x, r22.x, r22.y
      mul r22.y, r20.w, l(4.000000)
      mul r22.y, r18.w, r22.y
      div r22.y, r22.y, l(9.869604)
      mul r22.y, r22.y, r22.y
      mul r22.y, r22.y, l(1.000000)
      mul r22.x, r22.y, r22.x  // fC3<0:NaN:Inf>
      mul r22.y, r17.w, r22.z
      sincos r22.z, null, r18.w
      sincos null, r22.w, r18.w
      div r22.z, r22.z, r22.w
      mul r22.y, r22.z, r22.y
      add r19.w, r19.w, r22.y
      mov r22.y, -r17.w
      max r22.y, r17.w, r22.y
      mov r22.y, -r22.y
      add r22.y, r22.y, l(1.000000)
      mul r22.x, r22.x, r22.y
      add r20.w, r18.w, r20.w
      div r20.w, r20.w, l(2.000000)
      sincos r22.y, null, r20.w
      sincos null, r20.w, r20.w
      div r20.w, r22.y, r20.w
      mul r20.w, r20.w, r22.x
      add r19.w, r19.w, r20.w
      mul r19.w, r19.w, l(0.795775)  // fL1<0:NaN:Inf>
      mul r20.w, r16.x, l(0.338204)
      add r16.x, r16.x, l(0.130000)
      div r16.x, r20.w, r16.x
      mul r20.w, r18.w, l(4.000000)
      mul r18.w, r18.w, r20.w
      mul r17.w, r17.w, r18.w
      div r17.w, r17.w, l(9.869604)
      mov r17.w, -r17.w
      add r17.w, r17.w, l(1.000000)
      mul r16.x, r16.x, r17.w  // fL2<0:NaN:Inf>
      add r21.w, r16.x, r19.w  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r21.w, r21.w  // fFd<0:NaN:Inf>

#line 219
    mul r16.x, r9.w, r9.w
    mul r16.x, r5.w, r16.x  // fFss90<0:NaN:Inf>
    add r16.x, r16.x, l(-1.000000)
    mul r13.w, r13.w, r16.x
    add r13.w, r13.w, l(1.000000)
    mul r14.w, r14.w, r16.x
    add r14.w, r14.w, l(1.000000)
    mul r13.w, r13.w, r14.w  // fFss<0:NaN:Inf>
    add r14.w, r10.w, r11.w
    div r14.w, l(1.000000), r14.w
    add r14.w, r14.w, l(-0.500000)
    mul r13.w, r13.w, r14.w
    add r13.w, r13.w, l(0.500000)
    mul r13.w, r13.w, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r15.xy, r15.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r16.yzw, r16.yyzw  // f3LeanM<0:Inf,1:Inf,2:Inf>
    mov r20.xyz, r20.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    mul r15.xy, r15.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000)  // f2B<0:Inf,1:Inf>
    mul r16.xyz, r16.yzwy, l(0.000100, 0.000100, 0.000100, 0.000000)
    mul r16.xyz, r16.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3M<0:Inf,1:Inf,2:Inf>
    nop 
    div r14.w, cb5[10].x, l(5.000000)  // fM<0:[-6.80565e+037f,6.80565e+037f]>

#line 123
    mul r14.w, r14.w, r14.w
    div r14.w, l(2.000000), r14.w
    add r14.w, r14.w, l(-2.000000)  // RoughnessToSpecPower<0:Inf:[-2f,1.#INFf]>

#line 143
    div r14.w, l(1.000000), r14.w  // fInvS<0:Inf>
    add r16.xy, r14.wwww, r16.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r22.xy, r15.xyxx, r15.xyxx
    mul r22.z, r15.y, r15.x
    mov r22.xyz, -r22.xyzx
    add r16.xyz, r16.xyzx, r22.xyzx  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.w, r16.y, r16.x
    mul r16.w, r16.z, r16.z
    mov r16.w, -r16.w
    add r14.w, r14.w, r16.w  // fDet<0:NaN:Inf>
    div r20.xy, r20.xyxx, r20.zzzz
    mov r15.xy, -r15.xyxx
    add r15.xy, r15.xyxx, r20.xyxx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r16.w, r15.x, r15.x
    mul r16.y, r16.y, r16.w
    mul r16.w, r15.y, r15.y
    mul r16.x, r16.x, r16.w
    add r16.x, r16.x, r16.y
    mul r15.x, r15.x, l(2.000000)
    mul r15.x, r15.y, r15.x
    mul r15.x, r16.z, r15.x
    mov r15.x, -r15.x
    add r15.x, r15.x, r16.x  // fE<0:NaN:Inf>

#line 152
    lt r15.y, l(0.000000), r20.z
    lt r16.x, l(0.000000), r14.w
    and r15.y, r15.y, r16.x
    if_nz r15.y
      mul r15.x, r15.x, l(-0.500000)
      div r15.x, r15.x, r14.w
      mul r15.x, r15.x, l(1.442695)
      exp r15.x, r15.x
      sqrt r14.w, r14.w
      mul r14.w, r14.w, l(3.141593)
      mul r14.w, r14.w, l(2.000000)
      div r14.w, r15.x, r14.w  // fD<0:NaN:Inf>
    else 
      mov r14.w, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r14.w, r14.w  // LeanMapping<0:NaN:Inf>

#line 229
    mov r14.w, r14.w  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r9.w, r9.w  // fu<0:NaN:Inf>

#line 41
    mov r9.w, -r9.w
    add r9.w, r9.w, l(1.000000)
    max r9.w, r9.w, l(0.000000)
    min r9.w, r9.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r15.x, r9.w, r9.w  // fm2<0:[0f,1f]>
    mul r15.x, r15.x, r15.x
    mul r9.w, r9.w, r15.x  // SchlickFresnel<0:[-0f,1f]>

#line 232
    mov r9.w, r9.w  // fFH<0:[-0f,1f]>
    mov r16.xyz, -r19.xyzx
    add r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r9.wwww, r16.xyzx
    add r16.xyz, r16.xyzx, r19.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    mul r5.w, r5.w, l(0.500000)
    add r5.w, r5.w, l(0.500000)  // fx<0:[-1.70141e+038f,1.70141e+038f]>

#line 86
    mul r5.w, r5.w, r5.w  // Sqr<0:Inf:[0f,1.#INFf]>

#line 234
    mov r5.w, r5.w  // fRoughG<0:Inf:[0f,1.#INFf]>
    nop 
    mov r5.w, r5.w  // fAlphaG<0:Inf:[0f,1.#INFf]>

#line 111
    mul r5.w, r5.w, r5.w  // fa<0:NaN:Inf>
    mul r15.x, r11.w, r11.w  // fb<0:NaN:Inf>
    nop 
    add r15.y, r5.w, r15.x
    mul r16.w, r5.w, r15.x
    mov r16.w, -r16.w
    add r15.y, r15.y, r16.w  // fx<0:NaN:Inf>

#line 86
    mul r15.y, r15.y, r15.y  // Sqr<0:NaN:Inf>

#line 113
    add r15.y, r11.w, r15.y
    div r15.y, l(1.000000), r15.y  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r16.w, r10.w, r10.w  // fb<0:NaN:Inf>
    nop 
    add r17.w, r5.w, r16.w
    mul r5.w, r5.w, r16.w
    mov r5.w, -r5.w
    add r5.w, r5.w, r17.w  // fx<0:NaN:Inf>

#line 86
    mul r5.w, r5.w, r5.w  // Sqr<0:NaN:Inf>

#line 113
    add r5.w, r5.w, r10.w
    div r5.w, l(1.000000), r5.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r5.w, r5.w, r15.y  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r12.w, r12.w  // fDotNH<0:NaN:Inf>
    mul r15.y, l(-0.099000), cb5[12].y
    add r15.y, r15.y, l(0.100000)  // fa<0:[-3.3688e+037f,3.3688e+037f]>

#line 91
    ge r17.w, r15.y, l(1.000000)
    if_nz r17.w
      mov r18.w, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r17.w
      mul r15.y, r15.y, r15.y  // fa2<0:Inf:[0f,1.#INFf]>
      add r17.w, r15.y, l(-1.000000)
      mul r19.x, r12.w, r17.w
      mul r12.w, r12.w, r19.x
      add r12.w, r12.w, l(1.000000)  // fT<0:NaN:Inf>
      log r15.y, r15.y
      mul r15.y, r15.y, l(0.693147)
      mul r15.y, r15.y, l(3.141593)
      mul r12.w, r12.w, r15.y
      div r18.w, r17.w, r12.w  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r18.w, r18.w  // fDr<0:NaN:Inf>
    mov r12.w, -r8.w
    add r12.w, r12.w, l(1.000000)
    mul r9.w, r9.w, r12.w
    add r8.w, r8.w, r9.w  // fFr<0:Inf>
    nop 

#line 113
    nop 
    add r9.w, r15.x, l(0.062500)
    mul r12.w, r15.x, l(0.062500)
    mov r12.w, -r12.w
    add r9.w, r9.w, r12.w  // fx<0:NaN:Inf>

#line 86
    mul r9.w, r9.w, r9.w  // Sqr<0:NaN:Inf>

#line 113
    add r9.w, r9.w, r11.w
    div r9.w, l(1.000000), r9.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r12.w, r16.w, l(0.062500)
    mul r15.x, r16.w, l(0.062500)
    mov r15.x, -r15.x
    add r12.w, r12.w, r15.x  // fx<0:NaN:Inf>

#line 86
    mul r12.w, r12.w, r12.w  // Sqr<0:NaN:Inf>

#line 113
    add r12.w, r10.w, r12.w
    div r12.w, l(1.000000), r12.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r9.w, r9.w, r12.w  // fGr<0:NaN:Inf>

#line 254
    lt r11.w, r11.w, l(0.000000)
    if_nz r11.w

#line 258
      mov r6.yzw, -r6.yyzw
      dp3 r6.y, r18.xyzx, r6.yzwy
      max r6.y, r6.y, l(0.000000)
      min r6.y, r6.y, l(1.000000)
      mul r6.y, r6.y, l(1.000000)
      add r6.y, r6.y, l(-1.000000)
      mul r6.y, r6.y, l(-1.000000)
      max r6.y, r6.y, l(0.000000)
      min r6.y, r6.y, l(1.000000)
      mul r6.z, r6.y, l(-2.000000)
      add r6.z, r6.z, l(3.000000)
      mul r6.y, r6.y, r6.y
      mul r6.y, r6.y, r6.z
      max r6.y, r6.y, l(0.000000)
      min r6.y, r6.y, l(1.000000)  // retMul<0:[0f,1f]>
      mul r6.z, r6.y, r6.y
      mul r6.y, r6.y, r6.z
      mov r6.z, -r21.w
      add r6.z, r6.z, r13.w
      mul r6.z, r6.z, cb5[11].x
      add r6.z, r6.z, r21.w
      mul r6.z, r6.z, l(0.318310)
      mul r19.xyz, r21.xyzx, r6.zzzz
      add r19.xyz, r19.xyzx, cb5[11].zzzz
      mov r6.z, -cb5[10].w
      add r6.z, r6.z, l(1.000000)
      mul r19.xyz, r6.zzzz, r19.xyzx
      add r19.xyz, r19.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r19.xyz, r19.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r6.yzw, r6.yyyy, r19.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r5.w, l(0)  // fGs<0: 0f>
      mov r8.w, l(0)  // fFr<0: 0f>
    endif 

#line 263
    if_z r11.w
      lt r10.w, r10.w, l(0.000000)
      if_nz r10.w

#line 267
        mov r13.xyz, -r13.xyzx
        dp3 r11.w, r18.xyzx, r13.xyzx
        add r11.w, r11.w, l(-1.000000)
        mul r11.w, r11.w, l(-1.000000)
        max r11.w, r11.w, l(0.000000)
        min r11.w, r11.w, l(1.000000)
        mul r12.w, r11.w, l(-2.000000)
        add r12.w, r12.w, l(3.000000)
        mul r11.w, r11.w, r11.w
        mul r11.w, r11.w, r12.w
        max r11.w, r11.w, l(0.000000)
        min r11.w, r11.w, l(1.000000)  // retMul<0:[0f,1f]>
        mul r12.w, r11.w, r11.w
        mul r11.w, r11.w, r12.w
        mov r12.w, -r21.w
        add r12.w, r12.w, r13.w
        mul r12.w, r12.w, cb5[11].x
        add r12.w, r12.w, r21.w
        mul r12.w, r12.w, l(0.318310)
        mul r13.xyz, r21.xyzx, r12.wwww
        add r13.xyz, r13.xyzx, cb5[11].zzzz
        mov r12.w, -cb5[10].w
        add r12.w, r12.w, l(1.000000)
        mul r13.xyz, r12.wwww, r13.xyzx
        add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r6.yzw, r11.wwww, r13.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r5.w, l(0)  // fGs<0: 0f>
        mov r8.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r10.w
        mov r10.w, -r21.w
        add r10.w, r10.w, r13.w
        mul r10.w, r10.w, cb5[11].x
        add r10.w, r10.w, r21.w
        mul r10.w, r10.w, l(0.318310)
        mul r13.xyz, r21.xyzx, r10.wwww
        add r13.xyz, r13.xyzx, cb5[11].zzzz
        mov r10.w, -cb5[10].w
        add r10.w, r10.w, l(1.000000)
        mul r13.xyz, r10.wwww, r13.xyzx
        mul r16.xyz, r16.xyzx, r5.wwww
        mul r16.xyz, r14.wwww, r16.xyzx
        add r13.xyz, r13.xyzx, r16.xyzx
        mul r5.w, l(0.250000), cb5[12].x
        mul r5.w, r9.w, r5.w
        mul r5.w, r8.w, r5.w
        mul r5.w, r18.w, r5.w
        add r6.yzw, r5.wwww, r13.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 289 "lightingconstants.h"
    mul r6.yzw, r6.yyzw, r17.xxyz
    ftod r13.xyzw, r6.yzyy
    ftod r6.zw, r6.w
    dmul r13.xyzw, r13.xyzw, r15.zwzw
    dmul r6.zw, r6.zwzw, r15.zwzw
    ftod r15.xyzw, r7.wwww
    ftod r16.xy, r7.w
    dmul r13.xyzw, r13.xyzw, r15.xyzw
    dmul r6.zw, r6.zwzw, r16.xyxy
    dtof r13.xy, r13.xyzw
    dtof r13.z, r6.zwzw
    max r6.yzw, r13.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r6.yzw, r6.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)  // f3LightColorDiffuseResult<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 299
    mul r6.yzw, r6.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000)  // f3LightColorDiffuseResult<0:[0f,2f],1:[0f,2f],2:[0f,2f]>

#line 279
  else 
    mov r6.yzw, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 436 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r6.yzw, r6.yyzw  // f3LightColorDiffuseResult<0:[-0f,2f],1:[-0f,2f],2:[-0f,2f]>

#line 441
  ine r5.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r5.w
    ld_indexable(buffer)(float,float,float,float) r13.xyz, r4.wwww, t5.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r15.xyz, r4.wwww, t6.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>

#line 448
    dp3 r4.w, r10.xyzx, r10.xyzx
    sqrt r4.w, r4.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r13.xyz, r13.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r15.xyz, r15.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r4.w, r4.w  // fThickValue<0:NaN:Inf>
    mov r5.w, cb5[3].x  // f4SSSBRDFParams<0>
    mov r16.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r17.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r18.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r6.yzw, r6.yyzw  // f3LightDiffuseResult<0:[-0f,2f],1:[-0f,2f],2:[-0f,2f]>

#line 158 "constant.h"
    mov r5.w, r5.w  // fMaterialThickness<0>
    mov r16.x, r16.x  // fExtinctionCoefficientRed<0>
    mov r16.y, r16.y  // fExtinctionCoefficientGreen<0>
    mov r16.z, r16.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r14.xyz, r14.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    mov r19.xyz, -r17.xyzx
    add r18.xyz, r18.xyzx, r19.xyzx
    dp3 r7.w, r18.xyzx, r18.xyzx
    rsq r7.w, r7.w
    mul r18.xyz, r7.wwww, r18.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r19.xyz, -r18.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r13.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r17.xyzw, -r17.xyzw
    add r13.xyzw, r13.xyzw, r17.xyzw
    dp4 r7.w, r13.xyzw, r13.xyzw
    sqrt r7.w, r7.w
    div r7.w, l(1.000000), r7.w
    mul r7.w, r7.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r19.xyz, r19.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r12.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r8.w, r19.xyzx, r13.xyzx  // fProduct<0:NaN:Inf>
    mul r8.w, r8.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r8.w, r8.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r8.w, r8.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r13.xyz, r7.wwww, r8.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r17.xyz, -r12.xyzx
    dp3 r8.w, r17.xyzx, r19.xyzx
    max r8.w, r8.w, l(0.000000)
    mul r17.xyz, r5.wwww, r8.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r8.w, r19.xyzx, r19.xyzx  // fProduct<0:NaN:Inf>
    mul r8.w, r8.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r8.w, r8.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r8.w, r8.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r8.w, r5.w, r8.w
    add r17.xyz, r8.wwww, r17.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r17.xyz, r7.wwww, r17.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r19.x, r16.x, r17.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r19.y, r16.y, r17.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r19.z, r16.z, r17.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r16.xyz, r4.wwww, r19.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r13.xyz, r14.xyzx, r13.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r13.xyz, r16.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.xyz, r15.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r4.w, r18.xyzx, r12.xyzx
    max r4.w, r4.w, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
    lt r4.w, r4.w, l(0.700000)
    lt r5.w, l(2.000000), r5.w
    and r4.w, r4.w, r5.w
    if_nz r4.w

#line 205
      mul r12.xyz, r16.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r12.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r6.yzw, r6.yyzw, r12.xxyz  // f3LightDiffuseResult<0:[0f,2f],1:[0f,2f],2:[0f,2f]>
    else 

#line 210
      mul r6.yzw, r6.yyzw, r13.xxyz  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 450 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r6.yzw, r6.yyzw  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 441
  endif 

#line 455
  add r2.xyz, r2.xyzx, r6.yzwy  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 425
  iadd r3.w, r3.w, l(1)  // i<0>
endloop 

#line 465
nop 
mov r0.w, cb2[25].y  // uMaxNumLightsPerTile<0>
mov r1.w, cb2[25].z  // uMaxNumElementsPerTile<0>

#line 122 "constant.h"
nop 
imul null, r3.w, r1.w, r2.w  // nStartIndex<0>

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r3.w, r3.wwww, t11.yzwx
mov r3.w, r3.w  // uHalfZBitsHigh<0>
imad r4.w, r1.w, r2.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r4.wwww, t11.yzwx
mov r4.w, r4.w  // uHalfZBitsLow<0>
ishl r3.w, r3.w, l(16)
or r3.w, r4.w, r3.w  // uHalfZBits<0>
mov r3.w, r3.w  // fHalfZ<0:NaN:Inf>
nop 
lt r3.w, r6.x, r3.w
imad r4.w, r1.w, r2.w, l(4)
iadd r0.w, r4.w, r0.w
movc r0.w, r3.w, r4.w, r0.w  // uFirstLightIndex<0>
imad r4.w, r1.w, r2.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r4.wwww, t11.yzwx
imad r1.w, r1.w, r2.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r1.w, r1.wwww, t11.yzwx
movc r1.w, r3.w, r4.w, r1.w  // uNumLights<0>

#line 465 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r0.w, r0.w  // uStartIndex<0>
mov r1.w, r1.w  // uLightCount<0>

#line 469
mov r0.w, r0.w  // i<0>
mov r6.xyz, r2.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r0.w  // i<0>
loop 
  iadd r3.w, r0.w, r1.w
  ult r3.w, r2.w, r3.w
  breakc_z r3.w
  ld_indexable(buffer)(uint,uint,uint,uint) r3.w, r2.wwww, t11.yzwx
  mov r3.w, r3.w  // uLightIndex<0>

#line 475
  nop 
  mov r3.w, r3.w  // uLightIndex<0>
  mov r7.xyz, r0.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r9.xyz, r3.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 308 "lightingconstants.h"
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.x, r3.w, l(0), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.y, r3.w, l(4), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.z, r3.w, l(8), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r4.w, r3.w, l(12), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  mov r11.x, r11.x  // f4CenterAndRadius<0>
  mov r11.y, r11.y  // f4CenterAndRadius<1>
  mov r11.z, r11.z  // f4CenterAndRadius<2>
  mov r4.w, r4.w  // f4CenterAndRadius<3>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.x, r3.w, l(0), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.y, r3.w, l(4), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.z, r3.w, l(8), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.x, r3.w, l(16), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.y, r3.w, l(20), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.z, r3.w, l(24), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.x, r3.w, l(32), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.y, r3.w, l(36), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.z, r3.w, l(40), t10.xxxx  // g_VPLDataBuffer<0>
  mov r12.x, r12.x  // data<0>
  mov r12.y, r12.y  // data<1>
  mov r12.z, r12.z  // data<2>
  mov r13.x, r13.x  // data<4>
  mov r13.y, r13.y  // data<5>
  mov r13.z, r13.z  // data<6>
  mov r14.x, r14.x  // data<8>
  mov r14.y, r14.y  // data<9>
  mov r14.z, r14.z  // data<10>
  mov r7.xyz, -r7.xyzx
  add r7.xyz, r7.xyzx, r11.xyzx  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r5.w, r7.xyzx, r7.xyzx
  rsq r6.w, r5.w
  mul r11.xyz, r6.wwww, r7.xyzx  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r5.w, r5.w  // fLightDistance<0:NaN:Inf>

#line 317
  mov r4.w, r4.w  // fRad<0>
  dp3 r6.w, r12.xyzx, r7.xyzx
  max r6.w, r6.w, l(0.000000)  // fVPLNormalDotDir<0:Inf:[-0f,1.#INFf]>

#line 321
  lt r7.x, r5.w, r4.w
  lt r7.y, l(0.000000), r6.w
  and r7.x, r7.y, r7.x
  if_nz r7.x
    mov r13.xyz, r13.xyzx  // f3LightColor<0,1,2>
    div r4.w, r5.w, r4.w  // fx<0:NaN:Inf>
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, l(1.000000)
    mov r4.w, -r4.w
    add r4.w, r4.w, l(1.000000)
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, l(1.000000)
    mul r5.w, r5.w, r5.w
    add r5.w, r5.w, l(1.000000)
    div r4.w, r4.w, r5.w
    max r4.w, r4.w, l(0.000000)
    min r4.w, r4.w, l(1.000000)  // fFallOff<0:[0f,1f]>
    dp3 r5.w, r14.xyzx, r9.xyzx  // fSourceLightDotL<0:NaN:Inf>

#line 332
    lt r7.x, r5.w, l(0.000000)
    if_nz r7.x
      div r5.w, r5.w, cb2[26].w
      add r5.w, r5.w, l(1.000000)  // fSourceLightDotL<0:NaN:Inf>
    else 

#line 338
      mov r5.w, l(1.000000)  // fSourceLightDotL<0: 1f>

#line 332
    endif 

#line 341
    dp3 r7.x, r11.xyzx, r9.xyzx
    max r7.x, r7.x, l(0.000000)
    min r7.x, r7.x, l(1.000000)
    mul r7.xyz, r7.xxxx, r13.xyzx
    mul r7.xyz, r4.wwww, r7.xyzx
    mul r7.xyz, r6.wwww, r7.xyzx
    mul r7.xyz, r5.wwww, r7.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 321
  else 
    mov r7.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 475 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r7.xyz, r7.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 480
  ine r4.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r4.w
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.x, r3.w, l(0), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.y, r3.w, l(4), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.z, r3.w, l(8), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    mov r11.x, r11.x  // f4CenterAndRadius<0>
    mov r11.y, r11.y  // f4CenterAndRadius<1>
    mov r11.z, r11.z  // f4CenterAndRadius<2>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.x, r3.w, l(16), t10.xxxx  // g_VPLDataBuffer<0>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.y, r3.w, l(20), t10.xxxx  // g_VPLDataBuffer<0>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.z, r3.w, l(24), t10.xxxx  // g_VPLDataBuffer<0>
    mov r12.x, r12.x  // f3LightCol<0>
    mov r12.y, r12.y  // f3LightCol<1>
    mov r12.z, r12.z  // f3LightCol<2>

#line 487
    dp3 r3.w, r10.xyzx, r10.xyzx
    sqrt r3.w, r3.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r11.xyz, r11.xyzx  // f4CenterAndRadius<0,1,2>
    mov r12.xyz, r12.xyzx  // f3LightColor<0,1,2>
    mov r13.xyz, r5.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r3.w, r3.w  // fThickValue<0:NaN:Inf>
    mov r4.w, cb5[3].x  // f4SSSBRDFParams<0>
    mov r14.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r15.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r16.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r7.xyz, r7.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 158 "constant.h"
    mov r4.w, r4.w  // fMaterialThickness<0>
    mov r14.x, r14.x  // fExtinctionCoefficientRed<0>
    mov r14.y, r14.y  // fExtinctionCoefficientGreen<0>
    mov r14.z, r14.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r13.xyz, r13.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    mov r17.xyz, -r15.xyzx
    add r16.xyz, r16.xyzx, r17.xyzx
    dp3 r5.w, r16.xyzx, r16.xyzx
    rsq r5.w, r5.w
    mul r16.xyz, r5.wwww, r16.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r17.xyz, -r16.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r11.xyz, r11.xyzx  // f4LightPos<0,1,2>
    mov r11.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r15.xyzw, -r15.xyzw
    add r11.xyzw, r11.xyzw, r15.xyzw
    dp4 r5.w, r11.xyzw, r11.xyzw
    sqrt r5.w, r5.w
    div r5.w, l(1.000000), r5.w
    mul r5.w, r5.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r17.xyz, r17.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r11.xyz, r9.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r6.w, r17.xyzx, r11.xyzx  // fProduct<0:NaN:Inf>
    mul r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r6.w, r6.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r11.xyz, r5.wwww, r6.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, -r9.xyzx
    dp3 r6.w, r15.xyzx, r17.xyzx
    max r6.w, r6.w, l(0.000000)
    mul r15.xyz, r4.wwww, r6.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r6.w, r17.xyzx, r17.xyzx  // fProduct<0:NaN:Inf>
    mul r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r6.w, r6.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r6.w, r4.w, r6.w
    add r15.xyz, r6.wwww, r15.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.xyz, r5.wwww, r15.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r17.x, r14.x, r15.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r17.y, r14.y, r15.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r17.z, r14.z, r15.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r14.xyz, r3.wwww, r17.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r11.xyz, r13.xyzx, r11.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r11.xyz, r14.xyzx, r11.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r11.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r11.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r11.xyz, r12.xyzx, r11.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r3.w, r16.xyzx, r9.xyzx
    max r3.w, r3.w, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
    lt r3.w, r3.w, l(0.700000)
    lt r4.w, l(2.000000), r4.w
    and r3.w, r3.w, r4.w
    if_nz r3.w

#line 205
      mul r9.xyz, r14.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r7.xyz, r7.xyzx, r9.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 210
      mul r7.xyz, r7.xyzx, r11.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 489 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r7.xyz, r7.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 480
  endif 

#line 495
  add r6.xyz, r6.xyzx, r7.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 469
  iadd r2.w, r2.w, l(1)  // i<0>
endloop 

#line 500
mul r0.xyz, r6.xyzx, l(180.000000, 180.000000, 180.000000, 0.000000)  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 507
ine r0.w, l(0, 0, 0, 0), cb5[4].y
if_nz r0.w

#line 511
  ine r0.w, l(0, 0, 0, 0), cb5[7].y
  if_nz r0.w
    mov r2.xyz, r4.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 515
    ine r0.w, l(0, 0, 0, 0), cb5[5].y
    if_nz r0.w
      mov r6.xyz, -r4.xyzx
      add r6.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r6.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r2.xyz, r5.xyzx, r6.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 518
      sample_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyxx, t16.xyzw, s0
      mov r7.xyz, -r4.xyzx
      add r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r2.xyz, r6.xyzx, r7.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 515
    endif 

#line 511
  endif 

#line 507
else 

#line 522
  mov r2.xyz, l(0,0,0,0)  // f4Glow<0: 0f,1: 0f,2: 0f>

#line 507
endif 

#line 526
mul r2.xyz, r2.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000)
add r0.xyz, r0.xyzx, r2.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 530
ine r0.w, l(0, 0, 0, 0), cb5[7].x
if_nz r0.w

#line 533
  mul r2.xyz, r5.xyzx, r4.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r0.xyz, r0.xyzx, r2.xyzx
  add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r0.w, l(1.000000)  // f4ColorOut<3: 1f>

#line 530
else 

#line 539
  mov r0.w, l(1.000000)  // f4ColorOut<3: 1f>
  mov r0.xyz, r5.xyzx  // f4ColorOut<0:Inf,1:Inf,2:Inf>

#line 530
endif 

#line 543
ine r1.w, l(0, 0, 0, 0), cb5[4].z
if_nz r1.w
  ine r1.w, l(0, 0, 0, 0), cb5[6].z
  if_nz r1.w
    mov r5.x, l(1.000000)  // f4ReflectionTexture<0: 1f>
    mov r5.y, l(1.000000)  // f4ReflectionTexture<1: 1f>
    mov r5.z, l(1.000000)  // f4ReflectionTexture<2: 1f>
  else 
    ine r1.w, l(0, 0, 0, 0), cb5[5].z
    if_nz r1.w
      mov r5.x, r5.x  // f4ReflectionTexture<0:Inf>
      mov r5.y, r5.y  // f4ReflectionTexture<1:Inf>
      mov r5.z, r5.z  // f4ReflectionTexture<2:Inf>
    else 

#line 550
      sample_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyxx, t17.xyzw, s0  // f4ReflectionTexture<0:Inf,1:Inf,2:Inf,3:Inf>

#line 547
    endif 
  endif 
else 

#line 554
  mov r5.x, l(0)  // f4ReflectionTexture<0: 0f>
  mov r5.y, l(0)  // f4ReflectionTexture<1: 0f>
  mov r5.z, l(0)  // f4ReflectionTexture<2: 0f>

#line 543
endif 

#line 560
ine r1.x, l(0, 0, 0, 0), cb5[7].w
if_nz r1.x
  mov r1.xyw, -r8.xyxz  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r2.x, r1.xywx, r3.xyzx
  add r2.y, r2.x, r2.x
  mov r2.y, -r2.y
  mul r2.yzw, r2.yyyy, r3.xxyz
  add r2.yzw, r1.xxyw, r2.yyzw  // f3Reflection<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r3.w, r2.x, r2.x
  mov r3.w, -r3.w
  add r3.w, r3.w, l(1.000000)
  mul r3.w, r3.w, l(0.902500)
  mov r3.w, -r3.w
  add r3.w, r3.w, l(1.000000)
  sqrt r4.x, r3.w
  mul r2.x, r2.x, l(0.950000)
  add r2.x, r4.x, r2.x
  ge r3.w, r3.w, l(0.000000)
  mul r1.xyw, r1.xyxw, l(0.950000, 0.950000, 0.000000, 0.950000)
  mul r4.xyz, r3.xyzx, r2.xxxx
  mov r4.xyz, -r4.xyzx
  add r1.xyw, r1.xyxw, r4.xyxz
  movc r1.xyw, r3.wwww, r1.xyxw, l(0,0,0,0)  // f3Refraction<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 
  mov r1.xyw, r1.xyxw  // f3<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 201
  ge r2.x, r1.w, l(0.000000)
  ge r3.w, r1.x, l(0.000000)
  and r4.x, r2.x, r3.w
  if_nz r4.x
    div r4.x, r1.x, r1.w
    mov r4.y, -r4.x
    max r4.y, r4.y, r4.x
    min r4.z, r4.y, l(1.000000)
    max r4.w, r4.y, l(1.000000)
    div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
    mul r4.z, r4.w, r4.z
    mul r4.w, r4.z, r4.z
    mul r5.w, r4.w, l(0.020835)
    add r5.w, r5.w, l(-0.085133)
    mul r5.w, r4.w, r5.w
    add r5.w, r5.w, l(0.180141)
    mul r5.w, r4.w, r5.w
    add r5.w, r5.w, l(-0.330299)
    mul r4.w, r4.w, r5.w
    add r4.w, r4.w, l(0.999866)
    mul r4.z, r4.w, r4.z
    lt r4.y, l(1.000000), r4.y
    mul r4.w, r4.z, l(-2.000000)
    add r4.w, r4.w, l(1.570796)
    and r4.y, r4.y, r4.w
    add r4.y, r4.z, r4.y
    add r4.y, r4.y, l(0.000000)
    min r4.x, r4.x, l(1.000000)
    mov r4.z, -r4.x
    lt r4.x, r4.x, r4.z
    and r4.x, r4.x, l(-1)
    mov r4.z, -r4.y
    movc r4.x, r4.x, r4.z, r4.y  // phi<0:[-2.57066f,2.57066f]>
  else 
    mov r4.x, l(0)  // phi<0: 0f>
  endif 

#line 205
  lt r4.y, r1.w, l(0.000000)
  and r3.w, r3.w, r4.y
  if_nz r3.w
    div r3.w, r1.x, r1.w
    mov r4.z, -r3.w
    max r4.z, r3.w, r4.z
    min r4.w, r4.z, l(1.000000)
    max r5.w, r4.z, l(1.000000)
    div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
    mul r4.w, r4.w, r5.w
    mul r5.w, r4.w, r4.w
    mul r6.x, r5.w, l(0.020835)
    add r6.x, r6.x, l(-0.085133)
    mul r6.x, r5.w, r6.x
    add r6.x, r6.x, l(0.180141)
    mul r6.x, r5.w, r6.x
    add r6.x, r6.x, l(-0.330299)
    mul r5.w, r5.w, r6.x
    add r5.w, r5.w, l(0.999866)
    mul r4.w, r4.w, r5.w
    lt r4.z, l(1.000000), r4.z
    mul r5.w, r4.w, l(-2.000000)
    add r5.w, r5.w, l(1.570796)
    and r4.z, r4.z, r5.w
    add r4.z, r4.w, r4.z
    add r4.z, r4.z, l(0.000000)
    min r3.w, r3.w, l(1.000000)
    mov r4.w, -r3.w
    lt r3.w, r3.w, r4.w
    and r3.w, r3.w, l(-1)
    mov r4.w, -r4.z
    movc r3.w, r3.w, r4.w, r4.z  // phi<0:[-2.57066f,2.57066f]>
    add r4.x, r3.w, l(3.141593)  // phi<0:[0.57093f,5.71226f]>

#line 205
  endif 

#line 210
  lt r3.w, r1.x, l(0.000000)
  and r4.y, r3.w, r4.y
  if_nz r4.y
    div r4.y, r1.x, r1.w
    mov r4.z, -r4.y
    max r4.z, r4.z, r4.y
    min r4.w, r4.z, l(1.000000)
    max r5.w, r4.z, l(1.000000)
    div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
    mul r4.w, r4.w, r5.w
    mul r5.w, r4.w, r4.w
    mul r6.x, r5.w, l(0.020835)
    add r6.x, r6.x, l(-0.085133)
    mul r6.x, r5.w, r6.x
    add r6.x, r6.x, l(0.180141)
    mul r6.x, r5.w, r6.x
    add r6.x, r6.x, l(-0.330299)
    mul r5.w, r5.w, r6.x
    add r5.w, r5.w, l(0.999866)
    mul r4.w, r4.w, r5.w
    lt r4.z, l(1.000000), r4.z
    mul r5.w, r4.w, l(-2.000000)
    add r5.w, r5.w, l(1.570796)
    and r4.z, r4.z, r5.w
    add r4.z, r4.w, r4.z
    add r4.z, r4.z, l(0.000000)
    min r4.y, r4.y, l(1.000000)
    mov r4.w, -r4.y
    lt r4.y, r4.y, r4.w
    and r4.y, r4.y, l(-1)
    mov r4.w, -r4.z
    movc r4.y, r4.y, r4.w, r4.z  // phi<0:[-2.57066f,2.57066f]>
    add r4.x, r4.y, l(3.141593)  // phi<0:[0.57093f,5.71226f]>

#line 210
  endif 

#line 215
  and r2.x, r2.x, r3.w
  if_nz r2.x
    div r1.x, r1.x, r1.w
    mov r1.w, -r1.x
    max r1.w, r1.w, r1.x
    min r2.x, r1.w, l(1.000000)
    max r3.w, r1.w, l(1.000000)
    div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
    mul r2.x, r2.x, r3.w
    mul r3.w, r2.x, r2.x
    mul r4.y, r3.w, l(0.020835)
    add r4.y, r4.y, l(-0.085133)
    mul r4.y, r3.w, r4.y
    add r4.y, r4.y, l(0.180141)
    mul r4.y, r3.w, r4.y
    add r4.y, r4.y, l(-0.330299)
    mul r3.w, r3.w, r4.y
    add r3.w, r3.w, l(0.999866)
    mul r2.x, r2.x, r3.w
    lt r1.w, l(1.000000), r1.w
    mul r3.w, r2.x, l(-2.000000)
    add r3.w, r3.w, l(1.570796)
    and r1.w, r1.w, r3.w
    add r1.w, r2.x, r1.w
    add r1.w, r1.w, l(0.000000)
    min r1.x, r1.x, l(1.000000)
    mov r2.x, -r1.x
    lt r1.x, r1.x, r2.x
    and r1.x, r1.x, l(-1)
    mov r2.x, -r1.w
    movc r1.x, r1.x, r2.x, r1.w  // phi<0:[-2.57066f,2.57066f]>
    add r4.x, r1.x, l(6.283185)  // phi<0:[3.71252f,8.85385f]>

#line 215
  endif 

#line 220
  div r4.x, r4.x, l(6.283185)  // phi<0:[-0.409134f,1.40913f]>
  mov r1.x, -r1.y
  max r1.w, r1.x, r1.y
  mov r2.x, -r1.w
  add r2.x, r2.x, l(1.000000)
  sqrt r2.x, r2.x
  mul r3.w, r1.w, l(-0.018729)
  add r3.w, r3.w, l(0.074261)
  mul r3.w, r1.w, r3.w
  add r3.w, r3.w, l(-0.212114)
  mul r1.w, r1.w, r3.w
  add r1.w, r1.w, l(1.570729)
  mul r1.w, r2.x, r1.w
  mul r2.x, r1.w, l(-2.000000)
  add r2.x, r2.x, l(3.141593)
  lt r1.x, r1.y, r1.x
  and r1.x, r1.x, r2.x
  add r1.x, r1.x, r1.w  // theta<0:NaN:Inf>
  div r4.y, r1.x, l(3.141593)  // theta<0:NaN:Inf>
  mov r4.x, r4.x  // SphericalMapping<0:[-0.409134f,1.40913f]>
  mov r4.y, r4.y  // SphericalMapping<1:NaN:Inf>

#line 566
  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.xyxx, t19.xyzw, s0  // f4RefrColor<0:Inf,1:Inf,2:Inf,3:Inf>
  nop 
  mov r2.yzw, r2.yyzw  // f3<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 201
  ge r1.x, r2.w, l(0.000000)
  ge r1.y, r2.y, l(0.000000)
  and r1.w, r1.y, r1.x
  if_nz r1.w
    div r1.w, r2.y, r2.w
    mov r2.x, -r1.w
    max r2.x, r1.w, r2.x
    min r3.w, r2.x, l(1.000000)
    max r5.w, r2.x, l(1.000000)
    div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
    mul r3.w, r3.w, r5.w
    mul r5.w, r3.w, r3.w
    mul r6.x, r5.w, l(0.020835)
    add r6.x, r6.x, l(-0.085133)
    mul r6.x, r5.w, r6.x
    add r6.x, r6.x, l(0.180141)
    mul r6.x, r5.w, r6.x
    add r6.x, r6.x, l(-0.330299)
    mul r5.w, r5.w, r6.x
    add r5.w, r5.w, l(0.999866)
    mul r3.w, r3.w, r5.w
    lt r2.x, l(1.000000), r2.x
    mul r5.w, r3.w, l(-2.000000)
    add r5.w, r5.w, l(1.570796)
    and r2.x, r2.x, r5.w
    add r2.x, r3.w, r2.x
    add r2.x, r2.x, l(0.000000)
    min r1.w, r1.w, l(1.000000)
    mov r3.w, -r1.w
    lt r1.w, r1.w, r3.w
    and r1.w, r1.w, l(-1)
    mov r3.w, -r2.x
    movc r1.w, r1.w, r3.w, r2.x  // phi<0:[-2.57066f,2.57066f]>
  else 
    mov r1.w, l(0)  // phi<0: 0f>
  endif 

#line 205
  lt r2.x, r2.w, l(0.000000)
  and r1.y, r1.y, r2.x
  if_nz r1.y
    div r1.y, r2.y, r2.w
    mov r3.w, -r1.y
    max r3.w, r1.y, r3.w
    min r5.w, r3.w, l(1.000000)
    max r6.x, r3.w, l(1.000000)
    div r6.x, l(1.000000, 1.000000, 1.000000, 1.000000), r6.x
    mul r5.w, r5.w, r6.x
    mul r6.x, r5.w, r5.w
    mul r6.y, r6.x, l(0.020835)
    add r6.y, r6.y, l(-0.085133)
    mul r6.y, r6.y, r6.x
    add r6.y, r6.y, l(0.180141)
    mul r6.y, r6.y, r6.x
    add r6.y, r6.y, l(-0.330299)
    mul r6.x, r6.y, r6.x
    add r6.x, r6.x, l(0.999866)
    mul r5.w, r5.w, r6.x
    lt r3.w, l(1.000000), r3.w
    mul r6.x, r5.w, l(-2.000000)
    add r6.x, r6.x, l(1.570796)
    and r3.w, r3.w, r6.x
    add r3.w, r5.w, r3.w
    add r3.w, r3.w, l(0.000000)
    min r1.y, r1.y, l(1.000000)
    mov r5.w, -r1.y
    lt r1.y, r1.y, r5.w
    and r1.y, r1.y, l(-1)
    mov r5.w, -r3.w
    movc r1.y, r1.y, r5.w, r3.w  // phi<0:[-2.57066f,2.57066f]>
    add r1.w, r1.y, l(3.141593)  // phi<0:[0.57093f,5.71226f]>

#line 205
  endif 

#line 210
  lt r1.y, r2.y, l(0.000000)
  and r2.x, r1.y, r2.x
  if_nz r2.x
    div r2.x, r2.y, r2.w
    mov r3.w, -r2.x
    max r3.w, r2.x, r3.w
    min r5.w, r3.w, l(1.000000)
    max r6.x, r3.w, l(1.000000)
    div r6.x, l(1.000000, 1.000000, 1.000000, 1.000000), r6.x
    mul r5.w, r5.w, r6.x
    mul r6.x, r5.w, r5.w
    mul r6.y, r6.x, l(0.020835)
    add r6.y, r6.y, l(-0.085133)
    mul r6.y, r6.y, r6.x
    add r6.y, r6.y, l(0.180141)
    mul r6.y, r6.y, r6.x
    add r6.y, r6.y, l(-0.330299)
    mul r6.x, r6.y, r6.x
    add r6.x, r6.x, l(0.999866)
    mul r5.w, r5.w, r6.x
    lt r3.w, l(1.000000), r3.w
    mul r6.x, r5.w, l(-2.000000)
    add r6.x, r6.x, l(1.570796)
    and r3.w, r3.w, r6.x
    add r3.w, r5.w, r3.w
    add r3.w, r3.w, l(0.000000)
    min r2.x, r2.x, l(1.000000)
    mov r5.w, -r2.x
    lt r2.x, r2.x, r5.w
    and r2.x, r2.x, l(-1)
    mov r5.w, -r3.w
    movc r2.x, r2.x, r5.w, r3.w  // phi<0:[-2.57066f,2.57066f]>
    add r1.w, r2.x, l(3.141593)  // phi<0:[0.57093f,5.71226f]>

#line 210
  endif 

#line 215
  and r1.x, r1.y, r1.x
  if_nz r1.x
    div r1.x, r2.y, r2.w
    mov r1.y, -r1.x
    max r1.y, r1.y, r1.x
    min r2.x, r1.y, l(1.000000)
    max r2.y, r1.y, l(1.000000)
    div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
    mul r2.x, r2.y, r2.x
    mul r2.y, r2.x, r2.x
    mul r2.w, r2.y, l(0.020835)
    add r2.w, r2.w, l(-0.085133)
    mul r2.w, r2.w, r2.y
    add r2.w, r2.w, l(0.180141)
    mul r2.w, r2.w, r2.y
    add r2.w, r2.w, l(-0.330299)
    mul r2.y, r2.w, r2.y
    add r2.y, r2.y, l(0.999866)
    mul r2.x, r2.y, r2.x
    lt r1.y, l(1.000000), r1.y
    mul r2.y, r2.x, l(-2.000000)
    add r2.y, r2.y, l(1.570796)
    and r1.y, r1.y, r2.y
    add r1.y, r2.x, r1.y
    add r1.y, r1.y, l(0.000000)
    min r1.x, r1.x, l(1.000000)
    mov r2.x, -r1.x
    lt r1.x, r1.x, r2.x
    and r1.x, r1.x, l(-1)
    mov r2.x, -r1.y
    movc r1.x, r1.x, r2.x, r1.y  // phi<0:[-2.57066f,2.57066f]>
    add r1.w, r1.x, l(6.283185)  // phi<0:[3.71252f,8.85385f]>

#line 215
  endif 

#line 220
  div r1.x, r1.w, l(6.283185)  // phi<0:[-0.409134f,1.40913f]>
  mov r1.w, -r2.z
  max r2.x, r1.w, r2.z
  mov r2.y, -r2.x
  add r2.y, r2.y, l(1.000000)
  sqrt r2.y, r2.y
  mul r2.w, r2.x, l(-0.018729)
  add r2.w, r2.w, l(0.074261)
  mul r2.w, r2.x, r2.w
  add r2.w, r2.w, l(-0.212114)
  mul r2.x, r2.x, r2.w
  add r2.x, r2.x, l(1.570729)
  mul r2.x, r2.y, r2.x
  mul r2.y, r2.x, l(-2.000000)
  add r2.y, r2.y, l(3.141593)
  lt r1.w, r2.z, r1.w
  and r1.w, r1.w, r2.y
  add r1.w, r1.w, r2.x  // theta<0:NaN:Inf>
  div r1.y, r1.w, l(3.141593)  // theta<0:NaN:Inf>
  mov r1.x, r1.x  // SphericalMapping<0:[-0.409134f,1.40913f]>
  mov r1.y, r1.y  // SphericalMapping<1:NaN:Inf>

#line 567
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyxx, t19.xyzw, s0  // f4ReflColor<0:Inf,1:Inf,2:Inf,3:Inf>

#line 570
  mul r4.xyzw, r5.xxxx, r4.xyzw
  mul r2.xyzw, r5.yyyy, r2.xyzw
  add r2.xyzw, r2.xyzw, r4.xyzw
  mul r4.xyzw, r0.xyzw, r5.zzzz
  add r2.xyzw, r2.xyzw, r4.xyzw
  div r2.xyzw, r2.xyzw, cb5[2].wwww
  dp3 r1.x, r0.xyzx, r0.xyzx
  sqrt r1.x, r1.x
  mul r1.x, r1.x, r1.x
  mul r2.xyzw, r1.xxxx, r2.xyzw
  add r0.xyzw, r0.xyzw, r2.xyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 560
else 
  mov r0.w, l(1.000000)  // f4ColorOut<3: 1f>
endif 

#line 576
ine r1.x, l(0, 0, 0, 0), cb6[6].y
if_nz r1.x
  mul r0.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
endif 

#line 581
ine r1.x, l(0, 0, 0, 0), cb6[6].w
if_nz r1.x
  dp3 r1.x, r8.xyzx, r3.xyzx
  max r1.x, r1.x, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
  lt r1.x, r1.x, cb6[0].w
  if_nz r1.x
    mov r0.xyz, cb6[0].xyzx  // f4ColorOut<0,1,2>
  endif 

#line 581
endif 

#line 593
ine r1.x, l(0, 0, 0, 0), cb6[7].z
if_nz r1.x
  sqrt r1.x, r1.z
  div r1.x, r1.x, cb6[1].w
  max r1.x, r1.x, l(0.000000)
  min r1.x, r1.x, l(1.000000)
  add r0.xyz, r0.xyzx, r1.xxxx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 601
ine r1.x, l(0, 0, 0, 0), cb6[6].x
if_nz r1.x
  dp4 r1.x, r0.xyzw, cb6[2].xyzw  // f4ColorOut<0:NaN:Inf>
  dp4 r1.y, r0.xyzw, cb6[3].xyzw  // f4ColorOut<1:NaN:Inf>
  dp4 r1.z, r0.xyzw, cb6[4].xyzw  // f4ColorOut<2:NaN:Inf>
  dp4 r1.w, r0.xyzw, cb6[5].xyzw  // f4ColorOut<3:NaN:Inf>
  mov r0.xyzw, r1.xyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
endif 

#line 614
mov o0.xyzw, r0.xyzw  // RenderScenePS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
ret 
// Approximately 2210 instruction slots used
