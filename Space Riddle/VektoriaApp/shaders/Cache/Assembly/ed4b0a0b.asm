//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewInv;               // Offset:   64 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:  128 Size:    64 [unused]
//   float4x4 g_mProjectionInv;         // Offset:  192 Size:    64
//   float4x4 g_mProjectionInvViewport; // Offset:  256 Size:    64 [unused]
//   float4 g_f4AmbientColorUp;         // Offset:  320 Size:    16
//   float4 g_f4AmbientColorDown;       // Offset:  336 Size:    16
//   float3 g_f3CameraPos;              // Offset:  352 Size:    12
//   float g_fAlphaTest;                // Offset:  364 Size:     4 [unused]
//   uint g_uNumLights;                 // Offset:  368 Size:     4 [unused]
//   uint g_uNumSpotLights;             // Offset:  372 Size:     4 [unused]
//   uint g_uWindowWidth;               // Offset:  376 Size:     4 [unused]
//   uint g_uWindowHeight;              // Offset:  380 Size:     4 [unused]
//   uint g_uMaxNumLightsPerTile;       // Offset:  384 Size:     4
//   uint g_uMaxNumElementsPerTile;     // Offset:  388 Size:     4
//   uint g_uNumTilesX;                 // Offset:  392 Size:     4
//   uint g_uNumTilesY;                 // Offset:  396 Size:     4 [unused]
//   uint g_uMaxVPLs;                   // Offset:  400 Size:     4 [unused]
//   uint g_uMaxNumVPLsPerTile;         // Offset:  404 Size:     4
//   uint g_uMaxNumVPLElementsPerTile;  // Offset:  408 Size:     4
//   float g_fVPLSpotStrength;          // Offset:  412 Size:     4 [unused]
//   float g_fVPLSpotRadius;            // Offset:  416 Size:     4 [unused]
//   float g_fVPLPointStrength;         // Offset:  420 Size:     4 [unused]
//   float g_fVPLPointRadius;           // Offset:  424 Size:     4 [unused]
//   float g_fVPLRemoveBackFaceContrib; // Offset:  428 Size:     4
//   float g_fVPLColorThreshold;        // Offset:  432 Size:     4 [unused]
//   float g_fVPLBrightnessThreshold;   // Offset:  436 Size:     4 [unused]
//   float g_fPerFramePad1;             // Offset:  440 Size:     4 [unused]
//   float g_fPerFramePad2;             // Offset:  444 Size:     4 [unused]
//
// }
//
// cbuffer cbShadowConstants
// {
//
//   float4x4 g_mPointShadowViewProj[144];// Offset:    0 Size:  9216
//   float4x4 g_mSpotShadowViewProj[24];// Offset: 9216 Size:  1536
//   float4 g_f4ShadowBias;             // Offset: 10752 Size:    16
//
// }
//
// cbuffer TexInfo
// {
//
//   float4 f4ColorAmbient;             // Offset:    0 Size:    16 [unused]
//   float fA;                          // Offset:   16 Size:     4 [unused]
//   float fH;                          // Offset:   20 Size:     4 [unused]
//   float fBumpStrength;               // Offset:   24 Size:     4
//   float frTransparency;              // Offset:   28 Size:     4 [unused]
//   float4 f4ColorSSS;                 // Offset:   32 Size:    16
//   float4 f4SSSBRDFParams;            // Offset:   48 Size:    16
//   uint uImage;                       // Offset:   64 Size:     4 [unused]
//   uint uGlow;                        // Offset:   68 Size:     4
//   uint uSpecular;                    // Offset:   72 Size:     4
//   uint uBump;                        // Offset:   76 Size:     4
//   uint uImageBlack;                  // Offset:   80 Size:     4 [unused]
//   uint uGlowAsImage;                 // Offset:   84 Size:     4
//   uint uSpecularAsImage;             // Offset:   88 Size:     4
//   uint uHeightAsImage;               // Offset:   92 Size:     4 [unused]
//   uint uImageWhite;                  // Offset:   96 Size:     4 [unused]
//   uint uGlowWhite;                   // Offset:  100 Size:     4 [unused]
//   uint uSpecularWhite;               // Offset:  104 Size:     4
//   uint uHeight;                      // Offset:  108 Size:     4 [unused]
//   uint uShadingOn;                   // Offset:  112 Size:     4
//   uint uGlowAsAmbient;               // Offset:  116 Size:     4
//   uint uChromaKeying;                // Offset:  120 Size:     4 [unused]
//   uint uEnvironment;                 // Offset:  124 Size:     4
//   uint uPOM;                         // Offset:  128 Size:     4
//   uint uTexBRDF;                     // Offset:  132 Size:     4 [unused]
//   uint uTexSSS;                      // Offset:  136 Size:     4
//   uint uReflectionMap;               // Offset:  140 Size:     4 [unused]
//   uint uixPos;                       // Offset:  144 Size:     4
//   uint uiyPos;                       // Offset:  148 Size:     4
//   uint uixPics;                      // Offset:  152 Size:     4
//   uint uiyPics;                      // Offset:  156 Size:     4
//   float fRoughness;                  // Offset:  160 Size:     4
//   float fIOR;                        // Offset:  164 Size:     4
//   float fSpecular;                   // Offset:  168 Size:     4
//   float fMetallic;                   // Offset:  172 Size:     4
//   float fSubSurface;                 // Offset:  176 Size:     4
//   float fAnistropic;                 // Offset:  180 Size:     4 [unused]
//   float fSheen;                      // Offset:  184 Size:     4
//   float fSheenTint;                  // Offset:  188 Size:     4 [unused]
//   float fClearCoat;                  // Offset:  192 Size:     4
//   float fClearCoatGloss;             // Offset:  196 Size:     4
//   float fSpecularTint;               // Offset:  200 Size:     4
//   uint uTextureAddressMode;          // Offset:  204 Size:     4 [unused]
//
// }
//
// cbuffer ViewportArt
// {
//
//   float4 f4ColorViewportOutline;     // Offset:    0 Size:    16
//   float4 f4FogParams;                // Offset:   16 Size:    16
//   float4x4 mColorModification;       // Offset:   32 Size:    64
//   uint uStyleColor;                  // Offset:   96 Size:     4
//   uint uStyleHalfTransparent;        // Offset:  100 Size:     4
//   uint uStylePopart;                 // Offset:  104 Size:     4 [unused]
//   uint uStyleOutlining;              // Offset:  108 Size:     4
//   uint uStyleMonochrome;             // Offset:  112 Size:     4 [unused]
//   uint uStyleOwn;                    // Offset:  116 Size:     4 [unused]
//   uint uStyleFog;                    // Offset:  120 Size:     4
//   uint uPad0;                        // Offset:  124 Size:     4 [unused]
//
// }
//
// Resource bind info for g_VPLCenterAndRadiusBuffer
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
// Resource bind info for g_VPLDataBuffer
// {
//
//   struct SVPLData
//   {
//       
//       float4 f4Direction;            // Offset:    0
//       float4 f4Color;                // Offset:   16
//       float4 f4SourceLightDirection; // Offset:   32
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_Sampler                         sampler      NA          NA    0        1
// g_ShadowSampler                 sampler_c      NA          NA    1        1
// g_pointLightCenterAndRadiusBuffer    texture  float4         buf    2        1
// g_pointLightColorBuffer           texture  float4         buf    3        1
// g_perTilePointLightIndexBuffer    texture    uint         buf    4        1
// g_spotLightCenterAndRadiusBuffer    texture  float4         buf    5        1
// g_spotLightColorBuffer            texture  float4         buf    6        1
// g_spotLightSpotParamsBuffer       texture  float4         buf    7        1
// g_perTileSpotLightIndexBuffer     texture    uint         buf    8        1
// g_VPLCenterAndRadiusBuffer        texture  struct         r/o    9        1
// g_VPLDataBuffer                   texture  struct         r/o   10        1
// g_perTileVPLIndexBuffer           texture    uint         buf   11        1
// g_PointShadowAtlas                texture  float4          2d   13        1
// g_SpotShadowAtlas                 texture  float4          2d   14        1
// tex2D[0]                          texture  float4          2d   15        1
// tex2D[1]                          texture  float4          2d   16        1
// tex2D[2]                          texture  float4          2d   17        1
// tex2D[3]                          texture  float4          2d   18        1
// tex2D[4]                          texture  float4          2d   19        1
// tex2D[5]                          texture  float4          2d   20        1
// tex2D[6]                          texture  float4          2d   21        1
// leantex                           texture  float4          2d   27        1
// cbPerFrame                        cbuffer      NA          NA    2        1
// cbShadowConstants                 cbuffer      NA          NA    3        1
// TexInfo                           cbuffer      NA          NA    5        1
// ViewportArt                       cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyz 
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TANGENT                  0   xyz         2     NONE  float       
// BITANGENT                0   xyz         3     NONE  float       
// TEXCOORD                 0   xy          4     NONE  float   xy  
// TEXCOORD                 1   xyz         5     NONE  float   xyz 
// TEXCOORD                 2   xyzw        6     NONE  float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | enableDoublePrecisionFloatOps
dcl_constantbuffer cb2[27], immediateIndexed
dcl_constantbuffer cb3[673], dynamicIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_buffer (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (float,float,float,float) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_structured t9, 16 
dcl_resource_structured t10, 48 
dcl_resource_buffer (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t27
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 27

#line 233 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
ult r0.x, l(1), cb5[9].y
ult r0.y, l(1), cb5[9].w
or r0.x, r0.y, r0.x
if_nz r0.x
  utof r0.x, cb5[9].x  // fxPic<0:[0f,4.29497e+009f]>
  utof r0.y, cb5[9].y  // fyPic<0:[0f,4.29497e+009f]>
  utof r0.z, cb5[9].z  // fxPics<0:[0f,4.29497e+009f]>
  utof r0.w, cb5[9].w  // fyPics<0:[0f,4.29497e+009f]>
  div r0.x, r0.x, r0.z
  div r0.z, l(1.000000), r0.z
  mul r0.z, r0.z, v4.x
  add r1.x, r0.z, r0.x  // input<13:NaN:Inf>
  div r0.x, r0.y, r0.w
  div r0.y, l(1.000000), r0.w
  mul r0.y, r0.y, v4.y
  add r1.y, r0.y, r0.x  // input<14:NaN:Inf>

#line 233
else 
  mov r1.xy, v4.xyxx  // input<13,14>
endif 

#line 243
div r0.xyz, v6.xyzx, v6.wwww  // f3VertexPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r0.xyzx  // f3VertexPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, l(0,0,0,0)  // f3AccumDiffuse<0: 0f,1: 0f,2: 0f>

#line 248
mov r1.xy, r1.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
deriv_rtx_coarse r4.xyz, v6.yzxy  // f3PosDDx<1:Inf,2:Inf,0:Inf>
deriv_rty_coarse r5.xyz, v6.yzxy  // f3PosDDy<1:Inf,2:Inf,0:Inf>
deriv_rtx_coarse r1.zw, r1.xxxy  // f2TexPosDDx<0:NaN:Inf,1:NaN:Inf>
deriv_rty_coarse r6.xy, r1.xyxx  // f2TexPosDDy<0:NaN:Inf,1:NaN:Inf>
mul r6.yzw, r4.zzxy, r6.yyyy
mul r7.xyz, r5.zxyz, r1.wwww
mov r7.xyz, -r7.xyzx
add r6.yzw, r6.yyzw, r7.xxyz
dp3 r1.w, r6.yzwy, r6.yzwy
rsq r1.w, r1.w
mul r6.yzw, r1.wwww, r6.yyzw  // f3T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r4.xyz, r4.xyzx, r6.xxxx
mul r5.xyz, r5.xyzx, r1.zzzz
mov r5.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r1.z, r4.xyzx, r4.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, r4.xyzx  // f3B<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
dp3 r1.z, v1.xyzx, v1.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, v1.yzxy  // f3N<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>

#line 259
mul r7.xyz, r6.zwyz, r5.zxyz
mul r6.xyz, r6.yzwy, r5.xyzx
mov r6.xyz, -r6.xyzx
add r6.xyz, r6.xyzx, r7.xyzx  // f3X<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r7.xyz, r5.yzxy, r6.zxyz
mul r6.xyz, r5.xyzx, r6.xyzx
mov r6.xyz, -r6.xyzx
add r6.xyz, r6.xyzx, r7.xyzx  // f3T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx  // f3T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r7.xyz, r4.zxyz, r5.xyzx
mul r4.xyz, r4.xyzx, r5.zxyz
mov r4.xyz, -r4.xyzx
add r4.xyz, r4.xyzx, r7.xyzx  // f3X<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r7.xyz, r5.yzxy, r4.zxyz
mul r4.xyz, r5.xyzx, r4.xyzx
mov r4.xyz, -r4.xyzx
add r4.xyz, r4.xyzx, r7.xyzx  // f3B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx  // f3B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyz, r6.xyzx  // input<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
mov r7.xyz, r4.xyzx  // input<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>

#line 271
mov r8.xyz, -v6.xyzx
add r9.xyz, r8.xyzx, v5.xyzx
dp3 r1.w, r9.xyzx, r9.xyzx
rsq r2.w, r1.w
mul r9.xyz, r2.wwww, r9.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r8.xyz, r8.xyzx, cb2[22].xyzx
dp3 r2.w, r8.xyzx, r8.xyzx
rsq r2.w, r2.w
mul r8.xyz, r2.wwww, r8.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
ieq r2.w, cb5[8].x, l(1)
if_nz r2.w

#line 281
  dp3 r6.x, r8.xyzx, r6.xyzx  // f3ViewDirTS<0:NaN:Inf>
  dp3 r6.y, r8.xyzx, r4.xyzx  // f3ViewDirTS<1:NaN:Inf>
  dp3 r2.w, r8.xyzx, v1.xyzx  // f3ViewDirTS<2:NaN:Inf>
  mov r4.xy, -r6.xyxx
  mul r4.xy, r4.xyxx, l(0.020000, 0.020000, 0.000000, 0.000000)
  div r4.xy, r4.xyxx, r2.wwww  // f2MaxParallaxOffset<0:NaN:Inf,1:NaN:Inf>
  mov r6.xyz, -r9.xyzx
  dp3 r2.w, r6.xyzx, v1.xyzx
  mul r2.w, r2.w, l(-20.000000)
  add r2.w, r2.w, l(25.000000)
  ftoi r2.w, r2.w  // iSampleCount<0>
  itof r3.w, r2.w
  div r3.w, l(1.000000), r3.w  // fZStep<0:Inf>
  mul r4.xy, r3.wwww, r4.xyxx  // f2TexStep<0:NaN:Inf,1:NaN:Inf>
  deriv_rtx_coarse r4.zw, r1.xxxy  // f2Dx<0:NaN:Inf,1:NaN:Inf>
  deriv_rty_coarse r6.xy, r1.xyxx  // f2Dy<0:NaN:Inf,1:NaN:Inf>

#line 293
  mov r5.w, l(0)  // iSampleIdx<0: 0>
  mov r6.zw, l(0,0,0,0)  // f2CurTexOffset<0: -0f,1: -0f>

#line 297
  mov r3.w, -r3.w
  add r7.w, r3.w, l(1.000000)  // fCurRayZ<0:Inf>
  mov r8.w, l(1.000000)  // fPrevRayZ<0: 1f>

#line 305
  mov r10.xy, r6.zwzz  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r10.zw, r6.zzzw  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r11.xy, r6.zwzz  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r9.w, r5.w  // iSampleIdx<0>
  mov r11.z, r7.w  // fCurRayZ<0:NaN:Inf>
  mov r11.w, r8.w  // fPrevRayZ<0:NaN:Inf>
  mov r12.x, r5.w  // fPrevHeight<0:NaN:Inf>
  loop 
    iadd r12.y, r2.w, l(1)
    ilt r12.z, r9.w, r12.y
    breakc_z r12.z
    add r12.zw, r1.xxxy, r10.xxxy
    sample_d_indexable(texture2d)(float,float,float,float) r12.z, r12.zwzz, t20.xzyw, s0, r4.zwzz, r6.xyxx
    mov r12.z, r12.z  // fCurHeight<0:Inf>
    add r12.z, r12.z, r12.x
    mul r12.z, r12.z, l(0.500000)  // fCurHeight<0:NaN:Inf>
    lt r12.w, r11.z, r12.z
    if_nz r12.w
      mov r12.w, -r11.w
      add r13.x, r12.w, r12.x
      mov r13.y, -r12.z
      add r13.y, r12.x, r13.y
      add r13.y, r11.z, r13.y
      add r12.w, r12.w, r13.y
      div r12.w, r13.x, r12.w  // fT<0:NaN:Inf>
      mul r13.xy, r4.xyxx, r12.wwww
      add r11.xy, r10.zwzz, r13.xyxx  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r9.w, r12.y  // iSampleIdx<0>
    else 

#line 319
      iadd r9.w, r9.w, l(1)  // iSampleIdx<0>
      mov r10.zw, r10.xxxy  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r11.w, r11.z  // fPrevRayZ<0:NaN:Inf>
      mov r12.x, r12.z  // fPrevHeight<0:NaN:Inf>
      add r10.xy, r4.xyxx, r10.xyxx  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
      add r11.z, r3.w, r11.z  // fCurRayZ<0:NaN:Inf>

#line 310
    endif 

#line 305
  endloop 

#line 328
  add r1.xy, r1.xyxx, r11.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>

#line 334
  mul r4.xyz, r1.zzzz, v1.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 275
else 
  mov r4.xyz, v1.xyzx  // input<4,5,6>
endif 

#line 337
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyxx, t15.xyzw, s0  // f4DiffTex<0:Inf,1:Inf,2:Inf>

#line 350
ine r1.z, l(0, 0, 0, 0), cb5[4].w
if_nz r1.z
  sample_indexable(texture2d)(float,float,float,float) r10.xy, r1.xyxx, t18.xyzw, s0
  mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
  add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // f3BumpNormal<0:Inf,1:Inf>
  mul r10.xy, r10.xyxx, cb5[1].zzzz  // f3BumpNormal<0:NaN:Inf,1:NaN:Inf>
  mul r5.xyz, r5.xyzx, r10.xxxx
  mul r7.xyz, r7.xyzx, r10.yyyy
  add r5.xyz, r5.xyzx, r7.xyzx
  add r5.xyz, r4.xyzx, r5.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r1.z, r5.xyzx, r5.xyzx
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r5.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 350
endif 

#line 357
mov r4.xyz, r4.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 369
mul r1.z, r4.y, l(0.500000)
add r1.z, r1.z, l(0.500000)  // fAmbientBlend<0:NaN:Inf>
mul r5.xyz, r1.zzzz, cb2[20].xyzx
mov r1.z, -r1.z
add r1.z, r1.z, l(1.000000)
mul r7.xyz, r1.zzzz, cb2[21].xyzx
add r5.xyz, r5.xyzx, r7.xyzx  // f3Ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 376
nop 
mov r1.z, cb2[24].x  // uMaxNumLightsPerTile<0>
mov r2.w, cb2[24].y  // uMaxNumElementsPerTile<0>
mov r7.xyz, v0.xyzx  // SVPosition<0,1,2>

#line 122 "constant.h"
nop 
mov r7.xy, r7.xyxx  // ScreenPos<0,1>

#line 112
div r3.w, r7.x, l(32.000000)
round_ni r3.w, r3.w
div r4.w, r7.y, l(32.000000)
round_ni r4.w, r4.w
utof r5.w, cb2[24].z
mul r4.w, r4.w, r5.w
add r3.w, r3.w, r4.w
ftou r3.w, r3.w  // nTileIdx<0>
mov r3.w, r3.w  // GetTileIndex<0>

#line 122
mov r3.w, r3.w  // nTileIndex<0>
imul null, r4.w, r2.w, r3.w  // nStartIndex<0>

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r5.w, r4.wwww, t4.yzwx
mov r5.w, r5.w  // uHalfZBitsHigh<0>
imad r6.w, r2.w, r3.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r7.x, r6.wwww, t4.xyzw
mov r7.x, r7.x  // uHalfZBitsLow<0>
ishl r5.w, r5.w, l(16)
or r5.w, r7.x, r5.w  // uHalfZBits<0>
mov r5.w, r5.w  // fHalfZ<0:NaN:Inf>
nop 
mov r7.z, r7.z  // z<0>

#line 105
mul r7.x, r7.z, cb2[15].z
add r7.x, r7.x, cb2[15].w
div r7.x, l(1.000000), r7.x  // z<0:Inf>
mov r7.x, r7.x  // ConvertProjDepthToView<0:Inf>

#line 131
mov r7.x, r7.x  // fViewPosZ<0:Inf>
lt r5.w, r7.x, r5.w
imad r7.y, r2.w, r3.w, l(4)
iadd r1.z, r7.y, r1.z
movc r7.z, r5.w, r7.y, r1.z  // uFirstLightIndex<0>
imad r7.w, r2.w, r3.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r7.wwww, t4.yzwx
imad r2.w, r2.w, r3.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r9.w, r2.wwww, t4.yzwx
movc r5.w, r5.w, r8.w, r9.w  // uNumLights<0>

#line 376 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r7.z, r7.z  // uStartIndex<0>
mov r5.w, r5.w  // uLightCount<0>

#line 380
mov r7.z, r7.z  // i<0>

#line 387
mov r1.xy, r1.xyxx  // f2TexCoord<0:NaN:Inf,1:NaN:Inf>

#line 196 "lightingconstants.h"
sample_indexable(texture2d)(float,float,float,float) r10.xyz, r1.xyxx, t27.xyzw, s0  // f2LeanB<0:Inf,1:Inf>

#line 405 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
sample_indexable(texture2d)(float,float,float,float) r11.xyz, r1.xyxx, t21.xyzw, s0

#line 380
mov r12.xyz, r3.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.w, r7.z  // i<0>
loop 
  iadd r9.w, r7.z, r5.w
  ult r9.w, r8.w, r9.w
  breakc_z r9.w
  ld_indexable(buffer)(uint,uint,uint,uint) r9.w, r8.wwww, t4.yzwx  // uLightIndex<0>

#line 387
  nop 
  mov r10.w, r9.w  // uLightIndex<0>
  mov r13.xyz, r2.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r4.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r9.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r16.xyz, r6.xyzx  // f4DiffMapColor<0:Inf,1:Inf,2:Inf>

#line 185 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r17.xyzw, r10.wwww, t2.wxyz  // f4CenterAndRadius<3:Inf,0:Inf,1:Inf,2:Inf>
  mov r13.xyz, -r13.xyzx
  add r13.xyz, r13.xyzx, r17.yzwy  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r11.w, r13.xyzx, r13.xyzx
  rsq r12.w, r11.w
  mul r17.yzw, r12.wwww, r13.xxyz  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r11.w, r11.w  // fLightDistance<0:NaN:Inf>

#line 194
  mov r17.x, r17.x  // fRad<0:Inf>
  mov r18.xy, r10.xyxx  // f2LeanB<0:Inf,1:Inf>
  mov r19.xyz, r10.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 200
  lt r12.w, r11.w, r17.x
  if_nz r12.w
    div r12.w, r11.w, r17.x  // fx<0:NaN:Inf>
    mul r13.w, r12.w, r12.w
    mul r13.w, r13.w, r13.w
    mul r13.w, r13.w, l(1.000000)
    mov r13.w, -r13.w
    add r13.w, r13.w, l(1.000000)
    mul r13.w, r13.w, r13.w
    mul r13.w, r13.w, l(1.000000)
    mul r11.w, r11.w, r11.w
    add r11.w, r11.w, l(1.000000)
    div r11.w, r13.w, r11.w
    max r11.w, r11.w, l(0.000000)
    min r11.w, r11.w, l(1.000000)  // fFallOff<0:[0f,1f]>

#line 207
    ld_indexable(buffer)(float,float,float,float) r20.xyz, r10.wwww, t3.xyzw
    nop 
    mov r13.xyz, r13.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r15.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r21.xyz, r14.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.w, cb5[10].x  // fRoughness<0>
    mov r14.w, cb5[10].y  // fF0<0>
    mov r22.xyz, r16.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>
    mov r18.xy, r18.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r19.xyz, r19.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 161 "ggxlighting.h"
    dp3 r15.w, r21.xyzx, r21.xyzx
    rsq r15.w, r15.w
    mul r21.xyz, r15.wwww, r21.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r23.xyz, r21.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r24.xyz, r21.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
    mov r24.xyz, -r24.xyzx
    add r23.xyz, r23.xyzx, r24.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r24.xyz, r21.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mul r25.xyz, r21.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r25.xyz, -r25.xyzx
    add r24.xyz, r24.xyzx, r25.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r25.xyz, r21.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r26.xyz, r21.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r26.xyz, -r26.xyzx
    add r25.xyz, r25.xyzx, r26.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r15.w, r23.xyzx, r23.xyzx
    sqrt r16.w, r15.w
    dp3 r17.x, r24.xyzx, r24.xyzx
    sqrt r18.z, r17.x
    lt r18.w, r18.z, r16.w
    dp3 r19.w, r25.xyzx, r25.xyzx
    sqrt r20.w, r19.w
    lt r21.w, r20.w, r16.w
    or r18.w, r18.w, r21.w
    if_nz r18.w
      rsq r15.w, r15.w
      mul r23.xyz, r15.wwww, r23.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r15.w, r16.w, r18.z
      lt r16.w, r20.w, r18.z
      or r15.w, r15.w, r16.w
      if_nz r15.w
        rsq r15.w, r17.x
        mul r23.xyz, r15.wwww, r24.xyzx  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r15.w, r19.w
        mul r23.xyz, r15.wwww, r25.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r24.xyz, r21.yzxy, r23.zxyz
    mul r25.xyz, r21.zxyz, r23.yzxy
    mov r25.xyz, -r25.xyzx
    add r24.xyz, r24.xyzx, r25.xyzx
    dp3 r15.w, r24.xyzx, r24.xyzx
    rsq r15.w, r15.w
    mul r24.xyz, r15.wwww, r24.xyzx  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r25.xyz, r13.xyzx, r15.xyzx
    dp3 r15.w, r25.xyzx, r25.xyzx
    rsq r15.w, r15.w
    mul r26.xyz, r15.wwww, r25.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r23.x, r25.xyzx, r23.xyzx
    dp3 r23.y, r25.xyzx, r24.xyzx
    dp3 r23.z, r25.xyzx, r21.xyzx
    dp3 r15.w, r23.xyzx, r23.xyzx
    rsq r15.w, r15.w
    mul r23.xyz, r15.wwww, r23.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 187
    dp3 r15.w, r13.xyzx, r13.xyzx
    sqrt r15.w, r15.w  // f3Llength<0:NaN:Inf>
    dp3 r16.w, r15.xyzx, r15.xyzx
    sqrt r16.w, r16.w  // f3Vlength<0:NaN:Inf>
    dp3 r17.x, r21.xyzx, r13.xyzx  // fDotNL<0:NaN:Inf>
    dp3 r18.z, r21.xyzx, r15.xyzx  // fDotNV<0:NaN:Inf>
    div r17.x, r17.x, r15.w  // fDotNL<0:NaN:Inf>
    div r16.w, r18.z, r16.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r18.z, r21.xyzx, r26.xyzx  // fDotNH<0:NaN:Inf>
    div r24.xyz, r13.xyzx, r15.wwww
    dp3 r15.w, r24.xyzx, r26.xyzx  // fDotLH<0:NaN:Inf>
    nop 
    mov r22.xyz, r22.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>

#line 118
    mov r18.w, -r22.x
    max r18.w, r18.w, r22.x
    log r18.w, r18.w
    mul r18.w, r18.w, l(2.200000)
    exp r24.x, r18.w  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    mov r18.w, -r22.y
    max r18.w, r18.w, r22.y
    log r18.w, r18.w
    mul r18.w, r18.w, l(2.200000)
    exp r24.y, r18.w  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    mov r18.w, -r22.z
    max r18.w, r18.w, r22.z
    log r18.w, r18.w
    mul r18.w, r18.w, l(2.200000)
    exp r24.z, r18.w  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r24.xyz, r24.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r18.w, r24.x, l(0.300000)
    mul r19.w, r24.y, l(0.600000)
    add r18.w, r18.w, r19.w
    mul r19.w, r24.z, l(0.100000)
    add r18.w, r18.w, r19.w  // fCdLum<0:NaN:Inf>

#line 204
    lt r19.w, l(0.000000), r18.w
    div r22.xyz, r24.xyzx, r18.wwww
    movc r22.xyz, r19.wwww, r22.xyzx, l(1.000000,1.000000,1.000000,0)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r18.w, l(0.080000), cb5[10].z
    add r22.xyz, r22.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r22.xyz, r22.xyzx, cb5[12].zzzz
    add r22.xyz, r22.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r22.xyz, r18.wwww, r22.xyzx
    mov r25.xyz, -r22.xyzx
    add r25.xyz, r24.xyzx, r25.xyzx
    mul r25.xyz, r25.xyzx, cb5[10].wwww
    add r22.xyz, r22.xyzx, r25.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r17.x, r17.x  // fu<0:NaN:Inf>

#line 41
    mov r18.w, -r17.x
    add r18.w, r18.w, l(1.000000)
    max r18.w, r18.w, l(0.000000)
    min r18.w, r18.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r19.w, r18.w, r18.w  // fm2<0:[0f,1f]>
    mul r19.w, r19.w, r19.w
    mul r18.w, r18.w, r19.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r18.w, r18.w  // fFL<0:[-0f,1f]>
    nop 
    mov r16.w, r16.w  // fu<0:NaN:Inf>

#line 41
    mov r19.w, -r16.w
    add r19.w, r19.w, l(1.000000)
    max r19.w, r19.w, l(0.000000)
    min r19.w, r19.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r20.w, r19.w, r19.w  // fm2<0:[0f,1f]>
    mul r20.w, r20.w, r20.w
    mul r19.w, r19.w, r20.w  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r19.w, r19.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r13.xyz, r13.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r15.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r21.xyz, r21.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.w, r13.w  // fRoughness<0>

#line 48
    mov r20.w, r13.w  // fSigma<0>

#line 51
    dp3 r21.w, r15.xyzx, r21.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r22.w, r13.xyzx, r21.xyzx  // fLDotN<0:NaN:Inf>
    dp3 r23.w, r13.xyzx, r13.xyzx
    sqrt r23.w, r23.w  // f3Llength<0:NaN:Inf>
    dp3 r24.w, r15.xyzx, r15.xyzx
    sqrt r24.w, r24.w  // f3Vlength<0:NaN:Inf>
    div r21.w, r21.w, r24.w  // fVDotN<0:NaN:Inf>
    div r22.w, r22.w, r23.w  // fLDotN<0:NaN:Inf>
    mov r23.w, -r21.w
    max r24.w, r21.w, r23.w
    mov r25.x, -r24.w
    add r25.x, r25.x, l(1.000000)
    sqrt r25.x, r25.x
    mul r25.y, r24.w, l(-0.018729)
    add r25.y, r25.y, l(0.074261)
    mul r25.y, r24.w, r25.y
    add r25.y, r25.y, l(-0.212114)
    mul r24.w, r24.w, r25.y
    add r24.w, r24.w, l(1.570729)
    mul r24.w, r25.x, r24.w
    mul r25.x, r24.w, l(-2.000000)
    add r25.x, r25.x, l(3.141593)
    lt r23.w, r21.w, r23.w
    and r23.w, r23.w, r25.x
    add r23.w, r23.w, r24.w  // fThetaR<0:NaN:Inf>
    mul r20.w, r20.w, l(3.141593)
    div r20.w, r20.w, l(180.000000)
    mul r20.w, r20.w, r20.w
    mul r20.w, r20.w, l(1.000000)  // fSigma2<0:Inf:[0f,1.#INFf]>

#line 63
    mul r25.xyz, r21.wwww, r21.xyzx
    mov r25.xyz, -r25.xyzx
    add r25.xyz, r15.xyzx, r25.xyzx
    dp3 r21.w, r25.xyzx, r25.xyzx
    rsq r21.w, r21.w
    mul r25.xyz, r21.wwww, r25.xyzx
    mul r26.xyz, r21.xyzx, r22.wwww
    mov r26.xyz, -r26.xyzx
    add r26.xyz, r13.xyzx, r26.xyzx
    dp3 r21.w, r26.xyzx, r26.xyzx
    rsq r21.w, r21.w
    mul r26.xyz, r21.wwww, r26.xyzx
    dp3 r21.w, r25.xyzx, r26.xyzx  // fCosPhiDiff<0:NaN:Inf>
    mov r24.w, -r22.w
    max r25.x, r22.w, r24.w
    mov r25.y, -r25.x
    add r25.y, r25.y, l(1.000000)
    sqrt r25.y, r25.y
    mul r25.z, r25.x, l(-0.018729)
    add r25.z, r25.z, l(0.074261)
    mul r25.z, r25.x, r25.z
    add r25.z, r25.z, l(-0.212114)
    mul r25.x, r25.x, r25.z
    add r25.x, r25.x, l(1.570729)
    mul r25.x, r25.y, r25.x
    mul r25.y, r25.x, l(-2.000000)
    add r25.y, r25.y, l(3.141593)
    lt r22.w, r22.w, r24.w
    and r22.w, r22.w, r25.y
    add r22.w, r22.w, r25.x  // fThetaI<0:NaN:Inf>
    max r24.w, r23.w, r22.w  // fAlpha<0:NaN:Inf>
    min r22.w, r23.w, r22.w  // fBeta<0:NaN:Inf>
    lt r23.w, l(1.570796), r24.w
    if_nz r23.w
      mov r25.x, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r23.w
      mul r23.w, r20.w, l(0.500000)
      add r25.y, r20.w, l(0.330000)
      div r23.w, r23.w, r25.y
      mov r23.w, -r23.w
      add r23.w, r23.w, l(1.000000)  // fC1<0:NaN:Inf>
      mul r25.y, r20.w, l(0.450000)
      add r25.z, r20.w, l(0.090000)
      div r25.y, r25.y, r25.z  // fC2<0:NaN:Inf>
      ge r25.w, r21.w, l(0.000000)
      if_nz r25.w
        sincos r25.w, null, r24.w
        mul r25.w, r25.w, r25.y  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r26.x, null, r24.w
        mul r26.y, r22.w, l(2.000000)
        div r26.y, r26.y, l(3.141593)
        mul r26.z, r26.y, l(1.000000)
        mul r26.y, r26.y, r26.y
        mul r26.y, r26.y, r26.z
        mov r26.y, -r26.y
        add r26.x, r26.y, r26.x
        mul r25.w, r25.y, r26.x  // fC2<0:NaN:Inf>
      endif 
      mul r25.y, r20.w, l(0.125000)
      div r25.y, r25.y, r25.z
      mul r25.z, r24.w, l(4.000000)
      mul r25.z, r22.w, r25.z
      div r25.z, r25.z, l(9.869604)
      mul r25.z, r25.z, r25.z
      mul r25.z, r25.z, l(1.000000)
      mul r25.y, r25.z, r25.y  // fC3<0:NaN:Inf>
      mul r25.z, r21.w, r25.w
      sincos r25.w, null, r22.w
      sincos null, r26.x, r22.w
      div r25.w, r25.w, r26.x
      mul r25.z, r25.w, r25.z
      add r23.w, r23.w, r25.z
      mov r25.z, -r21.w
      max r25.z, r21.w, r25.z
      mov r25.z, -r25.z
      add r25.z, r25.z, l(1.000000)
      mul r25.y, r25.y, r25.z
      add r24.w, r22.w, r24.w
      div r24.w, r24.w, l(2.000000)
      sincos r25.z, null, r24.w
      sincos null, r24.w, r24.w
      div r24.w, r25.z, r24.w
      mul r24.w, r24.w, r25.y
      add r23.w, r23.w, r24.w
      mul r23.w, r23.w, l(0.795775)  // fL1<0:NaN:Inf>
      mul r24.w, r20.w, l(0.338204)
      add r20.w, r20.w, l(0.130000)
      div r20.w, r24.w, r20.w
      mul r24.w, r22.w, l(4.000000)
      mul r22.w, r22.w, r24.w
      mul r21.w, r21.w, r22.w
      div r21.w, r21.w, l(9.869604)
      mov r21.w, -r21.w
      add r21.w, r21.w, l(1.000000)
      mul r20.w, r20.w, r21.w  // fL2<0:NaN:Inf>
      add r25.x, r20.w, r23.w  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r25.x, r25.x  // fFd<0:NaN:Inf>

#line 219
    mul r20.w, r15.w, r15.w
    mul r20.w, r13.w, r20.w  // fFss90<0:NaN:Inf>
    add r20.w, r20.w, l(-1.000000)
    mul r18.w, r18.w, r20.w
    add r18.w, r18.w, l(1.000000)
    mul r19.w, r19.w, r20.w
    add r19.w, r19.w, l(1.000000)
    mul r18.w, r18.w, r19.w  // fFss<0:NaN:Inf>
    add r19.w, r16.w, r17.x
    div r19.w, l(1.000000), r19.w
    add r19.w, r19.w, l(-0.500000)
    mul r18.w, r18.w, r19.w
    add r18.w, r18.w, l(0.500000)
    mul r18.w, r18.w, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r18.xy, r18.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r19.xyz, r19.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>
    mov r23.xyz, r23.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    mul r18.xy, r18.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000)  // f2B<0:Inf,1:Inf>
    mul r19.xyz, r19.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
    mul r19.xyz, r19.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3M<0:Inf,1:Inf,2:Inf>
    nop 
    div r19.w, cb5[10].x, l(5.000000)  // fM<0:[-6.80565e+037f,6.80565e+037f]>

#line 123
    mul r19.w, r19.w, r19.w
    div r19.w, l(2.000000), r19.w
    add r19.w, r19.w, l(-2.000000)  // RoughnessToSpecPower<0:Inf:[-2f,1.#INFf]>

#line 143
    div r19.w, l(1.000000), r19.w  // fInvS<0:Inf>
    add r19.xy, r19.wwww, r19.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r26.xy, r18.xyxx, r18.xyxx
    mul r26.z, r18.y, r18.x
    mov r25.yzw, -r26.xxyz
    add r19.xyz, r19.xyzx, r25.yzwy  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r19.w, r19.y, r19.x
    mul r20.w, r19.z, r19.z
    mov r20.w, -r20.w
    add r19.w, r19.w, r20.w  // fDet<0:NaN:Inf>
    div r23.xy, r23.xyxx, r23.zzzz
    mov r18.xy, -r18.xyxx
    add r18.xy, r18.xyxx, r23.xyxx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r20.w, r18.x, r18.x
    mul r19.y, r19.y, r20.w
    mul r20.w, r18.y, r18.y
    mul r19.x, r19.x, r20.w
    add r19.x, r19.x, r19.y
    mul r18.x, r18.x, l(2.000000)
    mul r18.x, r18.y, r18.x
    mul r18.x, r19.z, r18.x
    mov r18.x, -r18.x
    add r18.x, r18.x, r19.x  // fE<0:NaN:Inf>

#line 152
    lt r18.y, l(0.000000), r23.z
    lt r19.x, l(0.000000), r19.w
    and r18.y, r18.y, r19.x
    if_nz r18.y
      mul r18.x, r18.x, l(-0.500000)
      div r18.x, r18.x, r19.w
      mul r18.x, r18.x, l(1.442695)
      exp r18.x, r18.x
      sqrt r18.y, r19.w
      mul r18.y, r18.y, l(3.141593)
      mul r18.y, r18.y, l(2.000000)
      div r18.x, r18.x, r18.y  // fD<0:NaN:Inf>
    else 
      mov r18.x, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r18.x, r18.x  // LeanMapping<0:NaN:Inf>

#line 229
    mov r18.x, r18.x  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r15.w, r15.w  // fu<0:NaN:Inf>

#line 41
    mov r15.w, -r15.w
    add r15.w, r15.w, l(1.000000)
    max r15.w, r15.w, l(0.000000)
    min r15.w, r15.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r18.y, r15.w, r15.w  // fm2<0:[0f,1f]>
    mul r18.y, r18.y, r18.y
    mul r15.w, r15.w, r18.y  // SchlickFresnel<0:[-0f,1f]>

#line 232
    mov r15.w, r15.w  // fFH<0:[-0f,1f]>
    mov r19.xyz, -r22.xyzx
    add r19.xyz, r19.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r19.xyz, r15.wwww, r19.xyzx
    add r19.xyz, r19.xyzx, r22.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    mul r13.w, r13.w, l(0.500000)
    add r13.w, r13.w, l(0.500000)  // fx<0:[-1.70141e+038f,1.70141e+038f]>

#line 86
    mul r13.w, r13.w, r13.w  // Sqr<0:Inf:[0f,1.#INFf]>

#line 234
    mov r13.w, r13.w  // fRoughG<0:Inf:[0f,1.#INFf]>
    nop 
    mov r13.w, r13.w  // fAlphaG<0:Inf:[0f,1.#INFf]>

#line 111
    mul r13.w, r13.w, r13.w  // fa<0:NaN:Inf>
    mul r18.y, r17.x, r17.x  // fb<0:NaN:Inf>
    nop 
    add r19.w, r13.w, r18.y
    mul r20.w, r13.w, r18.y
    mov r20.w, -r20.w
    add r19.w, r19.w, r20.w  // fx<0:NaN:Inf>

#line 86
    mul r19.w, r19.w, r19.w  // Sqr<0:NaN:Inf>

#line 113
    add r19.w, r17.x, r19.w
    div r19.w, l(1.000000), r19.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r20.w, r16.w, r16.w  // fb<0:NaN:Inf>
    nop 
    add r21.w, r13.w, r20.w
    mul r13.w, r13.w, r20.w
    mov r13.w, -r13.w
    add r13.w, r13.w, r21.w  // fx<0:NaN:Inf>

#line 86
    mul r13.w, r13.w, r13.w  // Sqr<0:NaN:Inf>

#line 113
    add r13.w, r13.w, r16.w
    div r13.w, l(1.000000), r13.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r13.w, r13.w, r19.w  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r18.z, r18.z  // fDotNH<0:NaN:Inf>
    mul r19.w, l(-0.099000), cb5[12].y
    add r19.w, r19.w, l(0.100000)  // fa<0:[-3.3688e+037f,3.3688e+037f]>

#line 91
    ge r21.w, r19.w, l(1.000000)
    if_nz r21.w
      mov r22.x, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r21.w
      mul r19.w, r19.w, r19.w  // fa2<0:Inf:[0f,1.#INFf]>
      add r21.w, r19.w, l(-1.000000)
      mul r22.y, r18.z, r21.w
      mul r18.z, r18.z, r22.y
      add r18.z, r18.z, l(1.000000)  // fT<0:NaN:Inf>
      log r19.w, r19.w
      mul r19.w, r19.w, l(0.693147)
      mul r19.w, r19.w, l(3.141593)
      mul r18.z, r18.z, r19.w
      div r22.x, r21.w, r18.z  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r22.x, r22.x  // fDr<0:NaN:Inf>
    mov r18.z, -r14.w
    add r18.z, r18.z, l(1.000000)
    mul r15.w, r15.w, r18.z
    add r14.w, r14.w, r15.w  // fFr<0:Inf>
    nop 

#line 113
    nop 
    add r15.w, r18.y, l(0.062500)
    mul r18.y, r18.y, l(0.062500)
    mov r18.y, -r18.y
    add r15.w, r15.w, r18.y  // fx<0:NaN:Inf>

#line 86
    mul r15.w, r15.w, r15.w  // Sqr<0:NaN:Inf>

#line 113
    add r15.w, r15.w, r17.x
    div r15.w, l(1.000000), r15.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r18.y, r20.w, l(0.062500)
    mul r18.z, r20.w, l(0.062500)
    mov r18.z, -r18.z
    add r18.y, r18.z, r18.y  // fx<0:NaN:Inf>

#line 86
    mul r18.y, r18.y, r18.y  // Sqr<0:NaN:Inf>

#line 113
    add r18.y, r16.w, r18.y
    div r18.y, l(1.000000), r18.y  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r15.w, r15.w, r18.y  // fGr<0:NaN:Inf>

#line 254
    lt r17.x, r17.x, l(0.000000)
    if_nz r17.x

#line 258
      mov r13.xyz, -r13.xyzx
      dp3 r13.x, r21.xyzx, r13.xyzx
      max r13.x, r13.x, l(0.000000)
      min r13.x, r13.x, l(1.000000)
      mul r13.x, r13.x, l(1.000000)
      add r13.x, r13.x, l(-1.000000)
      mul r13.x, r13.x, l(-1.000000)
      max r13.x, r13.x, l(0.000000)
      min r13.x, r13.x, l(1.000000)
      mul r13.y, r13.x, l(-2.000000)
      add r13.y, r13.y, l(3.000000)
      mul r13.x, r13.x, r13.x
      mul r13.x, r13.x, r13.y
      max r13.x, r13.x, l(0.000000)
      min r13.x, r13.x, l(1.000000)  // retMul<0:[0f,1f]>
      mul r13.y, r13.x, r13.x
      mul r13.x, r13.x, r13.y
      mov r13.y, -r25.x
      add r13.y, r13.y, r18.w
      mul r13.y, r13.y, cb5[11].x
      add r13.y, r13.y, r25.x
      mul r13.y, r13.y, l(0.318310)
      mul r22.yzw, r24.xxyz, r13.yyyy
      add r22.yzw, r22.yyzw, cb5[11].zzzz
      mov r13.y, -cb5[10].w
      add r13.y, r13.y, l(1.000000)
      mul r22.yzw, r13.yyyy, r22.yyzw
      add r22.yzw, r22.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r22.yzw, r22.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r13.xyz, r13.xxxx, r22.yzwy  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r13.w, l(0)  // fGs<0: 0f>
      mov r14.w, l(0)  // fFr<0: 0f>
    endif 

#line 263
    if_z r17.x
      lt r16.w, r16.w, l(0.000000)
      if_nz r16.w

#line 267
        mov r15.xyz, -r15.xyzx
        dp3 r15.x, r21.xyzx, r15.xyzx
        add r15.x, r15.x, l(-1.000000)
        mul r15.x, r15.x, l(-1.000000)
        max r15.x, r15.x, l(0.000000)
        min r15.x, r15.x, l(1.000000)
        mul r15.y, r15.x, l(-2.000000)
        add r15.y, r15.y, l(3.000000)
        mul r15.x, r15.x, r15.x
        mul r15.x, r15.x, r15.y
        max r15.x, r15.x, l(0.000000)
        min r15.x, r15.x, l(1.000000)  // retMul<0:[0f,1f]>
        mul r15.y, r15.x, r15.x
        mul r15.x, r15.x, r15.y
        mov r15.y, -r25.x
        add r15.y, r15.y, r18.w
        mul r15.y, r15.y, cb5[11].x
        add r15.y, r15.y, r25.x
        mul r15.y, r15.y, l(0.318310)
        mul r21.xyz, r24.xyzx, r15.yyyy
        add r21.xyz, r21.xyzx, cb5[11].zzzz
        mov r15.y, -cb5[10].w
        add r15.y, r15.y, l(1.000000)
        mul r21.xyz, r15.yyyy, r21.xyzx
        add r21.xyz, r21.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r21.xyz, r21.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r13.xyz, r15.xxxx, r21.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r13.w, l(0)  // fGs<0: 0f>
        mov r14.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r16.w
        mov r15.x, -r25.x
        add r15.x, r15.x, r18.w
        mul r15.x, r15.x, cb5[11].x
        add r15.x, r15.x, r25.x
        mul r15.x, r15.x, l(0.318310)
        mul r15.xyz, r24.xyzx, r15.xxxx
        add r15.xyz, r15.xyzx, cb5[11].zzzz
        mov r16.w, -cb5[10].w
        add r16.w, r16.w, l(1.000000)
        mul r15.xyz, r15.xyzx, r16.wwww
        mul r18.yzw, r19.xxyz, r13.wwww
        mul r18.xyz, r18.xxxx, r18.yzwy
        add r15.xyz, r15.xyzx, r18.xyzx
        mul r13.w, l(0.250000), cb5[12].x
        mul r13.w, r15.w, r13.w
        mul r13.w, r14.w, r13.w
        mul r13.w, r22.x, r13.w
        add r13.xyz, r13.wwww, r15.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 207 "lightingconstants.h"
    mul r13.xyz, r13.xyzx, r20.xyzx
    mul r13.xyz, r11.wwww, r13.xyzx
    max r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3LightColorDiffuseResult<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 211
    nop 
    mov r11.w, r10.w  // uShadowIndex<0>
    mov r17.yzw, r17.yyzw  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 136
    mov r15.xyz, -r17.yzwy  // f3uv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.w, -r15.z  // f3uv<2:NaN:Inf>
    nop 
    mov r15.xy, r15.xyxx  // f3Vec<0:NaN:Inf,1:NaN:Inf>
    mov r13.w, r13.w  // f3Vec<2:NaN:Inf>

#line 21
    mov r15.x, r15.x  // fx<0:NaN:Inf>
    mov r15.y, r15.y  // fy<0:NaN:Inf>
    mov r13.w, r13.w  // fz<0:NaN:Inf>
    mov r14.w, -r15.x
    max r14.w, r14.w, r15.x
    mov r15.z, -r15.y
    max r15.z, r15.z, r15.y
    lt r15.w, r15.z, r14.w
    mov r16.w, -r13.w
    max r16.w, r13.w, r16.w
    lt r17.x, r16.w, r14.w
    and r15.w, r15.w, r17.x
    if_nz r15.w
      ge r15.x, r15.x, l(0.000000)
      if_nz r15.x
        mov r15.x, l(0)  // iFace<0: 0>
      else 

#line 32
        mov r15.x, l(1)  // iFace<0: 1>

#line 26
      endif 
    else 

#line 35
      lt r14.w, r14.w, r15.z
      lt r15.z, r16.w, r15.z
      and r14.w, r14.w, r15.z
      if_nz r14.w
        ge r14.w, r15.y, l(0.000000)
        if_nz r14.w
          mov r15.x, l(2)  // iFace<0: 2>
        else 

#line 43
          mov r15.x, l(3)  // iFace<0: 3>

#line 37
        endif 
      else 

#line 48
        ge r13.w, r13.w, l(0.000000)
        if_nz r13.w
          mov r15.x, l(4)  // iFace<0: 4>
        else 

#line 54
          mov r15.x, l(5)  // iFace<0: 5>

#line 48
        endif 

#line 35
      endif 

#line 24
    endif 

#line 57
    mov r15.x, r15.x  // Vector3ToFace<0:[0,5]>

#line 139
    mov r13.w, r15.x  // iFace<0:[0,5]>
    imul null, r14.w, r15.x, l(4)
    imad r9.w, r9.w, l(24), r14.w
    mov r0.w, l(1.000000)
    dp4 r15.x, r0.xyzw, cb3[r9.w + 0].xyzw  // f4ShadowTexCoord<0:NaN:Inf>
    dp4 r15.y, r0.xyzw, cb3[r9.w + 1].xyzw  // f4ShadowTexCoord<1:NaN:Inf>
    dp4 r15.z, r0.xyzw, cb3[r9.w + 2].xyzw  // f4ShadowTexCoord<2:NaN:Inf>
    dp4 r0.w, r0.xyzw, cb3[r9.w + 3].xyzw  // f4ShadowTexCoord<3:NaN:Inf>
    div r15.xyz, r15.xyzx, r0.wwww  // f4ShadowTexCoord<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    div r0.w, r15.x, l(2.000000)
    add r0.w, r0.w, l(0.500000)  // f4ShadowTexCoord<0:NaN:Inf>
    div r9.w, r15.y, l(-2.000000)
    add r9.w, r9.w, l(0.500000)  // f4ShadowTexCoord<1:NaN:Inf>
    itof r13.w, r13.w
    add r0.w, r0.w, r13.w  // f4ShadowTexCoord<0:NaN:Inf>
    mul r15.x, r0.w, l(0.166667)  // f4ShadowTexCoord<0:NaN:Inf>

#line 150
    utof r0.w, r11.w
    add r0.w, r0.w, r9.w  // f4ShadowTexCoord<1:NaN:Inf>
    mul r15.y, r0.w, l(0.041667)  // f4ShadowTexCoord<1:NaN:Inf>
    mul r0.w, r12.w, l(5.000000)
    max r0.w, r0.w, l(0.000000)
    min r0.w, r0.w, l(1.000000)
    mul r0.w, r0.w, l(-9.900000)
    add r0.w, r0.w, l(10.000000)
    mul r0.w, r0.w, cb3[672].w
    mov r0.w, -r0.w
    add r0.w, r0.w, r15.z  // f4ShadowTexCoord<2:NaN:Inf>
    nop 
    mov r15.x, r15.x  // f3uv<0:NaN:Inf>
    mov r15.y, r15.y  // f3uv<1:NaN:Inf>
    mov r0.w, r0.w  // f3uv<2:NaN:Inf>

#line 84
    sample_c_lz_indexable(-3,-3,0)(texture2d)(float,float,float,float) r9.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, l(0.000000)  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,-2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,-1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,0,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,-3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,-2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,-1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,0,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,-3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,-2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,-1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,0,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,-3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,-2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,-1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,0,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,-3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,-2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,-1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,0,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,-3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,-2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,-1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,0,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,-3,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,-2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,-1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,0,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,1,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,2,0)(texture2d)(float,float,float,float) r11.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r9.w, r9.w, r11.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,3,0)(texture2d)(float,float,float,float) r0.w, r15.xyxx, t13.xxxx, s1, r0.w
    add r0.w, r0.w, r9.w  // fShadow<0:NaN>

#line 88
    div r0.w, r0.w, l(49.000000)  // fShadow<0:NaN>
    mov r0.w, r0.w  // FilterShadow<0:NaN>

#line 155
    mov r0.w, r0.w  // ApplyPointShadow<0:NaN>

#line 211
    mov r0.w, r0.w  // fShadowRes<0:NaN>
    mul r13.xyz, r0.wwww, r13.xyzx  // f3LightColorDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 216
    mul r13.xyz, r13.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3LightColorDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 200
  else 
    mov r13.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 387 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r13.xyz, r13.xyzx  // f3LightColorDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 397
  ine r0.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r0.w
    ld_indexable(buffer)(float,float,float,float) r15.xyz, r10.wwww, t2.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r10.wwww, t3.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>

#line 405
    dp3 r0.w, r11.xyzx, r11.xyzx
    sqrt r0.w, r0.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r15.xyz, r15.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r17.xyz, r17.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r0.w, r0.w  // fThickValue<0:NaN:Inf>
    mov r9.w, cb5[3].x  // f4SSSBRDFParams<0>
    mov r18.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r19.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r20.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r13.xyz, r13.xyzx  // f3LightDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 158 "constant.h"
    mov r9.w, r9.w  // fMaterialThickness<0>
    mov r18.x, r18.x  // fExtinctionCoefficientRed<0>
    mov r18.y, r18.y  // fExtinctionCoefficientGreen<0>
    mov r18.z, r18.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r16.xyz, r16.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    mov r21.xyz, -r19.xyzx
    add r20.xyz, r20.xyzx, r21.xyzx
    dp3 r10.w, r20.xyzx, r20.xyzx
    rsq r10.w, r10.w
    mul r20.xyz, r10.wwww, r20.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r21.xyz, -r20.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r15.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r15.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r19.xyzw, -r19.xyzw
    add r15.xyzw, r15.xyzw, r19.xyzw
    dp4 r10.w, r15.xyzw, r15.xyzw
    sqrt r10.w, r10.w
    div r10.w, l(1.000000), r10.w
    mul r10.w, r10.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r21.xyz, r21.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r14.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r11.w, r21.xyzx, r15.xyzx  // fProduct<0:NaN:Inf>
    mul r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r11.w, r11.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r15.xyz, r10.wwww, r11.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r19.xyz, -r14.xyzx
    dp3 r11.w, r19.xyzx, r21.xyzx
    max r11.w, r11.w, l(0.000000)
    mul r19.xyz, r9.wwww, r11.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r11.w, r21.xyzx, r21.xyzx  // fProduct<0:NaN:Inf>
    mul r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r11.w, r11.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r11.w, r9.w, r11.w
    add r19.xyz, r11.wwww, r19.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r19.xyz, r10.wwww, r19.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r21.x, r18.x, r19.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r21.y, r18.y, r19.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r21.z, r18.z, r19.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r18.xyz, r0.wwww, r21.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r15.xyz, r16.xyzx, r15.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r15.xyz, r18.xyzx, r15.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r15.xyz, r15.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r15.xyz, r15.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.xyz, r17.xyzx, r15.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r0.w, r20.xyzx, r14.xyzx
    max r0.w, r0.w, l(0.000000)  // fEdge<0:NaN:Inf>
    lt r0.w, r0.w, l(0.700000)
    lt r9.w, l(2.000000), r9.w
    and r0.w, r0.w, r9.w
    if_nz r0.w

#line 205
      mul r14.xyz, r18.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r14.xyz, r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r13.xyz, r13.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN,1:NaN,2:NaN>
    else 

#line 210
      mul r13.xyz, r13.xyzx, r15.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 407 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r13.xyz, r13.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 397
  endif 

#line 413
  add r12.xyz, r12.xyzx, r13.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 380
  iadd r8.w, r8.w, l(1)  // i<0>
endloop 

#line 422
nop 

#line 122 "constant.h"
nop 

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r4.wwww, t8.xyzw
mov r0.x, r0.x  // uHalfZBitsHigh<0>
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r6.wwww, t8.yxzw
mov r0.y, r0.y  // uHalfZBitsLow<0>
ishl r0.x, r0.x, l(16)
or r0.x, r0.y, r0.x  // uHalfZBits<0>
mov r0.x, r0.x  // fHalfZ<0:NaN:Inf>
nop 
lt r0.x, r7.x, r0.x
movc r0.y, r0.x, r7.y, r1.z  // uFirstLightIndex<0>
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r7.wwww, t8.yzxw
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r2.wwww, t8.yzwx
movc r0.x, r0.x, r0.z, r0.w  // uNumLights<0>

#line 422 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r0.y, r0.y  // uStartIndex<0>
mov r0.x, r0.x  // uLightCount<0>

#line 425
mov r0.y, r0.y  // i<0>
mov r3.xyz, r12.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.z, r0.y  // i<0>
loop 
  iadd r0.w, r0.y, r0.x
  ult r0.w, r0.z, r0.w
  breakc_z r0.w
  ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.zzzz, t8.yzwx  // uLightIndex<0>

#line 432
  nop 
  mov r1.z, r0.w  // uLightIndex<0>
  mov r7.yzw, r2.xxyz  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r13.xyz, r4.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r8.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r6.xyzx  // f4DiffMapColor<0:Inf,1:Inf,2:Inf>

#line 251 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r16.xyzw, r1.zzzz, t5.xyzw  // f4BoundingSphereCenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
  ld_indexable(buffer)(float,float,float,float) r17.xyzw, r1.zzzz, t7.wxyz  // f4SpotParams<3:Inf,0:Inf,1:Inf,2:Inf>

#line 256
  mov r18.xy, r17.yzyy  // f3SpotLightDir<0:Inf,1:Inf>
  mul r2.w, r18.x, r18.x
  mov r2.w, -r2.w
  add r2.w, r2.w, l(1.000000)
  mul r4.w, r18.y, r18.y
  mov r4.w, -r4.w
  add r2.w, r2.w, r4.w
  sqrt r2.w, r2.w  // f3SpotLightDir<2:NaN>

#line 260
  lt r4.w, l(0.000000), r17.w
  mov r5.w, -r2.w
  movc r18.z, r4.w, r2.w, r5.w  // f3SpotLightDir<2:NaN>
  mul r19.xyz, r16.wwww, r18.xyzx
  mov r19.xyz, -r19.xyzx
  add r16.xyz, r16.xyzx, r19.xyzx  // f3LightPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r7.yzw, -r7.yyzw
  add r7.yzw, r7.yyzw, r16.xxyz  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r2.w, r7.yzwy, r7.yzwy
  rsq r5.w, r2.w
  mul r16.xyz, r5.wwww, r7.yzwy  // f3ToLightNormalized<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r2.w, r2.w  // fLightDistance<0:NaN:Inf>
  mov r16.xyz, -r16.xyzx
  dp3 r5.w, r18.xyzx, r18.xyzx
  rsq r5.w, r5.w
  mul r18.xyz, r5.wwww, r18.xyzx
  dp3 r5.w, r16.xyzx, r18.xyzx  // fCosineOfCurrentAngle<0:NaN:Inf>

#line 272
  mov r17.x, r17.x  // fRad<0:Inf>
  mov r6.w, -r17.w
  movc r4.w, r4.w, r17.w, r6.w  // fCosineOfConeAngle<0:Inf>
  mov r16.xy, r10.xyxx  // f2LeanB<0:Inf,1:Inf>
  mov r17.yzw, r10.xxyz  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 279
  lt r6.w, r2.w, r17.x
  lt r8.w, r4.w, r5.w
  and r6.w, r6.w, r8.w
  if_nz r6.w
    mov r4.w, -r4.w
    add r4.w, r4.w, r5.w
    mov r5.w, -r5.w
    add r5.w, r5.w, l(1.000000)
    div r4.w, r4.w, r5.w  // fRadialAttenuation<0:NaN:Inf>
    mul r4.w, r4.w, r4.w
    max r4.w, r4.w, l(0.000000)
    min r4.w, r4.w, l(1.000000)  // fRadialAttenuation<0:[0f,1f]>
    div r5.w, r2.w, r17.x  // fx<0:NaN:Inf>
    mul r5.w, r5.w, r5.w
    mul r5.w, r5.w, r5.w
    mul r5.w, r5.w, l(1.000000)
    mov r5.w, -r5.w
    add r5.w, r5.w, l(1.000000)
    mul r5.w, r5.w, r5.w
    mul r5.w, r5.w, l(1.000000)
    mul r2.w, r2.w, r2.w
    add r2.w, r2.w, l(1.000000)
    div r2.w, r5.w, r2.w
    max r2.w, r2.w, l(0.000000)
    min r2.w, r2.w, l(1.000000)
    ftod r16.zw, r2.w  // fFallOff<0>

#line 289
    ld_indexable(buffer)(float,float,float,float) r18.xyz, r1.zzzz, t6.xyzw
    nop 
    mov r7.yzw, r7.yyzw  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r19.xyz, r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r2.w, cb5[10].x  // fRoughness<0>
    mov r5.w, cb5[10].y  // fF0<0>
    mov r20.xyz, r15.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>
    mov r16.xy, r16.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r17.yzw, r17.yyzw  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 161 "ggxlighting.h"
    dp3 r6.w, r19.xyzx, r19.xyzx
    rsq r6.w, r6.w
    mul r19.xyz, r6.wwww, r19.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r21.xyz, r19.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r22.xyz, r19.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
    mov r22.xyz, -r22.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r22.xyz, r19.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mul r23.xyz, r19.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r23.xyz, r19.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r24.xyz, r19.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r24.xyz, -r24.xyzx
    add r23.xyz, r23.xyzx, r24.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r6.w, r21.xyzx, r21.xyzx
    sqrt r8.w, r6.w
    dp3 r9.w, r22.xyzx, r22.xyzx
    sqrt r10.w, r9.w
    lt r11.w, r10.w, r8.w
    dp3 r12.w, r23.xyzx, r23.xyzx
    sqrt r13.w, r12.w
    lt r14.w, r13.w, r8.w
    or r11.w, r11.w, r14.w
    if_nz r11.w
      rsq r6.w, r6.w
      mul r21.xyz, r6.wwww, r21.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r6.w, r8.w, r10.w
      lt r8.w, r13.w, r10.w
      or r6.w, r6.w, r8.w
      if_nz r6.w
        rsq r6.w, r9.w
        mul r21.xyz, r6.wwww, r22.xyzx  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r6.w, r12.w
        mul r21.xyz, r6.wwww, r23.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r22.xyz, r19.yzxy, r21.zxyz
    mul r23.xyz, r19.zxyz, r21.yzxy
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx
    dp3 r6.w, r22.xyzx, r22.xyzx
    rsq r6.w, r6.w
    mul r22.xyz, r6.wwww, r22.xyzx  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r23.xyz, r7.yzwy, r14.xyzx
    dp3 r6.w, r23.xyzx, r23.xyzx
    rsq r6.w, r6.w
    mul r24.xyz, r6.wwww, r23.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r21.x, r23.xyzx, r21.xyzx
    dp3 r21.y, r23.xyzx, r22.xyzx
    dp3 r21.z, r23.xyzx, r19.xyzx
    dp3 r6.w, r21.xyzx, r21.xyzx
    rsq r6.w, r6.w
    mul r21.xyz, r6.wwww, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 187
    dp3 r6.w, r7.yzwy, r7.yzwy
    sqrt r6.w, r6.w  // f3Llength<0:NaN:Inf>
    dp3 r8.w, r14.xyzx, r14.xyzx
    sqrt r8.w, r8.w  // f3Vlength<0:NaN:Inf>
    dp3 r9.w, r19.xyzx, r7.yzwy  // fDotNL<0:NaN:Inf>
    dp3 r10.w, r19.xyzx, r14.xyzx  // fDotNV<0:NaN:Inf>
    div r9.w, r9.w, r6.w  // fDotNL<0:NaN:Inf>
    div r8.w, r10.w, r8.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r10.w, r19.xyzx, r24.xyzx  // fDotNH<0:NaN:Inf>
    div r22.xyz, r7.yzwy, r6.wwww
    dp3 r6.w, r22.xyzx, r24.xyzx  // fDotLH<0:NaN:Inf>
    nop 
    mov r20.xyz, r20.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>

#line 118
    mov r11.w, -r20.x
    max r11.w, r11.w, r20.x
    log r11.w, r11.w
    mul r11.w, r11.w, l(2.200000)
    exp r22.x, r11.w  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    mov r11.w, -r20.y
    max r11.w, r11.w, r20.y
    log r11.w, r11.w
    mul r11.w, r11.w, l(2.200000)
    exp r22.y, r11.w  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    mov r11.w, -r20.z
    max r11.w, r11.w, r20.z
    log r11.w, r11.w
    mul r11.w, r11.w, l(2.200000)
    exp r22.z, r11.w  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r22.xyz, r22.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r11.w, r22.x, l(0.300000)
    mul r12.w, r22.y, l(0.600000)
    add r11.w, r11.w, r12.w
    mul r12.w, r22.z, l(0.100000)
    add r11.w, r11.w, r12.w  // fCdLum<0:NaN:Inf>

#line 204
    lt r12.w, l(0.000000), r11.w
    div r20.xyz, r22.xyzx, r11.wwww
    movc r20.xyz, r12.wwww, r20.xyzx, l(1.000000,1.000000,1.000000,0)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r11.w, l(0.080000), cb5[10].z
    add r20.xyz, r20.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r20.xyz, r20.xyzx, cb5[12].zzzz
    add r20.xyz, r20.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r20.xyz, r11.wwww, r20.xyzx
    mov r23.xyz, -r20.xyzx
    add r23.xyz, r22.xyzx, r23.xyzx
    mul r23.xyz, r23.xyzx, cb5[10].wwww
    add r20.xyz, r20.xyzx, r23.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r9.w, r9.w  // fu<0:NaN:Inf>

#line 41
    mov r11.w, -r9.w
    add r11.w, r11.w, l(1.000000)
    max r11.w, r11.w, l(0.000000)
    min r11.w, r11.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r12.w, r11.w, r11.w  // fm2<0:[0f,1f]>
    mul r12.w, r12.w, r12.w
    mul r11.w, r11.w, r12.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r11.w, r11.w  // fFL<0:[-0f,1f]>
    nop 
    mov r8.w, r8.w  // fu<0:NaN:Inf>

#line 41
    mov r12.w, -r8.w
    add r12.w, r12.w, l(1.000000)
    max r12.w, r12.w, l(0.000000)
    min r12.w, r12.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r13.w, r12.w, r12.w  // fm2<0:[0f,1f]>
    mul r13.w, r13.w, r13.w
    mul r12.w, r12.w, r13.w  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r12.w, r12.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r7.yzw, r7.yyzw  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r19.xyz, r19.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r2.w, r2.w  // fRoughness<0>

#line 48
    mov r13.w, r2.w  // fSigma<0>

#line 51
    dp3 r14.w, r14.xyzx, r19.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r15.w, r7.yzwy, r19.xyzx  // fLDotN<0:NaN:Inf>
    dp3 r17.x, r7.yzwy, r7.yzwy
    sqrt r17.x, r17.x  // f3Llength<0:NaN:Inf>
    dp3 r18.w, r14.xyzx, r14.xyzx
    sqrt r18.w, r18.w  // f3Vlength<0:NaN:Inf>
    div r14.w, r14.w, r18.w  // fVDotN<0:NaN:Inf>
    div r15.w, r15.w, r17.x  // fLDotN<0:NaN:Inf>
    mov r17.x, -r14.w
    max r18.w, r14.w, r17.x
    mov r19.w, -r18.w
    add r19.w, r19.w, l(1.000000)
    sqrt r19.w, r19.w
    mul r20.w, r18.w, l(-0.018729)
    add r20.w, r20.w, l(0.074261)
    mul r20.w, r18.w, r20.w
    add r20.w, r20.w, l(-0.212114)
    mul r18.w, r18.w, r20.w
    add r18.w, r18.w, l(1.570729)
    mul r18.w, r19.w, r18.w
    mul r19.w, r18.w, l(-2.000000)
    add r19.w, r19.w, l(3.141593)
    lt r17.x, r14.w, r17.x
    and r17.x, r17.x, r19.w
    add r17.x, r17.x, r18.w  // fThetaR<0:NaN:Inf>
    mul r13.w, r13.w, l(3.141593)
    div r13.w, r13.w, l(180.000000)
    mul r13.w, r13.w, r13.w
    mul r13.w, r13.w, l(1.000000)  // fSigma2<0:Inf:[0f,1.#INFf]>

#line 63
    mul r23.xyz, r14.wwww, r19.xyzx
    mov r23.xyz, -r23.xyzx
    add r23.xyz, r14.xyzx, r23.xyzx
    dp3 r14.w, r23.xyzx, r23.xyzx
    rsq r14.w, r14.w
    mul r23.xyz, r14.wwww, r23.xyzx
    mul r24.xyz, r15.wwww, r19.xyzx
    mov r24.xyz, -r24.xyzx
    add r24.xyz, r7.yzwy, r24.xyzx
    dp3 r14.w, r24.xyzx, r24.xyzx
    rsq r14.w, r14.w
    mul r24.xyz, r14.wwww, r24.xyzx
    dp3 r14.w, r23.xyzx, r24.xyzx  // fCosPhiDiff<0:NaN:Inf>
    mov r18.w, -r15.w
    max r19.w, r15.w, r18.w
    mov r20.w, -r19.w
    add r20.w, r20.w, l(1.000000)
    sqrt r20.w, r20.w
    mul r21.w, r19.w, l(-0.018729)
    add r21.w, r21.w, l(0.074261)
    mul r21.w, r19.w, r21.w
    add r21.w, r21.w, l(-0.212114)
    mul r19.w, r19.w, r21.w
    add r19.w, r19.w, l(1.570729)
    mul r19.w, r20.w, r19.w
    mul r20.w, r19.w, l(-2.000000)
    add r20.w, r20.w, l(3.141593)
    lt r15.w, r15.w, r18.w
    and r15.w, r15.w, r20.w
    add r15.w, r15.w, r19.w  // fThetaI<0:NaN:Inf>
    max r18.w, r17.x, r15.w  // fAlpha<0:NaN:Inf>
    min r15.w, r17.x, r15.w  // fBeta<0:NaN:Inf>
    lt r17.x, l(1.570796), r18.w
    if_nz r17.x
      mov r19.w, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r17.x
      mul r17.x, r13.w, l(0.500000)
      add r20.w, r13.w, l(0.330000)
      div r17.x, r17.x, r20.w
      mov r17.x, -r17.x
      add r17.x, r17.x, l(1.000000)  // fC1<0:NaN:Inf>
      mul r20.w, r13.w, l(0.450000)
      add r21.w, r13.w, l(0.090000)
      div r20.w, r20.w, r21.w  // fC2<0:NaN:Inf>
      ge r22.w, r14.w, l(0.000000)
      if_nz r22.w
        sincos r22.w, null, r18.w
        mul r22.w, r20.w, r22.w  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r23.x, null, r18.w
        mul r23.y, r15.w, l(2.000000)
        div r23.y, r23.y, l(3.141593)
        mul r23.z, r23.y, l(1.000000)
        mul r23.y, r23.y, r23.y
        mul r23.y, r23.y, r23.z
        mov r23.y, -r23.y
        add r23.x, r23.y, r23.x
        mul r22.w, r20.w, r23.x  // fC2<0:NaN:Inf>
      endif 
      mul r20.w, r13.w, l(0.125000)
      div r20.w, r20.w, r21.w
      mul r21.w, r18.w, l(4.000000)
      mul r21.w, r15.w, r21.w
      div r21.w, r21.w, l(9.869604)
      mul r21.w, r21.w, r21.w
      mul r21.w, r21.w, l(1.000000)
      mul r20.w, r20.w, r21.w  // fC3<0:NaN:Inf>
      mul r21.w, r14.w, r22.w
      sincos r22.w, null, r15.w
      sincos null, r23.x, r15.w
      div r22.w, r22.w, r23.x
      mul r21.w, r21.w, r22.w
      add r17.x, r17.x, r21.w
      mov r21.w, -r14.w
      max r21.w, r14.w, r21.w
      mov r21.w, -r21.w
      add r21.w, r21.w, l(1.000000)
      mul r20.w, r20.w, r21.w
      add r18.w, r15.w, r18.w
      div r18.w, r18.w, l(2.000000)
      sincos r21.w, null, r18.w
      sincos null, r18.w, r18.w
      div r18.w, r21.w, r18.w
      mul r18.w, r18.w, r20.w
      add r17.x, r17.x, r18.w
      mul r17.x, r17.x, l(0.795775)  // fL1<0:NaN:Inf>
      mul r18.w, r13.w, l(0.338204)
      add r13.w, r13.w, l(0.130000)
      div r13.w, r18.w, r13.w
      mul r18.w, r15.w, l(4.000000)
      mul r15.w, r15.w, r18.w
      mul r14.w, r14.w, r15.w
      div r14.w, r14.w, l(9.869604)
      mov r14.w, -r14.w
      add r14.w, r14.w, l(1.000000)
      mul r13.w, r13.w, r14.w  // fL2<0:NaN:Inf>
      add r19.w, r13.w, r17.x  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r19.w, r19.w  // fFd<0:NaN:Inf>

#line 219
    mul r13.w, r6.w, r6.w
    mul r13.w, r2.w, r13.w  // fFss90<0:NaN:Inf>
    add r13.w, r13.w, l(-1.000000)
    mul r11.w, r11.w, r13.w
    add r11.w, r11.w, l(1.000000)
    mul r12.w, r12.w, r13.w
    add r12.w, r12.w, l(1.000000)
    mul r11.w, r11.w, r12.w  // fFss<0:NaN:Inf>
    add r12.w, r8.w, r9.w
    div r12.w, l(1.000000), r12.w
    add r12.w, r12.w, l(-0.500000)
    mul r11.w, r11.w, r12.w
    add r11.w, r11.w, l(0.500000)
    mul r11.w, r11.w, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r16.xy, r16.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r17.yzw, r17.yyzw  // f3LeanM<0:Inf,1:Inf,2:Inf>
    mov r21.xyz, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    mul r16.xy, r16.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000)  // f2B<0:Inf,1:Inf>
    mul r17.xyz, r17.yzwy, l(0.000100, 0.000100, 0.000100, 0.000000)
    mul r17.xyz, r17.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3M<0:Inf,1:Inf,2:Inf>
    nop 
    div r12.w, cb5[10].x, l(5.000000)  // fM<0:[-6.80565e+037f,6.80565e+037f]>

#line 123
    mul r12.w, r12.w, r12.w
    div r12.w, l(2.000000), r12.w
    add r12.w, r12.w, l(-2.000000)  // RoughnessToSpecPower<0:Inf:[-2f,1.#INFf]>

#line 143
    div r12.w, l(1.000000), r12.w  // fInvS<0:Inf>
    add r17.xy, r12.wwww, r17.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r23.xy, r16.xyxx, r16.xyxx
    mul r23.z, r16.y, r16.x
    mov r23.xyz, -r23.xyzx
    add r17.xyz, r17.xyzx, r23.xyzx  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r12.w, r17.y, r17.x
    mul r13.w, r17.z, r17.z
    mov r13.w, -r13.w
    add r12.w, r12.w, r13.w  // fDet<0:NaN:Inf>
    div r21.xy, r21.xyxx, r21.zzzz
    mov r16.xy, -r16.xyxx
    add r16.xy, r16.xyxx, r21.xyxx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r13.w, r16.x, r16.x
    mul r13.w, r17.y, r13.w
    mul r14.w, r16.y, r16.y
    mul r14.w, r17.x, r14.w
    add r13.w, r13.w, r14.w
    mul r14.w, r16.x, l(2.000000)
    mul r14.w, r16.y, r14.w
    mul r14.w, r17.z, r14.w
    mov r14.w, -r14.w
    add r13.w, r13.w, r14.w  // fE<0:NaN:Inf>

#line 152
    lt r14.w, l(0.000000), r21.z
    lt r15.w, l(0.000000), r12.w
    and r14.w, r14.w, r15.w
    if_nz r14.w
      mul r13.w, r13.w, l(-0.500000)
      div r13.w, r13.w, r12.w
      mul r13.w, r13.w, l(1.442695)
      exp r13.w, r13.w
      sqrt r12.w, r12.w
      mul r12.w, r12.w, l(3.141593)
      mul r12.w, r12.w, l(2.000000)
      div r12.w, r13.w, r12.w  // fD<0:NaN:Inf>
    else 
      mov r12.w, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r12.w, r12.w  // LeanMapping<0:NaN:Inf>

#line 229
    mov r12.w, r12.w  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r6.w, r6.w  // fu<0:NaN:Inf>

#line 41
    mov r6.w, -r6.w
    add r6.w, r6.w, l(1.000000)
    max r6.w, r6.w, l(0.000000)
    min r6.w, r6.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r13.w, r6.w, r6.w  // fm2<0:[0f,1f]>
    mul r13.w, r13.w, r13.w
    mul r6.w, r6.w, r13.w  // SchlickFresnel<0:[-0f,1f]>

#line 232
    mov r6.w, r6.w  // fFH<0:[-0f,1f]>
    mov r17.xyz, -r20.xyzx
    add r17.xyz, r17.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r17.xyz, r6.wwww, r17.xyzx
    add r17.xyz, r17.xyzx, r20.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    mul r2.w, r2.w, l(0.500000)
    add r2.w, r2.w, l(0.500000)  // fx<0:[-1.70141e+038f,1.70141e+038f]>

#line 86
    mul r2.w, r2.w, r2.w  // Sqr<0:Inf:[0f,1.#INFf]>

#line 234
    mov r2.w, r2.w  // fRoughG<0:Inf:[0f,1.#INFf]>
    nop 
    mov r2.w, r2.w  // fAlphaG<0:Inf:[0f,1.#INFf]>

#line 111
    mul r2.w, r2.w, r2.w  // fa<0:NaN:Inf>
    mul r13.w, r9.w, r9.w  // fb<0:NaN:Inf>
    nop 
    add r14.w, r2.w, r13.w
    mul r15.w, r2.w, r13.w
    mov r15.w, -r15.w
    add r14.w, r14.w, r15.w  // fx<0:NaN:Inf>

#line 86
    mul r14.w, r14.w, r14.w  // Sqr<0:NaN:Inf>

#line 113
    add r14.w, r9.w, r14.w
    div r14.w, l(1.000000), r14.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r15.w, r8.w, r8.w  // fb<0:NaN:Inf>
    nop 
    add r16.x, r2.w, r15.w
    mul r2.w, r2.w, r15.w
    mov r2.w, -r2.w
    add r2.w, r2.w, r16.x  // fx<0:NaN:Inf>

#line 86
    mul r2.w, r2.w, r2.w  // Sqr<0:NaN:Inf>

#line 113
    add r2.w, r2.w, r8.w
    div r2.w, l(1.000000), r2.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r2.w, r2.w, r14.w  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r10.w, r10.w  // fDotNH<0:NaN:Inf>
    mul r14.w, l(-0.099000), cb5[12].y
    add r14.w, r14.w, l(0.100000)  // fa<0:[-3.3688e+037f,3.3688e+037f]>

#line 91
    ge r16.x, r14.w, l(1.000000)
    if_nz r16.x
      mov r16.y, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r16.x
      mul r14.w, r14.w, r14.w  // fa2<0:Inf:[0f,1.#INFf]>
      add r16.x, r14.w, l(-1.000000)
      mul r17.w, r10.w, r16.x
      mul r10.w, r10.w, r17.w
      add r10.w, r10.w, l(1.000000)  // fT<0:NaN:Inf>
      log r14.w, r14.w
      mul r14.w, r14.w, l(0.693147)
      mul r14.w, r14.w, l(3.141593)
      mul r10.w, r10.w, r14.w
      div r16.y, r16.x, r10.w  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r16.y, r16.y  // fDr<0:NaN:Inf>
    mov r10.w, -r5.w
    add r10.w, r10.w, l(1.000000)
    mul r6.w, r6.w, r10.w
    add r5.w, r5.w, r6.w  // fFr<0:Inf>
    nop 

#line 113
    nop 
    add r6.w, r13.w, l(0.062500)
    mul r10.w, r13.w, l(0.062500)
    mov r10.w, -r10.w
    add r6.w, r6.w, r10.w  // fx<0:NaN:Inf>

#line 86
    mul r6.w, r6.w, r6.w  // Sqr<0:NaN:Inf>

#line 113
    add r6.w, r6.w, r9.w
    div r6.w, l(1.000000), r6.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r10.w, r15.w, l(0.062500)
    mul r13.w, r15.w, l(0.062500)
    mov r13.w, -r13.w
    add r10.w, r10.w, r13.w  // fx<0:NaN:Inf>

#line 86
    mul r10.w, r10.w, r10.w  // Sqr<0:NaN:Inf>

#line 113
    add r10.w, r8.w, r10.w
    div r10.w, l(1.000000), r10.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r6.w, r6.w, r10.w  // fGr<0:NaN:Inf>

#line 254
    lt r9.w, r9.w, l(0.000000)
    if_nz r9.w

#line 258
      mov r7.yzw, -r7.yyzw
      dp3 r7.y, r19.xyzx, r7.yzwy
      max r7.y, r7.y, l(0.000000)
      min r7.y, r7.y, l(1.000000)
      mul r7.y, r7.y, l(1.000000)
      add r7.y, r7.y, l(-1.000000)
      mul r7.y, r7.y, l(-1.000000)
      max r7.y, r7.y, l(0.000000)
      min r7.y, r7.y, l(1.000000)
      mul r7.z, r7.y, l(-2.000000)
      add r7.z, r7.z, l(3.000000)
      mul r7.y, r7.y, r7.y
      mul r7.y, r7.y, r7.z
      max r7.y, r7.y, l(0.000000)
      min r7.y, r7.y, l(1.000000)  // retMul<0:[0f,1f]>
      mul r7.z, r7.y, r7.y
      mul r7.y, r7.y, r7.z
      mov r7.z, -r19.w
      add r7.z, r7.z, r11.w
      mul r7.z, r7.z, cb5[11].x
      add r7.z, r7.z, r19.w
      mul r7.z, r7.z, l(0.318310)
      mul r20.xyz, r22.xyzx, r7.zzzz
      add r20.xyz, r20.xyzx, cb5[11].zzzz
      mov r7.z, -cb5[10].w
      add r7.z, r7.z, l(1.000000)
      mul r20.xyz, r7.zzzz, r20.xyzx
      add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r7.yzw, r7.yyyy, r20.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r2.w, l(0)  // fGs<0: 0f>
      mov r5.w, l(0)  // fFr<0: 0f>
    endif 

#line 263
    if_z r9.w
      lt r8.w, r8.w, l(0.000000)
      if_nz r8.w

#line 267
        mov r14.xyz, -r14.xyzx
        dp3 r9.w, r19.xyzx, r14.xyzx
        add r9.w, r9.w, l(-1.000000)
        mul r9.w, r9.w, l(-1.000000)
        max r9.w, r9.w, l(0.000000)
        min r9.w, r9.w, l(1.000000)
        mul r10.w, r9.w, l(-2.000000)
        add r10.w, r10.w, l(3.000000)
        mul r9.w, r9.w, r9.w
        mul r9.w, r9.w, r10.w
        max r9.w, r9.w, l(0.000000)
        min r9.w, r9.w, l(1.000000)  // retMul<0:[0f,1f]>
        mul r10.w, r9.w, r9.w
        mul r9.w, r9.w, r10.w
        mov r10.w, -r19.w
        add r10.w, r10.w, r11.w
        mul r10.w, r10.w, cb5[11].x
        add r10.w, r10.w, r19.w
        mul r10.w, r10.w, l(0.318310)
        mul r14.xyz, r22.xyzx, r10.wwww
        add r14.xyz, r14.xyzx, cb5[11].zzzz
        mov r10.w, -cb5[10].w
        add r10.w, r10.w, l(1.000000)
        mul r14.xyz, r10.wwww, r14.xyzx
        add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r7.yzw, r9.wwww, r14.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r2.w, l(0)  // fGs<0: 0f>
        mov r5.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r8.w
        mov r8.w, -r19.w
        add r8.w, r8.w, r11.w
        mul r8.w, r8.w, cb5[11].x
        add r8.w, r8.w, r19.w
        mul r8.w, r8.w, l(0.318310)
        mul r14.xyz, r22.xyzx, r8.wwww
        add r14.xyz, r14.xyzx, cb5[11].zzzz
        mov r8.w, -cb5[10].w
        add r8.w, r8.w, l(1.000000)
        mul r14.xyz, r8.wwww, r14.xyzx
        mul r17.xyz, r17.xyzx, r2.wwww
        mul r17.xyz, r12.wwww, r17.xyzx
        add r14.xyz, r14.xyzx, r17.xyzx
        mul r2.w, l(0.250000), cb5[12].x
        mul r2.w, r6.w, r2.w
        mul r2.w, r5.w, r2.w
        mul r2.w, r16.y, r2.w
        add r7.yzw, r2.wwww, r14.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 289 "lightingconstants.h"
    mul r7.yzw, r7.yyzw, r18.xxyz
    ftod r14.xyzw, r7.yzyy
    ftod r7.zw, r7.w
    dmul r14.xyzw, r14.xyzw, r16.zwzw
    dmul r7.zw, r7.zwzw, r16.zwzw
    ftod r16.xyzw, r4.wwww
    ftod r17.xy, r4.w
    dmul r14.xyzw, r14.xyzw, r16.xyzw
    dmul r7.zw, r7.zwzw, r17.xyxy
    dtof r14.xy, r14.xyzw
    dtof r14.z, r7.zwzw
    max r7.yzw, r14.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r7.yzw, r7.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)  // f3LightColorDiffuseResult<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 294
    nop 
    mov r2.w, r1.z  // uShadowIndex<0>

#line 160
    imul null, r0.w, r0.w, l(4)
    mov r14.xyz, r2.xyzx
    mov r14.w, l(1.000000)
    dp4 r16.x, r14.xyzw, cb3[r0.w + 576].xyzw  // f4ShadowTexCoord<0:NaN:Inf>
    dp4 r16.y, r14.xyzw, cb3[r0.w + 577].xyzw  // f4ShadowTexCoord<1:NaN:Inf>
    dp4 r16.z, r14.xyzw, cb3[r0.w + 578].xyzw  // f4ShadowTexCoord<2:NaN:Inf>
    dp4 r0.w, r14.xyzw, cb3[r0.w + 579].xyzw  // f4ShadowTexCoord<3:NaN:Inf>
    div r14.xyz, r16.xyzx, r0.wwww  // f4ShadowTexCoord<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    div r0.w, r14.x, l(2.000000)
    add r0.w, r0.w, l(0.500000)  // f4ShadowTexCoord<0:NaN:Inf>
    div r4.w, r14.y, l(-2.000000)
    add r14.y, r4.w, l(0.500000)  // f4ShadowTexCoord<1:NaN:Inf>
    utof r2.w, r2.w
    add r0.w, r0.w, r2.w  // f4ShadowTexCoord<0:NaN:Inf>
    mul r14.x, r0.w, l(0.041667)  // f4ShadowTexCoord<0:NaN:Inf>
    mul r0.w, cb3[672].w, l(6.000000)
    mov r0.w, -r0.w
    add r0.w, r0.w, r14.z  // f4ShadowTexCoord<2:NaN:Inf>

#line 171
    nop 
    mov r14.x, r14.x  // f3uv<0:NaN:Inf>
    mov r14.y, r14.y  // f3uv<1:NaN:Inf>
    mov r0.w, r0.w  // f3uv<2:NaN:Inf>

#line 84
    sample_c_lz_indexable(-3,-3,0)(texture2d)(float,float,float,float) r2.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, l(0.000000)  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,-2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,-1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,0,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-3,3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,-3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,-2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,-1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,0,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-2,3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,-3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,-2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,-1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,0,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(-1,3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,-3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,-2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,-1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,0,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(0,3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,-3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,-2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,-1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,0,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(1,3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,-3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,-2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,-1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,0,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(2,3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,-3,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,-2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,-1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,0,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,1,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,2,0)(texture2d)(float,float,float,float) r4.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r2.w, r2.w, r4.w  // fShadow<0:NaN>
    sample_c_lz_indexable(3,3,0)(texture2d)(float,float,float,float) r0.w, r14.xyxx, t14.xxxx, s1, r0.w
    add r0.w, r0.w, r2.w  // fShadow<0:NaN>

#line 88
    div r0.w, r0.w, l(49.000000)  // fShadow<0:NaN>
    mov r0.w, r0.w  // FilterShadow<0:NaN>

#line 171
    mov r0.w, r0.w  // ApplySpotShadow<0:NaN>

#line 294
    mov r0.w, r0.w  // fShadowRes<0:NaN>
    mul r7.yzw, r0.wwww, r7.yyzw  // f3LightColorDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 299
    mul r7.yzw, r7.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000)  // f3LightColorDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 279
  else 
    mov r7.yzw, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 432 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r7.yzw, r7.yyzw  // f3LightColorDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 441
  ine r0.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r0.w
    ld_indexable(buffer)(float,float,float,float) r14.xyz, r1.zzzz, t5.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r16.xyz, r1.zzzz, t6.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>

#line 448
    dp3 r0.w, r11.xyzx, r11.xyzx
    sqrt r0.w, r0.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r14.xyz, r14.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r16.xyz, r16.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r0.w, r0.w  // fThickValue<0:NaN:Inf>
    mov r1.z, cb5[3].x  // f4SSSBRDFParams<0>
    mov r17.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r18.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r19.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r7.yzw, r7.yyzw  // f3LightDiffuseResult<0:NaN,1:NaN,2:NaN>

#line 158 "constant.h"
    mov r1.z, r1.z  // fMaterialThickness<0>
    mov r17.x, r17.x  // fExtinctionCoefficientRed<0>
    mov r17.y, r17.y  // fExtinctionCoefficientGreen<0>
    mov r17.z, r17.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r15.xyz, r15.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    mov r20.xyz, -r18.xyzx
    add r19.xyz, r19.xyzx, r20.xyzx
    dp3 r2.w, r19.xyzx, r19.xyzx
    rsq r2.w, r2.w
    mul r19.xyz, r2.wwww, r19.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r20.xyz, -r19.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r14.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r18.xyzw, -r18.xyzw
    add r14.xyzw, r14.xyzw, r18.xyzw
    dp4 r2.w, r14.xyzw, r14.xyzw
    sqrt r2.w, r2.w
    div r2.w, l(1.000000), r2.w
    mul r2.w, r2.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r20.xyz, r20.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r13.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r4.w, r20.xyzx, r14.xyzx  // fProduct<0:NaN:Inf>
    mul r4.w, r4.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r4.w, r4.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r4.w, r4.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r14.xyz, r2.wwww, r4.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r18.xyz, -r13.xyzx
    dp3 r4.w, r18.xyzx, r20.xyzx
    max r4.w, r4.w, l(0.000000)
    mul r18.xyz, r1.zzzz, r4.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r4.w, r20.xyzx, r20.xyzx  // fProduct<0:NaN:Inf>
    mul r4.w, r4.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r4.w, r4.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r4.w, r4.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r4.w, r1.z, r4.w
    add r18.xyz, r4.wwww, r18.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r18.xyz, r2.wwww, r18.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r20.x, r17.x, r18.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r20.y, r17.y, r18.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r20.z, r17.z, r18.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r17.xyz, r0.wwww, r20.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r14.xyz, r15.xyzx, r14.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r14.xyz, r17.xyzx, r14.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r16.xyzx, r14.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r0.w, r19.xyzx, r13.xyzx
    max r0.w, r0.w, l(0.000000)  // fEdge<0:NaN:Inf>
    lt r0.w, r0.w, l(0.700000)
    lt r1.z, l(2.000000), r1.z
    and r0.w, r0.w, r1.z
    if_nz r0.w

#line 205
      mul r13.xyz, r17.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r7.yzw, r7.yyzw, r13.xxyz  // f3LightDiffuseResult<0:NaN,1:NaN,2:NaN>
    else 

#line 210
      mul r7.yzw, r7.yyzw, r14.xxyz  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 450 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r7.yzw, r7.yyzw  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 441
  endif 

#line 455
  add r3.xyz, r3.xyzx, r7.yzwy  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 425
  iadd r0.z, r0.z, l(1)  // i<0>
endloop 

#line 465
nop 
mov r0.x, cb2[25].y  // uMaxNumLightsPerTile<0>
mov r0.y, cb2[25].z  // uMaxNumElementsPerTile<0>

#line 122 "constant.h"
nop 
imul null, r0.z, r0.y, r3.w  // nStartIndex<0>

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t11.yzxw
mov r0.z, r0.z  // uHalfZBitsHigh<0>
imad r0.w, r0.y, r3.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t11.yzwx
mov r0.w, r0.w  // uHalfZBitsLow<0>
ishl r0.z, r0.z, l(16)
or r0.z, r0.w, r0.z  // uHalfZBits<0>
mov r0.z, r0.z  // fHalfZ<0:NaN:Inf>
nop 
lt r0.z, r7.x, r0.z
imad r0.w, r0.y, r3.w, l(4)
iadd r0.x, r0.w, r0.x
movc r0.x, r0.z, r0.w, r0.x  // uFirstLightIndex<0>
imad r0.w, r0.y, r3.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t11.yzwx
imad r0.y, r0.y, r3.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r0.yyyy, t11.yxzw
movc r0.y, r0.z, r0.w, r0.y  // uNumLights<0>

#line 465 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r0.x, r0.x  // uStartIndex<0>
mov r0.y, r0.y  // uLightCount<0>

#line 469
mov r0.x, r0.x  // i<0>
mov r7.xyz, r3.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.z, r0.x  // i<0>
loop 
  iadd r0.w, r0.x, r0.y
  ult r0.w, r0.z, r0.w
  breakc_z r0.w
  ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.zzzz, t11.yzwx
  mov r0.w, r0.w  // uLightIndex<0>

#line 475
  nop 
  mov r0.w, r0.w  // uLightIndex<0>
  mov r8.xyz, r2.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r10.xyz, r4.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 308 "lightingconstants.h"
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r12.x, r0.w, l(0), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r12.y, r0.w, l(4), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r12.z, r0.w, l(8), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.z, r0.w, l(12), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  mov r12.x, r12.x  // f4CenterAndRadius<0>
  mov r12.y, r12.y  // f4CenterAndRadius<1>
  mov r12.z, r12.z  // f4CenterAndRadius<2>
  mov r1.z, r1.z  // f4CenterAndRadius<3>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.x, r0.w, l(0), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.y, r0.w, l(4), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.z, r0.w, l(8), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.x, r0.w, l(16), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.y, r0.w, l(20), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.z, r0.w, l(24), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r15.x, r0.w, l(32), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r15.y, r0.w, l(36), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r15.z, r0.w, l(40), t10.xxxx  // g_VPLDataBuffer<0>
  mov r13.x, r13.x  // data<0>
  mov r13.y, r13.y  // data<1>
  mov r13.z, r13.z  // data<2>
  mov r14.x, r14.x  // data<4>
  mov r14.y, r14.y  // data<5>
  mov r14.z, r14.z  // data<6>
  mov r15.x, r15.x  // data<8>
  mov r15.y, r15.y  // data<9>
  mov r15.z, r15.z  // data<10>
  mov r8.xyz, -r8.xyzx
  add r8.xyz, r8.xyzx, r12.xyzx  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r2.w, r8.xyzx, r8.xyzx
  rsq r3.w, r2.w
  mul r12.xyz, r3.wwww, r8.xyzx  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r2.w, r2.w  // fLightDistance<0:NaN:Inf>

#line 317
  mov r1.z, r1.z  // fRad<0>
  dp3 r3.w, r13.xyzx, r8.xyzx
  max r3.w, r3.w, l(0.000000)  // fVPLNormalDotDir<0:NaN:Inf>

#line 321
  lt r4.w, r2.w, r1.z
  lt r5.w, l(0.000000), r3.w
  and r4.w, r4.w, r5.w
  if_nz r4.w
    mov r14.xyz, r14.xyzx  // f3LightColor<0,1,2>
    div r1.z, r2.w, r1.z  // fx<0:NaN:Inf>
    mul r1.z, r1.z, r1.z
    mul r1.z, r1.z, r1.z
    mul r1.z, r1.z, l(1.000000)
    mov r1.z, -r1.z
    add r1.z, r1.z, l(1.000000)
    mul r1.z, r1.z, r1.z
    mul r1.z, r1.z, l(1.000000)
    mul r2.w, r2.w, r2.w
    add r2.w, r2.w, l(1.000000)
    div r1.z, r1.z, r2.w
    max r1.z, r1.z, l(0.000000)
    min r1.z, r1.z, l(1.000000)  // fFallOff<0:[0f,1f]>
    dp3 r2.w, r15.xyzx, r10.xyzx  // fSourceLightDotL<0:NaN:Inf>

#line 332
    lt r4.w, r2.w, l(0.000000)
    if_nz r4.w
      div r2.w, r2.w, cb2[26].w
      add r2.w, r2.w, l(1.000000)  // fSourceLightDotL<0:NaN:Inf>
    else 

#line 338
      mov r2.w, l(1.000000)  // fSourceLightDotL<0: 1f>

#line 332
    endif 

#line 341
    dp3 r4.w, r12.xyzx, r10.xyzx
    max r4.w, r4.w, l(0.000000)
    min r4.w, r4.w, l(1.000000)
    mul r8.xyz, r4.wwww, r14.xyzx
    mul r8.xyz, r1.zzzz, r8.xyzx
    mul r8.xyz, r3.wwww, r8.xyzx
    mul r8.xyz, r2.wwww, r8.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 321
  else 
    mov r8.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 475 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r8.xyz, r8.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 480
  ine r1.z, l(0, 0, 0, 0), cb5[8].z
  if_nz r1.z
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r12.x, r0.w, l(0), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r12.y, r0.w, l(4), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r12.z, r0.w, l(8), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    mov r12.x, r12.x  // f4CenterAndRadius<0>
    mov r12.y, r12.y  // f4CenterAndRadius<1>
    mov r12.z, r12.z  // f4CenterAndRadius<2>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.x, r0.w, l(16), t10.xxxx  // g_VPLDataBuffer<0>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.y, r0.w, l(20), t10.xxxx  // g_VPLDataBuffer<0>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.z, r0.w, l(24), t10.xxxx  // g_VPLDataBuffer<0>
    mov r13.x, r13.x  // f3LightCol<0>
    mov r13.y, r13.y  // f3LightCol<1>
    mov r13.z, r13.z  // f3LightCol<2>

#line 487
    dp3 r0.w, r11.xyzx, r11.xyzx
    sqrt r0.w, r0.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r12.xyz, r12.xyzx  // f4CenterAndRadius<0,1,2>
    mov r13.xyz, r13.xyzx  // f3LightColor<0,1,2>
    mov r14.xyz, r6.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r0.w, r0.w  // fThickValue<0:NaN:Inf>
    mov r1.z, cb5[3].x  // f4SSSBRDFParams<0>
    mov r15.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r16.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r17.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r8.xyz, r8.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 158 "constant.h"
    mov r1.z, r1.z  // fMaterialThickness<0>
    mov r15.x, r15.x  // fExtinctionCoefficientRed<0>
    mov r15.y, r15.y  // fExtinctionCoefficientGreen<0>
    mov r15.z, r15.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r14.xyz, r14.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    mov r18.xyz, -r16.xyzx
    add r17.xyz, r17.xyzx, r18.xyzx
    dp3 r2.w, r17.xyzx, r17.xyzx
    rsq r2.w, r2.w
    mul r17.xyz, r2.wwww, r17.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r18.xyz, -r17.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r12.xyzx  // f4LightPos<0,1,2>
    mov r12.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r16.xyzw, -r16.xyzw
    add r12.xyzw, r12.xyzw, r16.xyzw
    dp4 r2.w, r12.xyzw, r12.xyzw
    sqrt r2.w, r2.w
    div r2.w, l(1.000000), r2.w
    mul r2.w, r2.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r18.xyz, r18.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r10.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r3.w, r18.xyzx, r12.xyzx  // fProduct<0:NaN:Inf>
    mul r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r3.w, r3.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r12.xyz, r2.wwww, r3.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, -r10.xyzx
    dp3 r3.w, r16.xyzx, r18.xyzx
    max r3.w, r3.w, l(0.000000)
    mul r16.xyz, r1.zzzz, r3.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r3.w, r18.xyzx, r18.xyzx  // fProduct<0:NaN:Inf>
    mul r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r3.w, r3.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r3.w, r1.z, r3.w
    add r16.xyz, r3.wwww, r16.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r16.xyz, r2.wwww, r16.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r18.x, r15.x, r16.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r18.y, r15.y, r16.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r18.z, r15.z, r16.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r15.xyz, r0.wwww, r18.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r12.xyz, r14.xyzx, r12.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r12.xyz, r15.xyzx, r12.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r12.xyz, r13.xyzx, r12.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r0.w, r17.xyzx, r10.xyzx
    max r0.w, r0.w, l(0.000000)  // fEdge<0:NaN:Inf>
    lt r0.w, r0.w, l(0.700000)
    lt r1.z, l(2.000000), r1.z
    and r0.w, r0.w, r1.z
    if_nz r0.w

#line 205
      mul r10.xyz, r15.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r10.xyz, r10.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r8.xyz, r8.xyzx, r10.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 210
      mul r8.xyz, r8.xyzx, r12.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 489 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r8.xyz, r8.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 480
  endif 

#line 495
  add r7.xyz, r7.xyzx, r8.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 469
  iadd r0.z, r0.z, l(1)  // i<0>
endloop 

#line 500
mul r0.xyz, r7.xyzx, l(180.000000, 180.000000, 180.000000, 0.000000)  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 507
ine r0.w, l(0, 0, 0, 0), cb5[4].y
if_nz r0.w

#line 511
  ine r0.w, l(0, 0, 0, 0), cb5[7].y
  if_nz r0.w
    mov r2.xyz, r5.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 515
    ine r0.w, l(0, 0, 0, 0), cb5[5].y
    if_nz r0.w
      mov r3.xyz, -r5.xyzx
      add r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r2.xyz, r3.xyzx, r6.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 518
      sample_indexable(texture2d)(float,float,float,float) r3.xyz, r1.xyxx, t16.xyzw, s0
      mov r7.xyz, -r5.xyzx
      add r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r2.xyz, r3.xyzx, r7.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 515
    endif 

#line 511
  endif 

#line 507
else 

#line 522
  mov r2.xyz, l(0,0,0,0)  // f4Glow<0: 0f,1: 0f,2: 0f>

#line 507
endif 

#line 526
mul r2.xyz, r2.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000)
add r0.xyz, r0.xyzx, r2.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 530
ine r0.w, l(0, 0, 0, 0), cb5[7].x
if_nz r0.w

#line 533
  mul r2.xyz, r6.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r0.xyz, r0.xyzx, r2.xyzx
  add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r0.w, l(1.000000)  // f4ColorOut<3: 1f>

#line 530
else 

#line 539
  mov r0.w, l(1.000000)  // f4ColorOut<3: 1f>
  mov r0.xyz, r6.xyzx  // f4ColorOut<0:Inf,1:Inf,2:Inf>

#line 530
endif 

#line 543
ine r1.z, l(0, 0, 0, 0), cb5[4].z
if_nz r1.z
  ine r1.z, l(0, 0, 0, 0), cb5[6].z
  if_nz r1.z
    mov r6.x, l(1.000000)  // f4ReflectionTexture<0: 1f>
    mov r6.y, l(1.000000)  // f4ReflectionTexture<1: 1f>
    mov r6.z, l(1.000000)  // f4ReflectionTexture<2: 1f>
  else 
    ine r1.z, l(0, 0, 0, 0), cb5[5].z
    if_nz r1.z
      mov r6.x, r6.x  // f4ReflectionTexture<0:Inf>
      mov r6.y, r6.y  // f4ReflectionTexture<1:Inf>
      mov r6.z, r6.z  // f4ReflectionTexture<2:Inf>
    else 

#line 550
      sample_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyxx, t17.xyzw, s0  // f4ReflectionTexture<0:Inf,1:Inf,2:Inf,3:Inf>

#line 547
    endif 
  endif 
else 

#line 554
  mov r6.x, l(0)  // f4ReflectionTexture<0: 0f>
  mov r6.y, l(0)  // f4ReflectionTexture<1: 0f>
  mov r6.z, l(0)  // f4ReflectionTexture<2: 0f>

#line 543
endif 

#line 560
ine r1.x, l(0, 0, 0, 0), cb5[7].w
if_nz r1.x
  mov r1.xyz, -r9.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r2.x, r1.xyzx, r4.xyzx
  add r2.y, r2.x, r2.x
  mov r2.y, -r2.y
  mul r2.yzw, r2.yyyy, r4.xxyz
  add r2.yzw, r1.xxyz, r2.yyzw  // f3Reflection<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r3.x, r2.x, r2.x
  mov r3.x, -r3.x
  add r3.x, r3.x, l(1.000000)
  mul r3.x, r3.x, l(0.902500)
  mov r3.x, -r3.x
  add r3.x, r3.x, l(1.000000)
  sqrt r3.y, r3.x
  mul r2.x, r2.x, l(0.950000)
  add r2.x, r3.y, r2.x
  ge r3.x, r3.x, l(0.000000)
  mul r1.xyz, r1.xyzx, l(0.950000, 0.950000, 0.950000, 0.000000)
  mul r3.yzw, r4.xxyz, r2.xxxx
  mov r3.yzw, -r3.yyzw
  add r1.xyz, r1.xyzx, r3.yzwy
  movc r1.xyz, r3.xxxx, r1.xyzx, l(0,0,0,0)  // f3Refraction<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 
  mov r1.xyz, r1.xyzx  // f3<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 201
  ge r2.x, r1.z, l(0.000000)
  ge r3.x, r1.x, l(0.000000)
  and r3.y, r2.x, r3.x
  if_nz r3.y
    div r3.y, r1.x, r1.z
    mov r3.z, -r3.y
    max r3.z, r3.z, r3.y
    min r3.w, r3.z, l(1.000000)
    max r4.w, r3.z, l(1.000000)
    div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
    mul r3.w, r3.w, r4.w
    mul r4.w, r3.w, r3.w
    mul r5.x, r4.w, l(0.020835)
    add r5.x, r5.x, l(-0.085133)
    mul r5.x, r4.w, r5.x
    add r5.x, r5.x, l(0.180141)
    mul r5.x, r4.w, r5.x
    add r5.x, r5.x, l(-0.330299)
    mul r4.w, r4.w, r5.x
    add r4.w, r4.w, l(0.999866)
    mul r3.w, r3.w, r4.w
    lt r3.z, l(1.000000), r3.z
    mul r4.w, r3.w, l(-2.000000)
    add r4.w, r4.w, l(1.570796)
    and r3.z, r3.z, r4.w
    add r3.z, r3.w, r3.z
    add r3.z, r3.z, l(0.000000)
    min r3.y, r3.y, l(1.000000)
    mov r3.w, -r3.y
    lt r3.y, r3.y, r3.w
    and r3.y, r3.y, l(-1)
    mov r3.w, -r3.z
    movc r3.y, r3.y, r3.w, r3.z  // phi<0:NaN>
  else 
    mov r3.y, l(0)  // phi<0: 0f>
  endif 

#line 205
  lt r3.z, r1.z, l(0.000000)
  and r3.x, r3.x, r3.z
  if_nz r3.x
    div r3.x, r1.x, r1.z
    mov r3.w, -r3.x
    max r3.w, r3.w, r3.x
    min r4.w, r3.w, l(1.000000)
    max r5.x, r3.w, l(1.000000)
    div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r5.x
    mul r4.w, r4.w, r5.x
    mul r5.x, r4.w, r4.w
    mul r5.y, r5.x, l(0.020835)
    add r5.y, r5.y, l(-0.085133)
    mul r5.y, r5.y, r5.x
    add r5.y, r5.y, l(0.180141)
    mul r5.y, r5.y, r5.x
    add r5.y, r5.y, l(-0.330299)
    mul r5.x, r5.y, r5.x
    add r5.x, r5.x, l(0.999866)
    mul r4.w, r4.w, r5.x
    lt r3.w, l(1.000000), r3.w
    mul r5.x, r4.w, l(-2.000000)
    add r5.x, r5.x, l(1.570796)
    and r3.w, r3.w, r5.x
    add r3.w, r4.w, r3.w
    add r3.w, r3.w, l(0.000000)
    min r3.x, r3.x, l(1.000000)
    mov r4.w, -r3.x
    lt r3.x, r3.x, r4.w
    and r3.x, r3.x, l(-1)
    mov r4.w, -r3.w
    movc r3.x, r3.x, r4.w, r3.w  // phi<0:NaN>
    add r3.y, r3.x, l(3.141593)  // phi<0:NaN>

#line 205
  endif 

#line 210
  lt r3.x, r1.x, l(0.000000)
  and r3.z, r3.x, r3.z
  if_nz r3.z
    div r3.z, r1.x, r1.z
    mov r3.w, -r3.z
    max r3.w, r3.w, r3.z
    min r4.w, r3.w, l(1.000000)
    max r5.x, r3.w, l(1.000000)
    div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r5.x
    mul r4.w, r4.w, r5.x
    mul r5.x, r4.w, r4.w
    mul r5.y, r5.x, l(0.020835)
    add r5.y, r5.y, l(-0.085133)
    mul r5.y, r5.y, r5.x
    add r5.y, r5.y, l(0.180141)
    mul r5.y, r5.y, r5.x
    add r5.y, r5.y, l(-0.330299)
    mul r5.x, r5.y, r5.x
    add r5.x, r5.x, l(0.999866)
    mul r4.w, r4.w, r5.x
    lt r3.w, l(1.000000), r3.w
    mul r5.x, r4.w, l(-2.000000)
    add r5.x, r5.x, l(1.570796)
    and r3.w, r3.w, r5.x
    add r3.w, r4.w, r3.w
    add r3.w, r3.w, l(0.000000)
    min r3.z, r3.z, l(1.000000)
    mov r4.w, -r3.z
    lt r3.z, r3.z, r4.w
    and r3.z, r3.z, l(-1)
    mov r4.w, -r3.w
    movc r3.z, r3.z, r4.w, r3.w  // phi<0:NaN>
    add r3.y, r3.z, l(3.141593)  // phi<0:NaN>

#line 210
  endif 

#line 215
  and r2.x, r2.x, r3.x
  if_nz r2.x
    div r1.x, r1.x, r1.z
    mov r1.z, -r1.x
    max r1.z, r1.z, r1.x
    min r2.x, r1.z, l(1.000000)
    max r3.x, r1.z, l(1.000000)
    div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
    mul r2.x, r2.x, r3.x
    mul r3.x, r2.x, r2.x
    mul r3.z, r3.x, l(0.020835)
    add r3.z, r3.z, l(-0.085133)
    mul r3.z, r3.z, r3.x
    add r3.z, r3.z, l(0.180141)
    mul r3.z, r3.z, r3.x
    add r3.z, r3.z, l(-0.330299)
    mul r3.x, r3.z, r3.x
    add r3.x, r3.x, l(0.999866)
    mul r2.x, r2.x, r3.x
    lt r1.z, l(1.000000), r1.z
    mul r3.x, r2.x, l(-2.000000)
    add r3.x, r3.x, l(1.570796)
    and r1.z, r1.z, r3.x
    add r1.z, r2.x, r1.z
    add r1.z, r1.z, l(0.000000)
    min r1.x, r1.x, l(1.000000)
    mov r2.x, -r1.x
    lt r1.x, r1.x, r2.x
    and r1.x, r1.x, l(-1)
    mov r2.x, -r1.z
    movc r1.x, r1.x, r2.x, r1.z  // phi<0:NaN>
    add r3.y, r1.x, l(6.283185)  // phi<0:NaN>

#line 215
  endif 

#line 220
  div r3.x, r3.y, l(6.283185)  // phi<0:NaN>
  mov r1.x, -r1.y
  max r1.z, r1.x, r1.y
  mov r2.x, -r1.z
  add r2.x, r2.x, l(1.000000)
  sqrt r2.x, r2.x
  mul r3.z, r1.z, l(-0.018729)
  add r3.z, r3.z, l(0.074261)
  mul r3.z, r1.z, r3.z
  add r3.z, r3.z, l(-0.212114)
  mul r1.z, r1.z, r3.z
  add r1.z, r1.z, l(1.570729)
  mul r1.z, r2.x, r1.z
  mul r2.x, r1.z, l(-2.000000)
  add r2.x, r2.x, l(3.141593)
  lt r1.x, r1.y, r1.x
  and r1.x, r1.x, r2.x
  add r1.x, r1.x, r1.z  // theta<0:NaN:Inf>
  div r3.y, r1.x, l(3.141593)  // theta<0:NaN:Inf>
  mov r3.x, r3.x  // SphericalMapping<0:NaN>
  mov r3.y, r3.y  // SphericalMapping<1:NaN:Inf>

#line 566
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.xyxx, t19.xyzw, s0  // f4RefrColor<0:Inf,1:Inf,2:Inf,3:Inf>
  nop 
  mov r2.yzw, r2.yyzw  // f3<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 201
  ge r1.x, r2.w, l(0.000000)
  ge r1.y, r2.y, l(0.000000)
  and r1.z, r1.y, r1.x
  if_nz r1.z
    div r1.z, r2.y, r2.w
    mov r2.x, -r1.z
    max r2.x, r1.z, r2.x
    min r4.w, r2.x, l(1.000000)
    max r5.x, r2.x, l(1.000000)
    div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r5.x
    mul r4.w, r4.w, r5.x
    mul r5.x, r4.w, r4.w
    mul r5.y, r5.x, l(0.020835)
    add r5.y, r5.y, l(-0.085133)
    mul r5.y, r5.y, r5.x
    add r5.y, r5.y, l(0.180141)
    mul r5.y, r5.y, r5.x
    add r5.y, r5.y, l(-0.330299)
    mul r5.x, r5.y, r5.x
    add r5.x, r5.x, l(0.999866)
    mul r4.w, r4.w, r5.x
    lt r2.x, l(1.000000), r2.x
    mul r5.x, r4.w, l(-2.000000)
    add r5.x, r5.x, l(1.570796)
    and r2.x, r2.x, r5.x
    add r2.x, r4.w, r2.x
    add r2.x, r2.x, l(0.000000)
    min r1.z, r1.z, l(1.000000)
    mov r4.w, -r1.z
    lt r1.z, r1.z, r4.w
    and r1.z, r1.z, l(-1)
    mov r4.w, -r2.x
    movc r1.z, r1.z, r4.w, r2.x  // phi<0:NaN>
  else 
    mov r1.z, l(0)  // phi<0: 0f>
  endif 

#line 205
  lt r2.x, r2.w, l(0.000000)
  and r1.y, r1.y, r2.x
  if_nz r1.y
    div r1.y, r2.y, r2.w
    mov r4.w, -r1.y
    max r4.w, r1.y, r4.w
    min r5.x, r4.w, l(1.000000)
    max r5.y, r4.w, l(1.000000)
    div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
    mul r5.x, r5.y, r5.x
    mul r5.y, r5.x, r5.x
    mul r5.z, r5.y, l(0.020835)
    add r5.z, r5.z, l(-0.085133)
    mul r5.z, r5.z, r5.y
    add r5.z, r5.z, l(0.180141)
    mul r5.z, r5.z, r5.y
    add r5.z, r5.z, l(-0.330299)
    mul r5.y, r5.z, r5.y
    add r5.y, r5.y, l(0.999866)
    mul r5.x, r5.y, r5.x
    lt r4.w, l(1.000000), r4.w
    mul r5.y, r5.x, l(-2.000000)
    add r5.y, r5.y, l(1.570796)
    and r4.w, r4.w, r5.y
    add r4.w, r5.x, r4.w
    add r4.w, r4.w, l(0.000000)
    min r1.y, r1.y, l(1.000000)
    mov r5.x, -r1.y
    lt r1.y, r1.y, r5.x
    and r1.y, r1.y, l(-1)
    mov r5.x, -r4.w
    movc r1.y, r1.y, r5.x, r4.w  // phi<0:NaN>
    add r1.z, r1.y, l(3.141593)  // phi<0:NaN>

#line 205
  endif 

#line 210
  lt r1.y, r2.y, l(0.000000)
  and r2.x, r1.y, r2.x
  if_nz r2.x
    div r2.x, r2.y, r2.w
    mov r4.w, -r2.x
    max r4.w, r2.x, r4.w
    min r5.x, r4.w, l(1.000000)
    max r5.y, r4.w, l(1.000000)
    div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
    mul r5.x, r5.y, r5.x
    mul r5.y, r5.x, r5.x
    mul r5.z, r5.y, l(0.020835)
    add r5.z, r5.z, l(-0.085133)
    mul r5.z, r5.z, r5.y
    add r5.z, r5.z, l(0.180141)
    mul r5.z, r5.z, r5.y
    add r5.z, r5.z, l(-0.330299)
    mul r5.y, r5.z, r5.y
    add r5.y, r5.y, l(0.999866)
    mul r5.x, r5.y, r5.x
    lt r4.w, l(1.000000), r4.w
    mul r5.y, r5.x, l(-2.000000)
    add r5.y, r5.y, l(1.570796)
    and r4.w, r4.w, r5.y
    add r4.w, r5.x, r4.w
    add r4.w, r4.w, l(0.000000)
    min r2.x, r2.x, l(1.000000)
    mov r5.x, -r2.x
    lt r2.x, r2.x, r5.x
    and r2.x, r2.x, l(-1)
    mov r5.x, -r4.w
    movc r2.x, r2.x, r5.x, r4.w  // phi<0:NaN>
    add r1.z, r2.x, l(3.141593)  // phi<0:NaN>

#line 210
  endif 

#line 215
  and r1.x, r1.y, r1.x
  if_nz r1.x
    div r1.x, r2.y, r2.w
    mov r1.y, -r1.x
    max r1.y, r1.y, r1.x
    min r2.x, r1.y, l(1.000000)
    max r2.y, r1.y, l(1.000000)
    div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
    mul r2.x, r2.y, r2.x
    mul r2.y, r2.x, r2.x
    mul r2.w, r2.y, l(0.020835)
    add r2.w, r2.w, l(-0.085133)
    mul r2.w, r2.w, r2.y
    add r2.w, r2.w, l(0.180141)
    mul r2.w, r2.w, r2.y
    add r2.w, r2.w, l(-0.330299)
    mul r2.y, r2.w, r2.y
    add r2.y, r2.y, l(0.999866)
    mul r2.x, r2.y, r2.x
    lt r1.y, l(1.000000), r1.y
    mul r2.y, r2.x, l(-2.000000)
    add r2.y, r2.y, l(1.570796)
    and r1.y, r1.y, r2.y
    add r1.y, r2.x, r1.y
    add r1.y, r1.y, l(0.000000)
    min r1.x, r1.x, l(1.000000)
    mov r2.x, -r1.x
    lt r1.x, r1.x, r2.x
    and r1.x, r1.x, l(-1)
    mov r2.x, -r1.y
    movc r1.x, r1.x, r2.x, r1.y  // phi<0:NaN>
    add r1.z, r1.x, l(6.283185)  // phi<0:NaN>

#line 215
  endif 

#line 220
  div r1.x, r1.z, l(6.283185)  // phi<0:NaN>
  mov r1.z, -r2.z
  max r2.x, r1.z, r2.z
  mov r2.y, -r2.x
  add r2.y, r2.y, l(1.000000)
  sqrt r2.y, r2.y
  mul r2.w, r2.x, l(-0.018729)
  add r2.w, r2.w, l(0.074261)
  mul r2.w, r2.x, r2.w
  add r2.w, r2.w, l(-0.212114)
  mul r2.x, r2.x, r2.w
  add r2.x, r2.x, l(1.570729)
  mul r2.x, r2.y, r2.x
  mul r2.y, r2.x, l(-2.000000)
  add r2.y, r2.y, l(3.141593)
  lt r1.z, r2.z, r1.z
  and r1.z, r1.z, r2.y
  add r1.z, r1.z, r2.x  // theta<0:NaN:Inf>
  div r1.y, r1.z, l(3.141593)  // theta<0:NaN:Inf>
  mov r1.x, r1.x  // SphericalMapping<0:NaN>
  mov r1.y, r1.y  // SphericalMapping<1:NaN:Inf>

#line 567
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyxx, t19.xyzw, s0  // f4ReflColor<0:Inf,1:Inf,2:Inf,3:Inf>

#line 570
  mul r3.xyzw, r6.xxxx, r3.xyzw
  mul r2.xyzw, r6.yyyy, r2.xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r3.xyzw, r0.xyzw, r6.zzzz
  add r2.xyzw, r2.xyzw, r3.xyzw
  div r2.xyzw, r2.xyzw, cb5[2].wwww
  dp3 r1.x, r0.xyzx, r0.xyzx
  sqrt r1.x, r1.x
  mul r1.x, r1.x, r1.x
  mul r2.xyzw, r1.xxxx, r2.xyzw
  add r0.xyzw, r0.xyzw, r2.xyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>

#line 560
else 
  mov r0.w, l(1.000000)  // f4ColorOut<3: 1f>
endif 

#line 576
ine r1.x, l(0, 0, 0, 0), cb6[6].y
if_nz r1.x
  mul r0.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
endif 

#line 581
ine r1.x, l(0, 0, 0, 0), cb6[6].w
if_nz r1.x
  dp3 r1.x, r9.xyzx, r4.xyzx
  max r1.x, r1.x, l(0.000000)  // fEdge<0:NaN:Inf>
  lt r1.x, r1.x, cb6[0].w
  if_nz r1.x
    mov r0.xyz, cb6[0].xyzx  // f4ColorOut<0,1,2>
  endif 

#line 581
endif 

#line 593
ine r1.x, l(0, 0, 0, 0), cb6[7].z
if_nz r1.x
  sqrt r1.x, r1.w
  div r1.x, r1.x, cb6[1].w
  max r1.x, r1.x, l(0.000000)
  min r1.x, r1.x, l(1.000000)
  add r0.xyz, r0.xyzx, r1.xxxx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 601
ine r1.x, l(0, 0, 0, 0), cb6[6].x
if_nz r1.x
  dp4 r1.x, r0.xyzw, cb6[2].xyzw  // f4ColorOut<0:NaN:Inf>
  dp4 r1.y, r0.xyzw, cb6[3].xyzw  // f4ColorOut<1:NaN:Inf>
  dp4 r1.z, r0.xyzw, cb6[4].xyzw  // f4ColorOut<2:NaN:Inf>
  dp4 r1.w, r0.xyzw, cb6[5].xyzw  // f4ColorOut<3:NaN:Inf>
  mov r0.xyzw, r1.xyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
endif 

#line 614
mov o0.xyzw, r0.xyzw  // RenderScenePS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
ret 
// Approximately 2520 instruction slots used
