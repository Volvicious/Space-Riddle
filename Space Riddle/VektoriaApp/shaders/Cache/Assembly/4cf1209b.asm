//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewInv;               // Offset:   64 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:  128 Size:    64 [unused]
//   float4x4 g_mProjectionInv;         // Offset:  192 Size:    64
//   float4x4 g_mProjectionInvViewport; // Offset:  256 Size:    64 [unused]
//   float4 g_f4AmbientColorUp;         // Offset:  320 Size:    16
//   float4 g_f4AmbientColorDown;       // Offset:  336 Size:    16
//   float3 g_f3CameraPos;              // Offset:  352 Size:    12
//   float g_fAlphaTest;                // Offset:  364 Size:     4 [unused]
//   uint g_uNumLights;                 // Offset:  368 Size:     4 [unused]
//   uint g_uNumSpotLights;             // Offset:  372 Size:     4 [unused]
//   uint g_uWindowWidth;               // Offset:  376 Size:     4 [unused]
//   uint g_uWindowHeight;              // Offset:  380 Size:     4 [unused]
//   uint g_uMaxNumLightsPerTile;       // Offset:  384 Size:     4
//   uint g_uMaxNumElementsPerTile;     // Offset:  388 Size:     4
//   uint g_uNumTilesX;                 // Offset:  392 Size:     4
//   uint g_uNumTilesY;                 // Offset:  396 Size:     4 [unused]
//   uint g_uMaxVPLs;                   // Offset:  400 Size:     4 [unused]
//   uint g_uMaxNumVPLsPerTile;         // Offset:  404 Size:     4 [unused]
//   uint g_uMaxNumVPLElementsPerTile;  // Offset:  408 Size:     4 [unused]
//   float g_fVPLSpotStrength;          // Offset:  412 Size:     4 [unused]
//   float g_fVPLSpotRadius;            // Offset:  416 Size:     4 [unused]
//   float g_fVPLPointStrength;         // Offset:  420 Size:     4 [unused]
//   float g_fVPLPointRadius;           // Offset:  424 Size:     4 [unused]
//   float g_fVPLRemoveBackFaceContrib; // Offset:  428 Size:     4 [unused]
//   float g_fVPLColorThreshold;        // Offset:  432 Size:     4 [unused]
//   float g_fVPLBrightnessThreshold;   // Offset:  436 Size:     4 [unused]
//   float g_fPerFramePad1;             // Offset:  440 Size:     4 [unused]
//   float g_fPerFramePad2;             // Offset:  444 Size:     4 [unused]
//
// }
//
// cbuffer TexInfo
// {
//
//   float4 f4ColorAmbient;             // Offset:    0 Size:    16 [unused]
//   float fA;                          // Offset:   16 Size:     4 [unused]
//   float fH;                          // Offset:   20 Size:     4 [unused]
//   float fBumpStrength;               // Offset:   24 Size:     4 [unused]
//   float frTransparency;              // Offset:   28 Size:     4
//   float4 f4ColorSSS;                 // Offset:   32 Size:    16
//   float4 f4SSSBRDFParams;            // Offset:   48 Size:    16
//   uint uImage;                       // Offset:   64 Size:     4 [unused]
//   uint uGlow;                        // Offset:   68 Size:     4 [unused]
//   uint uSpecular;                    // Offset:   72 Size:     4 [unused]
//   uint uBump;                        // Offset:   76 Size:     4
//   uint uImageBlack;                  // Offset:   80 Size:     4 [unused]
//   uint uGlowAsImage;                 // Offset:   84 Size:     4 [unused]
//   uint uSpecularAsImage;             // Offset:   88 Size:     4 [unused]
//   uint uHeightAsImage;               // Offset:   92 Size:     4 [unused]
//   uint uImageWhite;                  // Offset:   96 Size:     4 [unused]
//   uint uGlowWhite;                   // Offset:  100 Size:     4 [unused]
//   uint uSpecularWhite;               // Offset:  104 Size:     4 [unused]
//   uint uHeight;                      // Offset:  108 Size:     4 [unused]
//   uint uShadingOn;                   // Offset:  112 Size:     4 [unused]
//   uint uGlowAsAmbient;               // Offset:  116 Size:     4 [unused]
//   uint uChromaKeying;                // Offset:  120 Size:     4
//   uint uEnvironment;                 // Offset:  124 Size:     4
//   uint uPOM;                         // Offset:  128 Size:     4 [unused]
//   uint uTexBRDF;                     // Offset:  132 Size:     4 [unused]
//   uint uTexSSS;                      // Offset:  136 Size:     4
//   uint uReflectionMap;               // Offset:  140 Size:     4
//   uint uixPos;                       // Offset:  144 Size:     4
//   uint uiyPos;                       // Offset:  148 Size:     4
//   uint uixPics;                      // Offset:  152 Size:     4
//   uint uiyPics;                      // Offset:  156 Size:     4
//   float fRoughness;                  // Offset:  160 Size:     4
//   float fIOR;                        // Offset:  164 Size:     4
//   float fSpecular;                   // Offset:  168 Size:     4
//   float fMetallic;                   // Offset:  172 Size:     4
//   float fSubSurface;                 // Offset:  176 Size:     4
//   float fAnistropic;                 // Offset:  180 Size:     4 [unused]
//   float fSheen;                      // Offset:  184 Size:     4
//   float fSheenTint;                  // Offset:  188 Size:     4 [unused]
//   float fClearCoat;                  // Offset:  192 Size:     4
//   float fClearCoatGloss;             // Offset:  196 Size:     4
//   float fSpecularTint;               // Offset:  200 Size:     4
//   uint uTextureAddressMode;          // Offset:  204 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_Sampler                         sampler      NA          NA    0        1
// g_pointLightCenterAndRadiusBuffer    texture  float4         buf    2        1
// g_pointLightColorBuffer           texture  float4         buf    3        1
// g_perTilePointLightIndexBuffer    texture    uint         buf    4        1
// g_spotLightCenterAndRadiusBuffer    texture  float4         buf    5        1
// g_spotLightColorBuffer            texture  float4         buf    6        1
// g_spotLightParamsBuffer           texture  float4         buf    7        1
// g_perTileSpotLightIndexBuffer     texture    uint         buf    8        1
// tex2D[0]                          texture  float4          2d   15        1
// tex2D[2]                          texture  float4          2d   17        1
// tex2D[3]                          texture  float4          2d   18        1
// tex2D[4]                          texture  float4          2d   19        1
// tex2D[6]                          texture  float4          2d   21        1
// cbPerFrame                        cbuffer      NA          NA    2        1
// TexInfo                           cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyz 
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TEXCOORD                 0   xyz         2     NONE  float   xyz 
// TEXCOORD                 1   xy          3     NONE  float   xy  
// TANGENT                  0   xyz         4     NONE  float   xyz 
// BITANGENT                0   xyz         5     NONE  float   xyz 
// TEXCOORD                 2   xyz         6     NONE  float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[25], immediateIndexed
dcl_constantbuffer cb5[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_buffer (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (float,float,float,float) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t21
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 31

#line 192 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
mov r0.xyz, v2.xyzx  // f3VertexPos<0,1,2>
mov r1.xyz, l(0,0,0,0)  // f3AccumDiffuseFront<0: -0f,1: -0f,2: -0f>

#line 200
ult r0.w, l(1), cb5[9].y
ult r1.w, l(1), cb5[9].w
or r0.w, r0.w, r1.w
if_nz r0.w
  utof r0.w, cb5[9].x  // fxPic<0:[0f,4.29497e+009f]>
  utof r1.w, cb5[9].y  // fyPic<0:[0f,4.29497e+009f]>
  utof r2.x, cb5[9].z  // fxPics<0:[0f,4.29497e+009f]>
  utof r2.y, cb5[9].w  // fyPics<0:[0f,4.29497e+009f]>
  div r0.w, r0.w, r2.x
  div r2.x, l(1.000000), r2.x
  mul r2.x, r2.x, v3.x
  add r3.x, r0.w, r2.x  // input<10:NaN:Inf>
  div r0.w, r1.w, r2.y
  div r1.w, l(1.000000), r2.y
  mul r1.w, r1.w, v3.y
  add r3.y, r0.w, r1.w  // input<11:NaN:Inf>

#line 200
else 
  mov r3.xy, v3.xyxx  // input<10,11>
endif 

#line 217
ine r0.w, l(0, 0, 0, 0), cb5[4].w
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r2.xy, r3.xyxx, t18.xyzw, s0
  mul r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
  add r2.xy, r2.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // f3BumpNormal<0:Inf,1:Inf>
  mul r2.xzw, r2.xxxx, v4.xxyz
  mov r0.w, -r2.y
  mul r4.xyz, r0.wwww, v5.xyzx
  add r2.xyz, r2.xzwx, r4.xyzx
  add r2.xyz, r2.xyzx, v1.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r0.w, r2.xyzx, r2.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r2.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 217
else 
  mov r2.xyz, v1.xyzx  // input<4,5,6>
endif 

#line 224
mov r2.xyz, r2.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, -r0.xyzx
add r4.xyz, r4.xyzx, cb2[22].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.xyxx, t15.wxyz, s0
mul r6.xyz, r5.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3Color<0:Inf,1:Inf,2:Inf>
mov r6.xyz, r6.xyzx  // f4DiffColorMap<0:Inf,1:Inf,2:Inf>

#line 233
nop 
mov r0.w, cb2[24].x  // uMaxNumLightsPerTile<0>
mov r1.w, cb2[24].y  // uMaxNumElementsPerTile<0>
mov r7.xyz, v0.xyzx  // SVPosition<0,1,2>

#line 122 "constant.h"
nop 
mov r7.xy, r7.xyxx  // ScreenPos<0,1>

#line 112
div r2.w, r7.x, l(32.000000)
round_ni r2.w, r2.w
div r3.z, r7.y, l(32.000000)
round_ni r3.z, r3.z
utof r3.w, cb2[24].z
mul r3.z, r3.w, r3.z
add r2.w, r2.w, r3.z
ftou r2.w, r2.w  // nTileIdx<0>
mov r2.w, r2.w  // GetTileIndex<0>

#line 122
mov r2.w, r2.w  // nTileIndex<0>
imul null, r3.z, r1.w, r2.w  // nStartIndex<0>

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r3.w, r3.zzzz, t4.yzwx
mov r3.w, r3.w  // uHalfZBitsHigh<0>
imad r4.w, r1.w, r2.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r4.wwww, t4.yzwx
mov r6.w, r6.w  // uHalfZBitsLow<0>
ishl r3.w, r3.w, l(16)
or r3.w, r6.w, r3.w  // uHalfZBits<0>
mov r3.w, r3.w  // fHalfZ<0:NaN:Inf>
nop 
mov r7.z, r7.z  // z<0>

#line 105
mul r6.w, r7.z, cb2[15].z
add r6.w, r6.w, cb2[15].w
div r6.w, l(1.000000), r6.w  // z<0:Inf>
mov r6.w, r6.w  // ConvertProjDepthToView<0:Inf>

#line 131
mov r6.w, r6.w  // fViewPosZ<0:Inf>
lt r3.w, r6.w, r3.w
imad r7.x, r1.w, r2.w, l(4)
iadd r0.w, r7.x, r0.w
movc r7.y, r3.w, r7.x, r0.w  // uFirstLightIndex<0>
imad r7.z, r1.w, r2.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r7.zzzz, t4.yzwx
imad r1.w, r1.w, r2.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r2.w, r1.wwww, t4.yzwx
movc r2.w, r3.w, r7.w, r2.w  // uNumLights<0>

#line 233 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
mov r7.y, r7.y  // uStartIndex<0>
mov r2.w, r2.w  // uLightCount<0>

#line 237
mov r7.y, r7.y  // i<0>

#line 246
mov r3.xy, r3.xyxx  // f2TexCoord<0:NaN:Inf,1:NaN:Inf>

#line 65
sample_indexable(texture2d)(float,float,float,float) r8.xyz, r3.xyxx, t17.xyzw, s0  // f2LeanB<0:Inf,1:Inf>

#line 264
sample_indexable(texture2d)(float,float,float,float) r9.xyz, r3.xyxx, t21.xyzw, s0

#line 237
mov r10.xyz, r1.xyzx  // f3AccumDiffuseFront<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r11.xyz, r1.xyzx  // f3AccumDiffuseBack<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.w, r7.y  // i<0>
loop 
  iadd r7.w, r7.y, r2.w
  ult r7.w, r3.w, r7.w
  breakc_z r7.w
  ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r3.wwww, t4.yzwx
  mov r7.w, r7.w  // uLightIndex<0>

#line 246
  nop 
  mov r7.w, r7.w  // uLightIndex<0>
  mov r12.xyz, r0.xyzx  // f3Position<0,1,2>
  mov r13.xyz, r2.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r4.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r6.xyzx  // f4DiffMapColor<0:Inf,1:Inf,2:Inf>

#line 52
  ld_indexable(buffer)(float,float,float,float) r16.xyzw, r7.wwww, t2.wxyz  // f4CenterAndRadius<3:Inf,0:Inf,1:Inf,2:Inf>
  mov r12.xyz, -r12.xyzx
  add r16.yzw, r12.xxyz, r16.yyzw  // f3ToLight<0:Inf,1:Inf,2:Inf>
  dp3 r8.w, r16.yzwy, r16.yzwy
  sqrt r8.w, r8.w  // fLightDistance<0:NaN:Inf>

#line 63
  mov r16.x, r16.x  // fRad<0:Inf>
  mov r17.xy, r8.xyxx  // f2LeanB<0:Inf,1:Inf>
  mov r18.xyz, r8.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 69
  lt r9.w, r8.w, r16.x
  if_nz r9.w
    div r9.w, r8.w, r16.x  // fx<0:NaN:Inf>
    mul r9.w, r9.w, r9.w
    mul r9.w, r9.w, r9.w
    mul r9.w, r9.w, l(1.000000)
    mov r9.w, -r9.w
    add r9.w, r9.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    mul r9.w, r9.w, l(1.000000)
    max r9.w, r9.w, l(0.000000)
    min r9.w, r9.w, l(1.000000)
    mul r8.w, r8.w, r8.w
    add r8.w, r8.w, l(1.000000)
    div r8.w, r9.w, r8.w  // fFallOff<0:NaN>
    ld_indexable(buffer)(float,float,float,float) r19.xyz, r7.wwww, t3.xyzw  // f3LightColor<0:Inf,1:Inf,2:Inf>

#line 78
    mul r19.xyz, r19.xyzx, l(100.000000, 100.000000, 100.000000, 0.000000)
    nop 
    mov r16.yzw, r16.yyzw  // f3L<0:Inf,1:Inf,2:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r20.xyz, r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r9.w, cb5[10].x  // fRoughness<0>
    mov r10.w, cb5[10].y  // fF0<0>
    mov r15.xyz, r15.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>
    mov r17.xy, r17.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r18.xyz, r18.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 161 "ggxlighting.h"
    dp3 r11.w, r20.xyzx, r20.xyzx
    rsq r11.w, r11.w
    mul r20.xyz, r11.wwww, r20.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r21.xyz, r20.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r22.xyz, r20.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
    mov r22.xyz, -r22.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r22.xyz, r20.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mul r23.xyz, r20.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r23.xyz, r20.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r24.xyz, r20.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r24.xyz, -r24.xyzx
    add r23.xyz, r23.xyzx, r24.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r11.w, r21.xyzx, r21.xyzx
    sqrt r12.w, r11.w
    dp3 r13.w, r22.xyzx, r22.xyzx
    sqrt r14.w, r13.w
    lt r15.w, r14.w, r12.w
    dp3 r16.x, r23.xyzx, r23.xyzx
    sqrt r17.z, r16.x
    lt r17.w, r17.z, r12.w
    or r15.w, r15.w, r17.w
    if_nz r15.w
      rsq r11.w, r11.w
      mul r21.xyz, r11.wwww, r21.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r11.w, r12.w, r14.w
      lt r12.w, r17.z, r14.w
      or r11.w, r11.w, r12.w
      if_nz r11.w
        rsq r11.w, r13.w
        mul r21.xyz, r11.wwww, r22.xyzx  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r11.w, r16.x
        mul r21.xyz, r11.wwww, r23.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r22.xyz, r20.yzxy, r21.zxyz
    mul r23.xyz, r20.zxyz, r21.yzxy
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx
    dp3 r11.w, r22.xyzx, r22.xyzx
    rsq r11.w, r11.w
    mul r22.xyz, r11.wwww, r22.xyzx  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r23.xyz, r14.xyzx, r16.yzwy
    dp3 r11.w, r23.xyzx, r23.xyzx
    rsq r11.w, r11.w
    mul r24.xyz, r11.wwww, r23.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r21.x, r23.xyzx, r21.xyzx
    dp3 r21.y, r23.xyzx, r22.xyzx
    dp3 r21.z, r23.xyzx, r20.xyzx
    dp3 r11.w, r21.xyzx, r21.xyzx
    rsq r11.w, r11.w
    mul r21.xyz, r11.wwww, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 187
    dp3 r11.w, r16.yzwy, r16.yzwy
    sqrt r11.w, r11.w  // f3Llength<0:NaN:Inf>
    dp3 r12.w, r14.xyzx, r14.xyzx
    sqrt r12.w, r12.w  // f3Vlength<0:NaN:Inf>
    dp3 r13.w, r20.xyzx, r16.yzwy  // fDotNL<0:NaN:Inf>
    dp3 r14.w, r20.xyzx, r14.xyzx  // fDotNV<0:NaN:Inf>
    div r13.w, r13.w, r11.w  // fDotNL<0:NaN:Inf>
    div r14.w, r14.w, r12.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r15.w, r20.xyzx, r24.xyzx  // fDotNH<0:NaN:Inf>
    div r22.xyz, r16.yzwy, r11.wwww
    dp3 r16.x, r22.xyzx, r24.xyzx  // fDotLH<0:NaN:Inf>
    nop 
    mov r15.xyz, r15.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>

#line 118
    mov r17.z, -r15.x
    max r15.x, r15.x, r17.z
    log r15.x, r15.x
    mul r15.x, r15.x, l(2.200000)
    exp r22.x, r15.x  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    mov r17.z, -r15.y
    max r15.y, r15.y, r17.z
    log r15.y, r15.y
    mul r15.y, r15.y, l(2.200000)
    exp r22.y, r15.y  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    mov r17.z, -r15.z
    max r15.z, r15.z, r17.z
    log r15.z, r15.z
    mul r15.z, r15.z, l(2.200000)
    exp r22.z, r15.z  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r22.xyz, r22.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r17.z, r22.x, l(0.300000)
    mul r17.w, r22.y, l(0.600000)
    add r17.z, r17.w, r17.z
    mul r17.w, r22.z, l(0.100000)
    add r17.z, r17.w, r17.z  // fCdLum<0:NaN:Inf>

#line 204
    lt r17.w, l(0.000000), r17.z
    div r25.xyz, r22.xyzx, r17.zzzz
    movc r25.xyz, r17.wwww, r25.xyzx, l(1.000000,1.000000,1.000000,0)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r17.z, l(0.080000), cb5[10].z
    add r25.xyz, r25.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r25.xyz, r25.xyzx, cb5[12].zzzz
    add r25.xyz, r25.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r25.xyz, r17.zzzz, r25.xyzx
    mov r26.xyz, -r25.xyzx
    add r26.xyz, r22.xyzx, r26.xyzx
    mul r26.xyz, r26.xyzx, cb5[10].wwww
    add r25.xyz, r25.xyzx, r26.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r13.w, r13.w  // fu<0:NaN:Inf>

#line 41
    mov r17.w, -r13.w
    add r17.w, r17.w, l(1.000000)
    max r17.w, r17.w, l(0.000000)
    min r17.w, r17.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r18.w, r17.w, r17.w  // fm2<0:[0f,1f]>
    mul r18.w, r18.w, r18.w
    mul r17.w, r17.w, r18.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r17.w, r17.w  // fFL<0:[-0f,1f]>
    nop 
    mov r14.w, r14.w  // fu<0:NaN:Inf>

#line 41
    mov r18.w, -r14.w
    add r18.w, r18.w, l(1.000000)
    max r18.w, r18.w, l(0.000000)
    min r18.w, r18.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r19.w, r18.w, r18.w  // fm2<0:[0f,1f]>
    mul r19.w, r19.w, r19.w
    mul r18.w, r18.w, r19.w  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r18.w, r18.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r16.yzw, r16.yyzw  // f3L<0:Inf,1:Inf,2:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r20.xyz, r20.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r9.w, r9.w  // fRoughness<0>

#line 48
    mov r19.w, r9.w  // fSigma<0>

#line 51
    dp3 r20.w, r14.xyzx, r20.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r21.w, r16.yzwy, r20.xyzx  // fLDotN<0:NaN:Inf>
    dp3 r22.w, r16.yzwy, r16.yzwy
    sqrt r22.w, r22.w  // f3Llength<0:NaN:Inf>
    dp3 r23.w, r14.xyzx, r14.xyzx
    sqrt r23.w, r23.w  // f3Vlength<0:NaN:Inf>
    div r20.w, r20.w, r23.w  // fVDotN<0:NaN:Inf>
    div r21.w, r21.w, r22.w  // fLDotN<0:NaN:Inf>
    mov r24.w, -r20.w
    max r25.w, r20.w, r24.w
    mov r26.x, -r25.w
    add r26.x, r26.x, l(1.000000)
    sqrt r26.x, r26.x
    mul r26.y, r25.w, l(-0.018729)
    add r26.y, r26.y, l(0.074261)
    mul r26.y, r25.w, r26.y
    add r26.y, r26.y, l(-0.212114)
    mul r25.w, r25.w, r26.y
    add r25.w, r25.w, l(1.570729)
    mul r25.w, r26.x, r25.w
    mul r26.x, r25.w, l(-2.000000)
    add r26.x, r26.x, l(3.141593)
    lt r24.w, r20.w, r24.w
    and r24.w, r24.w, r26.x
    add r24.w, r24.w, r25.w  // fThetaR<0:NaN:Inf>
    mul r19.w, r19.w, l(3.141593)
    div r19.w, r19.w, l(180.000000)
    mul r19.w, r19.w, r19.w
    mul r19.w, r19.w, l(1.000000)  // fSigma2<0:Inf:[0f,1.#INFf]>

#line 63
    mul r26.xyz, r20.wwww, r20.xyzx
    mov r26.xyz, -r26.xyzx
    add r26.xyz, r14.xyzx, r26.xyzx
    dp3 r20.w, r26.xyzx, r26.xyzx
    rsq r20.w, r20.w
    mul r26.xyz, r20.wwww, r26.xyzx
    mul r27.xyz, r20.xyzx, r21.wwww
    mov r27.xyz, -r27.xyzx
    add r27.xyz, r16.yzwy, r27.xyzx
    dp3 r20.w, r27.xyzx, r27.xyzx
    rsq r20.w, r20.w
    mul r27.xyz, r20.wwww, r27.xyzx
    dp3 r20.w, r26.xyzx, r27.xyzx  // fCosPhiDiff<0:NaN:Inf>
    mov r25.w, -r21.w
    max r26.x, r21.w, r25.w
    mov r26.y, -r26.x
    add r26.y, r26.y, l(1.000000)
    sqrt r26.y, r26.y
    mul r26.z, r26.x, l(-0.018729)
    add r26.z, r26.z, l(0.074261)
    mul r26.z, r26.x, r26.z
    add r26.z, r26.z, l(-0.212114)
    mul r26.x, r26.x, r26.z
    add r26.x, r26.x, l(1.570729)
    mul r26.x, r26.y, r26.x
    mul r26.y, r26.x, l(-2.000000)
    add r26.y, r26.y, l(3.141593)
    lt r21.w, r21.w, r25.w
    and r21.w, r21.w, r26.y
    add r21.w, r21.w, r26.x  // fThetaI<0:NaN:Inf>
    max r25.w, r24.w, r21.w  // fAlpha<0:NaN:Inf>
    min r21.w, r24.w, r21.w  // fBeta<0:NaN:Inf>
    lt r24.w, l(1.570796), r25.w
    if_nz r24.w
      mov r26.x, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r24.w
      mul r24.w, r19.w, l(0.500000)
      add r26.y, r19.w, l(0.330000)
      div r24.w, r24.w, r26.y
      mov r24.w, -r24.w
      add r24.w, r24.w, l(1.000000)  // fC1<0:NaN:Inf>
      mul r26.y, r19.w, l(0.450000)
      add r26.z, r19.w, l(0.090000)
      div r26.y, r26.y, r26.z  // fC2<0:NaN:Inf>
      ge r26.w, r20.w, l(0.000000)
      if_nz r26.w
        sincos r26.w, null, r25.w
        mul r26.w, r26.w, r26.y  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r27.x, null, r25.w
        mul r27.y, r21.w, l(2.000000)
        div r27.y, r27.y, l(3.141593)
        mul r27.z, r27.y, l(1.000000)
        mul r27.y, r27.y, r27.y
        mul r27.y, r27.y, r27.z
        mov r27.y, -r27.y
        add r27.x, r27.y, r27.x
        mul r26.w, r26.y, r27.x  // fC2<0:NaN:Inf>
      endif 
      mul r26.y, r19.w, l(0.125000)
      div r26.y, r26.y, r26.z
      mul r26.z, r25.w, l(4.000000)
      mul r26.z, r21.w, r26.z
      div r26.z, r26.z, l(9.869604)
      mul r26.z, r26.z, r26.z
      mul r26.z, r26.z, l(1.000000)
      mul r26.y, r26.z, r26.y  // fC3<0:NaN:Inf>
      mul r26.z, r20.w, r26.w
      sincos r26.w, null, r21.w
      sincos null, r27.x, r21.w
      div r26.w, r26.w, r27.x
      mul r26.z, r26.w, r26.z
      add r24.w, r24.w, r26.z
      mov r26.z, -r20.w
      max r26.z, r20.w, r26.z
      mov r26.z, -r26.z
      add r26.z, r26.z, l(1.000000)
      mul r26.y, r26.y, r26.z
      add r25.w, r21.w, r25.w
      div r25.w, r25.w, l(2.000000)
      sincos r26.z, null, r25.w
      sincos null, r25.w, r25.w
      div r25.w, r26.z, r25.w
      mul r25.w, r25.w, r26.y
      add r24.w, r24.w, r25.w
      mul r24.w, r24.w, l(0.795775)  // fL1<0:NaN:Inf>
      mul r25.w, r19.w, l(0.338204)
      add r26.y, r19.w, l(0.130000)
      div r25.w, r25.w, r26.y
      mul r26.y, r21.w, l(4.000000)
      mul r21.w, r21.w, r26.y
      mul r20.w, r20.w, r21.w
      div r20.w, r20.w, l(9.869604)
      mov r20.w, -r20.w
      add r20.w, r20.w, l(1.000000)
      mul r20.w, r20.w, r25.w  // fL2<0:NaN:Inf>
      add r26.x, r20.w, r24.w  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r26.x, r26.x  // fFd<0:NaN:Inf>

#line 219
    mul r20.w, r16.x, r16.x
    mul r20.w, r9.w, r20.w  // fFss90<0:NaN:Inf>
    add r20.w, r20.w, l(-1.000000)
    mul r17.w, r17.w, r20.w
    add r17.w, r17.w, l(1.000000)
    mul r18.w, r18.w, r20.w
    add r18.w, r18.w, l(1.000000)
    mul r17.w, r17.w, r18.w  // fFss<0:NaN:Inf>
    add r18.w, r13.w, r14.w
    div r18.w, l(1.000000), r18.w
    add r18.w, r18.w, l(-0.500000)
    mul r17.w, r17.w, r18.w
    add r17.w, r17.w, l(0.500000)
    mul r17.w, r17.w, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r17.xy, r17.xyxx  // f2LeanB<0:Inf,1:Inf>
    mov r18.xyz, r18.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>
    mov r21.xyz, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    mul r17.xy, r17.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000)  // f2B<0:Inf,1:Inf>
    mul r18.xyz, r18.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
    mul r18.xyz, r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3M<0:Inf,1:Inf,2:Inf>
    nop 
    div r18.w, cb5[10].x, l(5.000000)  // fM<0:[-6.80565e+037f,6.80565e+037f]>

#line 123
    mul r18.w, r18.w, r18.w
    div r18.w, l(2.000000), r18.w
    add r18.w, r18.w, l(-2.000000)  // RoughnessToSpecPower<0:Inf:[-2f,1.#INFf]>

#line 143
    div r18.w, l(1.000000), r18.w  // fInvS<0:Inf>
    add r27.xy, r18.wwww, r18.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r28.xy, r17.xyxx, r17.xyxx
    mul r28.z, r17.y, r17.x
    mov r26.yzw, -r28.xxyz
    mov r27.z, r18.z
    add r26.yzw, r26.yyzw, r27.xxyz  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r18.z, r26.z, r26.y
    mul r21.w, r26.w, r26.w
    mov r21.w, -r21.w
    add r18.z, r18.z, r21.w  // fDet<0:NaN:Inf>
    div r21.xy, r21.xyxx, r21.zzzz
    mov r28.xy, -r17.xyxx
    add r21.xy, r21.xyxx, r28.xyxx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r21.w, r21.x, r21.x
    mul r21.w, r26.z, r21.w
    mul r24.w, r21.y, r21.y
    mul r24.w, r26.y, r24.w
    add r21.w, r21.w, r24.w
    mul r21.x, r21.x, l(2.000000)
    mul r21.x, r21.y, r21.x
    mul r21.x, r26.w, r21.x
    mov r21.x, -r21.x
    add r21.x, r21.x, r21.w  // fE<0:NaN:Inf>

#line 152
    lt r21.y, l(0.000000), r21.z
    lt r21.z, l(0.000000), r18.z
    and r21.y, r21.z, r21.y
    if_nz r21.y
      mul r21.x, r21.x, l(-0.500000)
      div r21.x, r21.x, r18.z
      mul r21.x, r21.x, l(1.442695)
      exp r21.x, r21.x
      sqrt r18.z, r18.z
      mul r18.z, r18.z, l(3.141593)
      mul r18.z, r18.z, l(2.000000)
      div r18.z, r21.x, r18.z  // fD<0:NaN:Inf>
    else 
      mov r18.z, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r18.z, r18.z  // LeanMapping<0:NaN:Inf>

#line 229
    mov r18.z, r18.z  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r16.x, r16.x  // fu<0:NaN:Inf>

#line 41
    mov r16.x, -r16.x
    add r16.x, r16.x, l(1.000000)
    max r16.x, r16.x, l(0.000000)
    min r16.x, r16.x, l(1.000000)  // fm<0:[-0f,1f]>
    mul r21.x, r16.x, r16.x  // fm2<0:[0f,1f]>
    mul r21.x, r21.x, r21.x
    mul r16.x, r16.x, r21.x  // SchlickFresnel<0:[-0f,1f]>

#line 232
    mov r16.x, r16.x  // fFH<0:[-0f,1f]>
    mov r21.xyz, -r25.xyzx
    add r21.xyz, r21.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r21.xyz, r16.xxxx, r21.xyzx
    add r21.xyz, r21.xyzx, r25.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    mul r9.w, r9.w, l(0.500000)
    add r9.w, r9.w, l(0.500000)  // fx<0:[-1.70141e+038f,1.70141e+038f]>

#line 86
    mul r9.w, r9.w, r9.w  // Sqr<0:Inf:[0f,1.#INFf]>

#line 234
    mov r9.w, r9.w  // fRoughG<0:Inf:[0f,1.#INFf]>
    nop 
    mov r9.w, r9.w  // fAlphaG<0:Inf:[0f,1.#INFf]>

#line 111
    mul r9.w, r9.w, r9.w  // fa<0:NaN:Inf>
    mul r21.w, r13.w, r13.w  // fb<0:NaN:Inf>
    nop 
    add r24.w, r9.w, r21.w
    mul r25.x, r9.w, r21.w
    mov r25.x, -r25.x
    add r24.w, r24.w, r25.x  // fx<0:NaN:Inf>

#line 86
    mul r24.w, r24.w, r24.w  // Sqr<0:NaN:Inf>

#line 113
    add r24.w, r13.w, r24.w
    div r24.w, l(1.000000), r24.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r25.x, r14.w, r14.w  // fb<0:NaN:Inf>
    nop 
    add r25.y, r9.w, r25.x
    mul r25.z, r9.w, r25.x
    mov r25.z, -r25.z
    add r25.y, r25.z, r25.y  // fx<0:NaN:Inf>

#line 86
    mul r25.y, r25.y, r25.y  // Sqr<0:NaN:Inf>

#line 113
    add r25.y, r14.w, r25.y
    div r25.y, l(1.000000), r25.y  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r24.w, r24.w, r25.y  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r15.w, r15.w  // fDotNH<0:NaN:Inf>
    mul r25.y, l(-0.099000), cb5[12].y
    add r25.y, r25.y, l(0.100000)  // fa<0:[-3.3688e+037f,3.3688e+037f]>

#line 91
    ge r25.z, r25.y, l(1.000000)
    if_nz r25.z
      mov r25.w, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r25.z
      mov r26.y, r25.y  // fa<0:[-3.3688e+037f,1f]>
      mul r26.y, r26.y, r26.y  // fa2<0:Inf:[0f,1.#INFf]>
      add r26.z, r26.y, l(-1.000000)
      mul r26.w, r15.w, r26.z
      mul r15.w, r15.w, r26.w
      add r15.w, r15.w, l(1.000000)  // fT<0:NaN:Inf>
      log r26.y, r26.y
      mul r26.y, r26.y, l(0.693147)
      mul r26.y, r26.y, l(3.141593)
      mul r15.w, r15.w, r26.y
      div r25.w, r26.z, r15.w  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r25.w, r25.w  // fDr<0:NaN:Inf>
    mov r15.w, -r10.w
    add r15.w, r15.w, l(1.000000)
    mul r15.w, r15.w, r16.x
    add r10.w, r10.w, r15.w  // fFr<0:Inf>
    nop 

#line 113
    nop 
    add r15.w, r21.w, l(0.062500)
    mul r21.w, r21.w, l(0.062500)
    mov r21.w, -r21.w
    add r15.w, r15.w, r21.w  // fx<0:NaN:Inf>

#line 86
    mul r15.w, r15.w, r15.w  // Sqr<0:NaN:Inf>

#line 113
    add r15.w, r13.w, r15.w
    div r15.w, l(1.000000), r15.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r21.w, r25.x, l(0.062500)
    mul r25.x, r25.x, l(0.062500)
    mov r25.x, -r25.x
    add r21.w, r21.w, r25.x  // fx<0:NaN:Inf>

#line 86
    mul r21.w, r21.w, r21.w  // Sqr<0:NaN:Inf>

#line 113
    add r21.w, r14.w, r21.w
    div r21.w, l(1.000000), r21.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r15.w, r15.w, r21.w  // fGr<0:NaN:Inf>

#line 254
    lt r13.w, r13.w, l(0.000000)
    if_nz r13.w

#line 258
      mov r26.yzw, -r16.yyzw
      dp3 r21.w, r20.xyzx, r26.yzwy
      max r21.w, r21.w, l(0.000000)
      min r21.w, r21.w, l(1.000000)
      mul r21.w, r21.w, l(1.000000)
      add r21.w, r21.w, l(-1.000000)
      mul r21.w, r21.w, l(-1.000000)
      max r21.w, r21.w, l(0.000000)
      min r21.w, r21.w, l(1.000000)
      mul r25.x, r21.w, l(-2.000000)
      add r25.x, r25.x, l(3.000000)
      mul r21.w, r21.w, r21.w
      mul r21.w, r21.w, r25.x
      max r21.w, r21.w, l(0.000000)
      min r21.w, r21.w, l(1.000000)  // retMul<0:[0f,1f]>
      mul r25.x, r21.w, r21.w
      mul r21.w, r21.w, r25.x
      mov r25.x, -r26.x
      add r25.x, r17.w, r25.x
      mul r25.x, r25.x, cb5[11].x
      add r25.x, r25.x, r26.x
      mul r25.x, r25.x, l(0.318310)
      mul r26.yzw, r22.xxyz, r25.xxxx
      add r26.yzw, r26.yyzw, cb5[11].zzzz
      mov r25.x, -cb5[10].w
      add r25.x, r25.x, l(1.000000)
      mul r26.yzw, r25.xxxx, r26.yyzw
      add r26.yzw, r26.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r26.yzw, r26.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r26.yzw, r21.wwww, r26.yyzw  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r24.w, l(0)  // fGs<0: 0f>
      mov r21.w, l(0)  // fFr<0: 0f>
    else 
      mov r21.w, r10.w  // fFr<0:Inf>
    endif 

#line 263
    if_z r13.w
      lt r13.w, r14.w, l(0.000000)
      if_nz r13.w

#line 267
        mov r29.xyz, -r14.xyzx
        dp3 r14.w, r20.xyzx, r29.xyzx
        add r14.w, r14.w, l(-1.000000)
        mul r14.w, r14.w, l(-1.000000)
        max r14.w, r14.w, l(0.000000)
        min r14.w, r14.w, l(1.000000)
        mul r20.x, r14.w, l(-2.000000)
        add r20.x, r20.x, l(3.000000)
        mul r14.w, r14.w, r14.w
        mul r14.w, r14.w, r20.x
        max r14.w, r14.w, l(0.000000)
        min r14.w, r14.w, l(1.000000)  // retMul<0:[0f,1f]>
        mul r20.x, r14.w, r14.w
        mul r14.w, r14.w, r20.x
        mov r20.x, -r26.x
        add r20.x, r17.w, r20.x
        mul r20.x, r20.x, cb5[11].x
        add r20.x, r20.x, r26.x
        mul r20.x, r20.x, l(0.318310)
        mul r20.xyz, r22.xyzx, r20.xxxx
        add r20.xyz, r20.xyzx, cb5[11].zzzz
        mov r25.x, -cb5[10].w
        add r25.x, r25.x, l(1.000000)
        mul r20.xyz, r20.xyzx, r25.xxxx
        add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r26.yzw, r14.wwww, r20.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r24.w, l(0)  // fGs<0: 0f>
        mov r21.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r13.w
        mov r13.w, -r26.x
        add r13.w, r13.w, r17.w
        mul r13.w, r13.w, cb5[11].x
        add r13.w, r13.w, r26.x
        mul r13.w, r13.w, l(0.318310)
        mul r20.xyz, r22.xyzx, r13.wwww
        add r20.xyz, r20.xyzx, cb5[11].zzzz
        mov r13.w, -cb5[10].w
        add r13.w, r13.w, l(1.000000)
        mul r20.xyz, r13.wwww, r20.xyzx
        mul r21.xyz, r21.xyzx, r24.wwww
        mul r21.xyz, r18.zzzz, r21.xyzx
        add r20.xyz, r20.xyzx, r21.xyzx
        mul r13.w, l(0.250000), cb5[12].x
        mul r13.w, r15.w, r13.w
        mul r13.w, r21.w, r13.w
        mul r13.w, r25.w, r13.w
        add r26.yzw, r13.wwww, r20.xxyz  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 78 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mul r20.xyz, r19.xyzx, r26.yzwy
    mul r20.xyz, r8.wwww, r20.xyzx
    max r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r20.xyz, r20.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3LightColorDiffuseFrontRes<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 81
    nop 
    mov r21.xyz, -r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 161 "ggxlighting.h"
    dp3 r13.w, r21.xyzx, r21.xyzx
    rsq r13.w, r13.w
    mul r21.xyz, r13.wwww, r21.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r22.xyz, r21.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r26.xyz, r21.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
    mov r26.xyz, -r26.xyzx
    add r22.xyz, r22.xyzx, r26.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r26.xyz, r21.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mul r29.xyz, r21.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r29.xyz, -r29.xyzx
    add r26.xyz, r26.xyzx, r29.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r29.xyz, r21.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r30.xyz, r21.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r30.xyz, -r30.xyzx
    add r29.xyz, r29.xyzx, r30.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r13.w, r22.xyzx, r22.xyzx
    sqrt r14.w, r13.w
    dp3 r15.w, r26.xyzx, r26.xyzx
    sqrt r17.w, r15.w
    lt r18.z, r17.w, r14.w
    dp3 r21.w, r29.xyzx, r29.xyzx
    sqrt r24.w, r21.w
    lt r25.x, r24.w, r14.w
    or r18.z, r18.z, r25.x
    if_nz r18.z
      rsq r13.w, r13.w
      mul r22.xyz, r13.wwww, r22.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r13.w, r14.w, r17.w
      lt r14.w, r24.w, r17.w
      or r13.w, r13.w, r14.w
      if_nz r13.w
        rsq r13.w, r15.w
        mul r22.xyz, r13.wwww, r26.xyzx  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r13.w, r21.w
        mul r22.xyz, r13.wwww, r29.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r26.xyz, r21.yzxy, r22.zxyz
    mul r29.xyz, r21.zxyz, r22.yzxy
    mov r29.xyz, -r29.xyzx
    add r26.xyz, r26.xyzx, r29.xyzx
    dp3 r13.w, r26.xyzx, r26.xyzx
    rsq r13.w, r13.w
    mul r26.xyz, r13.wwww, r26.xyzx  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 184
    dp3 r22.x, r23.xyzx, r22.xyzx
    dp3 r22.y, r23.xyzx, r26.xyzx
    dp3 r22.z, r23.xyzx, r21.xyzx
    dp3 r13.w, r22.xyzx, r22.xyzx
    rsq r13.w, r13.w
    mul r22.xyz, r13.wwww, r22.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 190
    dp3 r13.w, r21.xyzx, r16.yzwy  // fDotNL<0:NaN:Inf>
    dp3 r14.w, r21.xyzx, r14.xyzx  // fDotNV<0:NaN:Inf>
    div r11.w, r13.w, r11.w  // fDotNL<0:NaN:Inf>
    div r12.w, r14.w, r12.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r13.w, r21.xyzx, r24.xyzx  // fDotNH<0:NaN:Inf>

#line 200
    nop 

#line 118
    exp r23.x, r15.x  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    exp r23.y, r15.y  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    exp r23.z, r15.z  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r23.xyz, r23.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r14.w, r23.x, l(0.300000)
    mul r15.x, r23.y, l(0.600000)
    add r14.w, r14.w, r15.x
    mul r15.x, r23.z, l(0.100000)
    add r14.w, r14.w, r15.x  // fCdLum<0:NaN:Inf>

#line 204
    lt r15.x, l(0.000000), r14.w
    div r15.yzw, r23.xxyz, r14.wwww
    movc r15.xyz, r15.xxxx, r15.yzwy, l(1.000000,1.000000,1.000000,0)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r15.xyz, r15.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r15.xyz, r15.xyzx, cb5[12].zzzz
    add r15.xyz, r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r15.xyz, r15.xyzx, r17.zzzz
    mov r24.xyz, -r15.xyzx
    add r24.xyz, r23.xyzx, r24.xyzx
    mul r24.xyz, r24.xyzx, cb5[10].wwww
    add r15.xyz, r15.xyzx, r24.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r11.w, r11.w  // fu<0:NaN:Inf>

#line 41
    mov r14.w, -r11.w
    add r14.w, r14.w, l(1.000000)
    max r14.w, r14.w, l(0.000000)
    min r14.w, r14.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r15.w, r14.w, r14.w  // fm2<0:[0f,1f]>
    mul r15.w, r15.w, r15.w
    mul r14.w, r14.w, r15.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r14.w, r14.w  // fFL<0:[-0f,1f]>
    nop 
    mov r12.w, r12.w  // fu<0:NaN:Inf>

#line 41
    mov r15.w, -r12.w
    add r15.w, r15.w, l(1.000000)
    max r15.w, r15.w, l(0.000000)
    min r15.w, r15.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r17.z, r15.w, r15.w  // fm2<0:[0f,1f]>
    mul r17.z, r17.z, r17.z
    mul r15.w, r15.w, r17.z  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r15.w, r15.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r21.xyz, r21.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 51
    dp3 r17.z, r14.xyzx, r21.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r17.w, r16.yzwy, r21.xyzx  // fLDotN<0:NaN:Inf>

#line 57
    div r17.z, r17.z, r23.w  // fVDotN<0:NaN:Inf>
    div r17.w, r17.w, r22.w  // fLDotN<0:NaN:Inf>
    mov r18.z, -r17.z
    max r21.w, r17.z, r18.z
    mov r22.w, -r21.w
    add r22.w, r22.w, l(1.000000)
    sqrt r22.w, r22.w
    mul r23.w, r21.w, l(-0.018729)
    add r23.w, r23.w, l(0.074261)
    mul r23.w, r21.w, r23.w
    add r23.w, r23.w, l(-0.212114)
    mul r21.w, r21.w, r23.w
    add r21.w, r21.w, l(1.570729)
    mul r21.w, r22.w, r21.w
    mul r22.w, r21.w, l(-2.000000)
    add r22.w, r22.w, l(3.141593)
    lt r18.z, r17.z, r18.z
    and r18.z, r18.z, r22.w
    add r18.z, r18.z, r21.w  // fThetaR<0:NaN:Inf>

#line 63
    mul r24.xyz, r17.zzzz, r21.xyzx
    mov r24.xyz, -r24.xyzx
    add r24.xyz, r14.xyzx, r24.xyzx
    dp3 r17.z, r24.xyzx, r24.xyzx
    rsq r17.z, r17.z
    mul r24.xyz, r17.zzzz, r24.xyzx
    mul r26.xyz, r17.wwww, r21.xyzx
    mov r26.xyz, -r26.xyzx
    add r26.xyz, r16.yzwy, r26.xyzx
    dp3 r17.z, r26.xyzx, r26.xyzx
    rsq r17.z, r17.z
    mul r26.xyz, r17.zzzz, r26.xyzx
    dp3 r17.z, r24.xyzx, r26.xyzx  // fCosPhiDiff<0:NaN:Inf>
    mov r21.w, -r17.w
    max r22.w, r17.w, r21.w
    mov r23.w, -r22.w
    add r23.w, r23.w, l(1.000000)
    sqrt r23.w, r23.w
    mul r24.x, r22.w, l(-0.018729)
    add r24.x, r24.x, l(0.074261)
    mul r24.x, r22.w, r24.x
    add r24.x, r24.x, l(-0.212114)
    mul r22.w, r22.w, r24.x
    add r22.w, r22.w, l(1.570729)
    mul r22.w, r23.w, r22.w
    mul r23.w, r22.w, l(-2.000000)
    add r23.w, r23.w, l(3.141593)
    lt r17.w, r17.w, r21.w
    and r17.w, r17.w, r23.w
    add r17.w, r17.w, r22.w  // fThetaI<0:NaN:Inf>
    max r21.w, r18.z, r17.w  // fAlpha<0:NaN:Inf>
    min r17.w, r18.z, r17.w  // fBeta<0:NaN:Inf>
    lt r18.z, l(1.570796), r21.w
    if_nz r18.z
      mov r22.w, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r18.z
      mul r18.z, r19.w, l(0.500000)
      add r23.w, r19.w, l(0.330000)
      div r18.z, r18.z, r23.w
      mov r18.z, -r18.z
      add r18.z, r18.z, l(1.000000)  // fC1<0:NaN:Inf>
      mul r23.w, r19.w, l(0.450000)
      add r24.x, r19.w, l(0.090000)
      div r23.w, r23.w, r24.x  // fC2<0:NaN:Inf>
      ge r24.y, r17.z, l(0.000000)
      if_nz r24.y
        sincos r24.y, null, r21.w
        mul r24.y, r23.w, r24.y  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r24.z, null, r21.w
        mul r24.w, r17.w, l(2.000000)
        div r24.w, r24.w, l(3.141593)
        mul r25.x, r24.w, l(1.000000)
        mul r24.w, r24.w, r24.w
        mul r24.w, r24.w, r25.x
        mov r24.w, -r24.w
        add r24.z, r24.w, r24.z
        mul r24.y, r23.w, r24.z  // fC2<0:NaN:Inf>
      endif 
      mul r23.w, r19.w, l(0.125000)
      div r23.w, r23.w, r24.x
      mul r24.x, r21.w, l(4.000000)
      mul r24.x, r17.w, r24.x
      div r24.x, r24.x, l(9.869604)
      mul r24.x, r24.x, r24.x
      mul r24.x, r24.x, l(1.000000)
      mul r23.w, r23.w, r24.x  // fC3<0:NaN:Inf>
      mul r24.x, r17.z, r24.y
      sincos r24.y, null, r17.w
      sincos null, r24.z, r17.w
      div r24.y, r24.y, r24.z
      mul r24.x, r24.y, r24.x
      add r18.z, r18.z, r24.x
      mov r24.x, -r17.z
      max r24.x, r17.z, r24.x
      mov r24.x, -r24.x
      add r24.x, r24.x, l(1.000000)
      mul r23.w, r23.w, r24.x
      add r21.w, r17.w, r21.w
      div r21.w, r21.w, l(2.000000)
      sincos r24.x, null, r21.w
      sincos null, r21.w, r21.w
      div r21.w, r24.x, r21.w
      mul r21.w, r21.w, r23.w
      add r18.z, r18.z, r21.w
      mul r18.z, r18.z, l(0.795775)  // fL1<0:NaN:Inf>
      mul r21.w, r19.w, l(0.338204)
      add r19.w, r19.w, l(0.130000)
      div r19.w, r21.w, r19.w
      mul r21.w, r17.w, l(4.000000)
      mul r17.w, r17.w, r21.w
      mul r17.z, r17.w, r17.z
      div r17.z, r17.z, l(9.869604)
      mov r17.z, -r17.z
      add r17.z, r17.z, l(1.000000)
      mul r17.z, r17.z, r19.w  // fL2<0:NaN:Inf>
      add r22.w, r17.z, r18.z  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r22.w, r22.w  // fFd<0:NaN:Inf>

#line 220
    mul r14.w, r20.w, r14.w
    add r14.w, r14.w, l(1.000000)
    mul r15.w, r20.w, r15.w
    add r15.w, r15.w, l(1.000000)
    mul r14.w, r14.w, r15.w  // fFss<0:NaN:Inf>
    add r15.w, r11.w, r12.w
    div r15.w, l(1.000000), r15.w
    add r15.w, r15.w, l(-0.500000)
    mul r14.w, r14.w, r15.w
    add r14.w, r14.w, l(0.500000)
    mul r14.w, r14.w, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r22.xyz, r22.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 143
    nop 
    add r27.xy, r18.wwww, r18.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r18.xy, r17.xyxx, r17.xyxx
    mul r18.z, r17.y, r17.x
    mov r17.xyz, -r18.xyzx
    add r17.xyz, r17.xyzx, r27.xyzx  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.w, r17.y, r17.x
    mul r17.w, r17.z, r17.z
    mov r17.w, -r17.w
    add r15.w, r15.w, r17.w  // fDet<0:NaN:Inf>
    div r18.xy, r22.xyxx, r22.zzzz
    add r18.xy, r28.xyxx, r18.xyxx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r17.w, r18.x, r18.x
    mul r17.y, r17.y, r17.w
    mul r17.w, r18.y, r18.y
    mul r17.x, r17.x, r17.w
    add r17.x, r17.x, r17.y
    mul r17.y, r18.x, l(2.000000)
    mul r17.y, r18.y, r17.y
    mul r17.y, r17.z, r17.y
    mov r17.y, -r17.y
    add r17.x, r17.y, r17.x  // fE<0:NaN:Inf>

#line 152
    lt r17.y, l(0.000000), r22.z
    lt r17.z, l(0.000000), r15.w
    and r17.y, r17.z, r17.y
    if_nz r17.y
      mul r17.x, r17.x, l(-0.500000)
      div r17.x, r17.x, r15.w
      mul r17.x, r17.x, l(1.442695)
      exp r17.x, r17.x
      sqrt r15.w, r15.w
      mul r15.w, r15.w, l(3.141593)
      mul r15.w, r15.w, l(2.000000)
      div r15.w, r17.x, r15.w  // fD<0:NaN:Inf>
    else 
      mov r15.w, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r15.w, r15.w  // LeanMapping<0:NaN:Inf>

#line 229
    mov r15.w, r15.w  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r17.xyz, -r15.xyzx
    add r17.xyz, r17.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r17.xyz, r16.xxxx, r17.xyzx
    add r15.xyz, r15.xyzx, r17.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    nop 

#line 112
    mul r16.x, r11.w, r11.w  // fb<0:NaN:Inf>
    nop 
    add r17.x, r9.w, r16.x
    mul r17.y, r9.w, r16.x
    mov r17.y, -r17.y
    add r17.x, r17.y, r17.x  // fx<0:NaN:Inf>

#line 86
    mul r17.x, r17.x, r17.x  // Sqr<0:NaN:Inf>

#line 113
    add r17.x, r11.w, r17.x
    div r17.x, l(1.000000), r17.x  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r17.y, r12.w, r12.w  // fb<0:NaN:Inf>
    nop 
    add r17.z, r9.w, r17.y
    mul r9.w, r9.w, r17.y
    mov r9.w, -r9.w
    add r9.w, r9.w, r17.z  // fx<0:NaN:Inf>

#line 86
    mul r9.w, r9.w, r9.w  // Sqr<0:NaN:Inf>

#line 113
    add r9.w, r9.w, r12.w
    div r9.w, l(1.000000), r9.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r9.w, r9.w, r17.x  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r13.w, r13.w  // fDotNH<0:NaN:Inf>

#line 91
    if_nz r25.z
      mov r17.x, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r25.z
      mul r17.z, r25.y, r25.y  // fa2<0:Inf:[0f,1.#INFf]>
      add r17.w, r17.z, l(-1.000000)
      mul r18.x, r13.w, r17.w
      mul r13.w, r13.w, r18.x
      add r13.w, r13.w, l(1.000000)  // fT<0:NaN:Inf>
      log r17.z, r17.z
      mul r17.z, r17.z, l(0.693147)
      mul r17.z, r17.z, l(3.141593)
      mul r13.w, r13.w, r17.z
      div r17.x, r17.w, r13.w  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r17.x, r17.x  // fDr<0:NaN:Inf>
    nop 

#line 113
    nop 
    add r13.w, r16.x, l(0.062500)
    mul r16.x, r16.x, l(0.062500)
    mov r16.x, -r16.x
    add r13.w, r13.w, r16.x  // fx<0:NaN:Inf>

#line 86
    mul r13.w, r13.w, r13.w  // Sqr<0:NaN:Inf>

#line 113
    add r13.w, r11.w, r13.w
    div r13.w, l(1.000000), r13.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r16.x, r17.y, l(0.062500)
    mul r17.y, r17.y, l(0.062500)
    mov r17.y, -r17.y
    add r16.x, r16.x, r17.y  // fx<0:NaN:Inf>

#line 86
    mul r16.x, r16.x, r16.x  // Sqr<0:NaN:Inf>

#line 113
    add r16.x, r12.w, r16.x
    div r16.x, l(1.000000), r16.x  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r13.w, r13.w, r16.x  // fGr<0:NaN:Inf>

#line 254
    lt r11.w, r11.w, l(0.000000)
    if_nz r11.w

#line 258
      mov r16.xyz, -r16.yzwy
      dp3 r16.x, r21.xyzx, r16.xyzx
      max r16.x, r16.x, l(0.000000)
      min r16.x, r16.x, l(1.000000)
      mul r16.x, r16.x, l(1.000000)
      add r16.x, r16.x, l(-1.000000)
      mul r16.x, r16.x, l(-1.000000)
      max r16.x, r16.x, l(0.000000)
      min r16.x, r16.x, l(1.000000)
      mul r16.y, r16.x, l(-2.000000)
      add r16.y, r16.y, l(3.000000)
      mul r16.x, r16.x, r16.x
      mul r16.x, r16.x, r16.y
      max r16.x, r16.x, l(0.000000)
      min r16.x, r16.x, l(1.000000)  // retMul<0:[0f,1f]>
      mul r16.y, r16.x, r16.x
      mul r16.x, r16.x, r16.y
      mov r16.y, -r22.w
      add r16.y, r14.w, r16.y
      mul r16.y, r16.y, cb5[11].x
      add r16.y, r16.y, r22.w
      mul r16.y, r16.y, l(0.318310)
      mul r16.yzw, r23.xxyz, r16.yyyy
      add r16.yzw, r16.yyzw, cb5[11].zzzz
      mov r17.y, -cb5[10].w
      add r17.y, r17.y, l(1.000000)
      mul r16.yzw, r16.yyzw, r17.yyyy
      add r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r16.xyz, r16.yzwy, r16.xxxx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r9.w, l(0)  // fGs<0: 0f>
      mov r10.w, l(0)  // fFr<0: 0f>
    endif 

#line 263
    if_z r11.w
      lt r11.w, r12.w, l(0.000000)
      if_nz r11.w

#line 267
        mov r14.xyz, -r14.xyzx
        dp3 r12.w, r21.xyzx, r14.xyzx
        add r12.w, r12.w, l(-1.000000)
        mul r12.w, r12.w, l(-1.000000)
        max r12.w, r12.w, l(0.000000)
        min r12.w, r12.w, l(1.000000)
        mul r14.x, r12.w, l(-2.000000)
        add r14.x, r14.x, l(3.000000)
        mul r12.w, r12.w, r12.w
        mul r12.w, r12.w, r14.x
        max r12.w, r12.w, l(0.000000)
        min r12.w, r12.w, l(1.000000)  // retMul<0:[0f,1f]>
        mul r14.x, r12.w, r12.w
        mul r12.w, r12.w, r14.x
        mov r14.x, -r22.w
        add r14.x, r14.x, r14.w
        mul r14.x, r14.x, cb5[11].x
        add r14.x, r14.x, r22.w
        mul r14.x, r14.x, l(0.318310)
        mul r14.xyz, r23.xyzx, r14.xxxx
        add r14.xyz, r14.xyzx, cb5[11].zzzz
        mov r16.w, -cb5[10].w
        add r16.w, r16.w, l(1.000000)
        mul r14.xyz, r14.xyzx, r16.wwww
        add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r16.xyz, r12.wwww, r14.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r9.w, l(0)  // fGs<0: 0f>
        mov r10.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r11.w
        mov r11.w, -r22.w
        add r11.w, r11.w, r14.w
        mul r11.w, r11.w, cb5[11].x
        add r11.w, r11.w, r22.w
        mul r11.w, r11.w, l(0.318310)
        mul r14.xyz, r23.xyzx, r11.wwww
        add r14.xyz, r14.xyzx, cb5[11].zzzz
        mov r11.w, -cb5[10].w
        add r11.w, r11.w, l(1.000000)
        mul r14.xyz, r11.wwww, r14.xyzx
        mul r15.xyz, r15.xyzx, r9.wwww
        mul r15.xyz, r15.wwww, r15.xyzx
        add r14.xyz, r14.xyzx, r15.xyzx
        mul r9.w, l(0.250000), cb5[12].x
        mul r9.w, r13.w, r9.w
        mul r9.w, r10.w, r9.w
        mul r9.w, r17.x, r9.w
        add r16.xyz, r9.wwww, r14.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 81 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mul r14.xyz, r16.xyzx, r19.xyzx
    mul r14.xyz, r8.wwww, r14.xyzx
    max r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r14.xyz, r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3LightColorDiffuseBackRes<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 69
  else 
    mov r20.xyz, l(0,0,0,0)  // f3LightColorDiffuseFrontRes<0: 0f,1: 0f,2: 0f>
    mov r14.xyz, l(0,0,0,0)  // f3LightColorDiffuseBackRes<0: 0f,1: 0f,2: 0f>
  endif 

#line 246
  mov r20.xyz, r20.xyzx  // f3LightColorDiffuseFrontRes<0:NaN,1:NaN,2:NaN>
  mov r14.xyz, r14.xyzx  // f3LightColorDiffuseBackRes<0:NaN,1:NaN,2:NaN>

#line 251
  mov r8.w, -cb5[1].w
  add r8.w, r8.w, l(1.000000)
  mul r8.w, r8.w, l(8.000000)
  mul r15.xyz, r20.xyzx, r8.wwww
  add r15.xyz, r15.xyzx, r20.xyzx  // f3LightColorDiffuseFrontRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r16.xyz, r14.xyzx, r8.wwww
  add r14.xyz, r14.xyzx, r16.xyzx  // f3LightColorDiffuseBackRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
  ine r8.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r8.w
    ld_indexable(buffer)(float,float,float,float) r16.xyz, r7.wwww, t2.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>

#line 261
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r7.wwww, t3.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>
    mov r18.xyz, r5.yzwy  // f4TexColor<0:Inf,1:Inf,2:Inf>
    dp3 r7.w, r9.xyzx, r9.xyzx
    sqrt r7.w, r7.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r16.xyz, r16.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r17.xyz, r17.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r18.xyz, r18.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r7.w, r7.w  // fThickValue<0:NaN:Inf>
    mov r8.w, cb5[3].x  // f4SSSBRDFParams<0>
    mov r19.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r20.xyz, v6.xyzx  // f3CamPos<0,1,2>
    mov r15.xyz, r15.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 158 "constant.h"
    mov r8.w, r8.w  // fMaterialThickness<0>
    mov r19.x, r19.x  // fExtinctionCoefficientRed<0>
    mov r19.y, r19.y  // fExtinctionCoefficientGreen<0>
    mov r19.z, r19.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r18.xyz, r18.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    add r20.xyz, r12.xyzx, r20.xyzx
    dp3 r9.w, r20.xyzx, r20.xyzx
    rsq r9.w, r9.w
    mul r20.xyz, r9.wwww, r20.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r21.xyz, -r20.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, r16.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>

#line 176
    add r22.xyz, r12.xyzx, r16.xyzx
    mov r22.w, l(0)
    dp4 r9.w, r22.xyzw, r22.xyzw
    sqrt r9.w, r9.w
    div r9.w, l(1.000000), r9.w
    mul r9.w, r9.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r21.xyz, r21.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r10.w, r21.xyzx, r13.xyzx  // fProduct<0:NaN:Inf>
    mul r10.w, r10.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r10.w, r10.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r10.w, r10.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r13.xyz, r9.wwww, r10.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r22.xyz, -r2.xyzx
    dp3 r11.w, r22.xyzx, r21.xyzx
    max r11.w, r11.w, l(0.000000)
    mul r22.xyz, r8.wwww, r11.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r11.w, r21.xyzx, r21.xyzx  // fProduct<0:NaN:Inf>
    mul r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r11.w, r11.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r11.w, r8.w, r11.w
    add r21.xyz, r11.wwww, r22.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r22.xyz, r9.wwww, r21.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r23.x, r19.x, r22.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r23.y, r19.y, r22.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r23.z, r19.z, r22.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r22.xyz, r7.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r13.xyz, r18.xyzx, r13.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r13.xyz, r22.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.xyz, r17.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r9.w, r20.xyzx, r2.xyzx
    max r9.w, r9.w, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
    lt r9.w, r9.w, l(0.700000)
    lt r8.w, l(2.000000), r8.w
    and r8.w, r8.w, r9.w
    if_nz r8.w

#line 205
      mul r20.xyz, r22.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r20.xyz, r20.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r15.xyz, r15.xyzx, r20.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 210
      mul r15.xyz, r13.xyzx, r15.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 266 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mov r15.xyz, r15.xyzx  // f3LightColorDiffuseFrontRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 270
    nop 
    mov r14.xyz, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 176 "constant.h"
    add r12.xyz, r12.xyzx, r16.xyzx
    mov r12.w, l(0)
    dp4 r9.w, r12.xyzw, r12.xyzw
    sqrt r9.w, r9.w
    div r9.w, l(1.000000), r9.w
    mul r9.w, r9.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mul r12.xyz, r9.wwww, r10.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 182
    nop 
    mul r13.xyz, r9.wwww, r21.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r16.x, r19.x, r13.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r16.y, r19.y, r13.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r16.z, r19.z, r13.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r13.xyz, r7.wwww, r16.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r12.xyz, r18.xyzx, r12.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r12.xyz, r13.xyzx, r12.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r12.xyz, r17.xyzx, r12.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    if_nz r8.w
      mul r13.xyz, r13.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r14.xyz, r13.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 210
      mul r14.xyz, r12.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 270 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mov r14.xyz, r14.xyzx  // f3LightColorDiffuseBackRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
  endif 

#line 275
  add r10.xyz, r10.xyzx, r15.xyzx  // f3AccumDiffuseFront<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r11.xyz, r11.xyzx, r14.xyzx  // f3AccumDiffuseBack<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 237
  iadd r3.w, r3.w, l(1)  // i<0>
endloop 

#line 285
nop 

#line 122 "constant.h"
nop 

#line 126
ld_indexable(buffer)(uint,uint,uint,uint) r1.x, r3.zzzz, t8.xyzw
mov r1.x, r1.x  // uHalfZBitsHigh<0>
ld_indexable(buffer)(uint,uint,uint,uint) r1.y, r4.wwww, t8.yxzw
mov r1.y, r1.y  // uHalfZBitsLow<0>
ishl r1.x, r1.x, l(16)
or r1.x, r1.y, r1.x  // uHalfZBits<0>
mov r1.x, r1.x  // fHalfZ<0:NaN:Inf>
nop 
lt r1.x, r6.w, r1.x
movc r0.w, r1.x, r7.x, r0.w  // uFirstLightIndex<0>
ld_indexable(buffer)(uint,uint,uint,uint) r1.y, r7.zzzz, t8.yxzw
ld_indexable(buffer)(uint,uint,uint,uint) r1.z, r1.wwww, t8.yzxw
movc r1.x, r1.x, r1.y, r1.z  // uNumLights<0>

#line 285 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
mov r0.w, r0.w  // uStartIndex<0>
mov r1.x, r1.x  // uLightCount<0>

#line 289
mov r0.w, r0.w  // i<0>
mov r1.yzw, r10.xxyz  // f3AccumDiffuseFront<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r7.xyz, r11.xyzx  // f3AccumDiffuseBack<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r0.w  // i<0>
loop 
  iadd r3.z, r0.w, r1.x
  ult r3.z, r2.w, r3.z
  breakc_z r3.z
  ld_indexable(buffer)(uint,uint,uint,uint) r3.z, r2.wwww, t8.yzxw
  mov r3.z, r3.z  // uLightIndex<0>

#line 298
  nop 
  mov r3.z, r3.z  // uLightIndex<0>
  mov r12.xyz, r0.xyzx  // f3Position<0,1,2>
  mov r13.xyz, r2.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r4.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r6.xyzx  // f4DiffMapColor<0:Inf,1:Inf,2:Inf>

#line 99
  ld_indexable(buffer)(float,float,float,float) r16.xyzw, r3.zzzz, t5.xyzw  // f4BoundingSphereAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
  ld_indexable(buffer)(float,float,float,float) r17.xyzw, r3.zzzz, t7.wxyz  // f4SpotParams<3:Inf,0:Inf,1:Inf,2:Inf>

#line 103
  mov r18.xy, r17.yzyy  // f3SpotLightDir<0:Inf,1:Inf>
  mul r3.w, r18.x, r18.x
  mov r3.w, -r3.w
  add r3.w, r3.w, l(1.000000)
  mul r4.w, r18.y, r18.y
  mov r4.w, -r4.w
  add r3.w, r3.w, r4.w
  sqrt r3.w, r3.w  // f3SpotLightDir<2:NaN>
  lt r4.w, l(0.000000), r17.w
  mov r6.w, -r3.w
  movc r18.z, r4.w, r3.w, r6.w  // f3SpotLightDir<2:NaN>
  mul r19.xyz, r16.wwww, r18.xyzx
  mov r19.xyz, -r19.xyzx
  add r16.xyz, r16.xyzx, r19.xyzx  // f3LightPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r12.xyz, -r12.xyzx
  add r16.xyz, r12.xyzx, r16.xyzx  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r3.w, r16.xyzx, r16.xyzx
  rsq r6.w, r3.w
  mul r19.xyz, r6.wwww, r16.xyzx  // f3ToLightNorm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r3.w, r3.w  // fLightDistance<0:NaN:Inf>
  mov r19.xyz, -r19.xyzx
  dp3 r6.w, r19.xyzx, r18.xyzx  // fCosineOfCurrentConeAngle<0:NaN:Inf>

#line 120
  mov r17.x, r17.x  // fRad<0:Inf>
  mov r7.w, -r17.w
  movc r4.w, r4.w, r17.w, r7.w  // fCosineOfConeAngle<0:Inf>
  mov r17.yz, r8.xxyx  // f2LeanB<0:Inf,1:Inf>
  mov r18.xyz, r8.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 127
  lt r7.w, r3.w, r17.x
  lt r8.w, r4.w, r6.w
  and r7.w, r7.w, r8.w
  if_nz r7.w
    mov r4.w, -r4.w
    add r6.w, r4.w, r6.w
    add r4.w, r4.w, l(1.000000)
    div r4.w, r6.w, r4.w  // fRadialAttenuation<0:NaN:Inf>
    mul r4.w, r4.w, r4.w
    max r4.w, r4.w, l(0.000000)
    min r4.w, r4.w, l(1.000000)  // fRadialAttenuation<0:[0f,1f]>
    div r6.w, r3.w, r17.x  // fx<0:NaN:Inf>
    mul r6.w, r6.w, r6.w
    mul r6.w, r6.w, r6.w
    mul r6.w, r6.w, l(1.000000)
    mov r6.w, -r6.w
    add r6.w, r6.w, l(1.000000)
    mul r6.w, r6.w, r6.w
    mul r6.w, r6.w, l(1.000000)
    max r6.w, r6.w, l(0.000000)
    min r6.w, r6.w, l(1.000000)
    mul r3.w, r3.w, r3.w
    add r3.w, r3.w, l(1.000000)
    div r3.w, r6.w, r3.w  // fFallOff<0:NaN>
    ld_indexable(buffer)(float,float,float,float) r19.xyz, r3.zzzz, t6.xyzw  // f3LightColor<0:Inf,1:Inf,2:Inf>

#line 138
    mul r19.xyz, r19.xyzx, l(100.000000, 100.000000, 100.000000, 0.000000)
    nop 
    mov r16.xyz, r16.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r20.xyz, r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r6.w, cb5[10].x  // fRoughness<0>
    mov r7.w, cb5[10].y  // fF0<0>
    mov r15.xyz, r15.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>
    mov r17.yz, r17.yyzy  // f2LeanB<0:Inf,1:Inf>
    mov r18.xyz, r18.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>

#line 161 "ggxlighting.h"
    dp3 r8.w, r20.xyzx, r20.xyzx
    rsq r8.w, r8.w
    mul r20.xyz, r8.wwww, r20.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r21.xyz, r20.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r22.xyz, r20.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
    mov r22.xyz, -r22.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r22.xyz, r20.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mul r23.xyz, r20.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r23.xyz, r20.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r24.xyz, r20.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r24.xyz, -r24.xyzx
    add r23.xyz, r23.xyzx, r24.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r8.w, r21.xyzx, r21.xyzx
    sqrt r9.w, r8.w
    dp3 r10.w, r22.xyzx, r22.xyzx
    sqrt r11.w, r10.w
    lt r12.w, r11.w, r9.w
    dp3 r13.w, r23.xyzx, r23.xyzx
    sqrt r14.w, r13.w
    lt r15.w, r14.w, r9.w
    or r12.w, r12.w, r15.w
    if_nz r12.w
      rsq r8.w, r8.w
      mul r21.xyz, r8.wwww, r21.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r8.w, r9.w, r11.w
      lt r9.w, r14.w, r11.w
      or r8.w, r8.w, r9.w
      if_nz r8.w
        rsq r8.w, r10.w
        mul r21.xyz, r8.wwww, r22.xyzx  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r8.w, r13.w
        mul r21.xyz, r8.wwww, r23.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r22.xyz, r20.yzxy, r21.zxyz
    mul r23.xyz, r20.zxyz, r21.yzxy
    mov r23.xyz, -r23.xyzx
    add r22.xyz, r22.xyzx, r23.xyzx
    dp3 r8.w, r22.xyzx, r22.xyzx
    rsq r8.w, r8.w
    mul r22.xyz, r8.wwww, r22.xyzx  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r23.xyz, r14.xyzx, r16.xyzx
    dp3 r8.w, r23.xyzx, r23.xyzx
    rsq r8.w, r8.w
    mul r24.xyz, r8.wwww, r23.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r21.x, r23.xyzx, r21.xyzx
    dp3 r21.y, r23.xyzx, r22.xyzx
    dp3 r21.z, r23.xyzx, r20.xyzx
    dp3 r8.w, r21.xyzx, r21.xyzx
    rsq r8.w, r8.w
    mul r21.xyz, r8.wwww, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 187
    dp3 r8.w, r16.xyzx, r16.xyzx
    sqrt r8.w, r8.w  // f3Llength<0:NaN:Inf>
    dp3 r9.w, r14.xyzx, r14.xyzx
    sqrt r9.w, r9.w  // f3Vlength<0:NaN:Inf>
    dp3 r10.w, r20.xyzx, r16.xyzx  // fDotNL<0:NaN:Inf>
    dp3 r11.w, r20.xyzx, r14.xyzx  // fDotNV<0:NaN:Inf>
    div r10.w, r10.w, r8.w  // fDotNL<0:NaN:Inf>
    div r11.w, r11.w, r9.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r12.w, r20.xyzx, r24.xyzx  // fDotNH<0:NaN:Inf>
    div r22.xyz, r16.xyzx, r8.wwww
    dp3 r13.w, r22.xyzx, r24.xyzx  // fDotLH<0:NaN:Inf>
    nop 
    mov r15.xyz, r15.xyzx  // f3Color<0:Inf,1:Inf,2:Inf>

#line 118
    mov r14.w, -r15.x
    max r14.w, r14.w, r15.x
    log r14.w, r14.w
    mul r14.w, r14.w, l(2.200000)
    exp r22.x, r14.w  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    mov r15.x, -r15.y
    max r15.x, r15.x, r15.y
    log r15.x, r15.x
    mul r15.x, r15.x, l(2.200000)
    exp r22.y, r15.x  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    mov r15.y, -r15.z
    max r15.y, r15.y, r15.z
    log r15.y, r15.y
    mul r15.y, r15.y, l(2.200000)
    exp r22.z, r15.y  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r22.xyz, r22.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r15.z, r22.x, l(0.300000)
    mul r15.w, r22.y, l(0.600000)
    add r15.z, r15.w, r15.z
    mul r15.w, r22.z, l(0.100000)
    add r15.z, r15.w, r15.z  // fCdLum<0:NaN:Inf>

#line 204
    lt r15.w, l(0.000000), r15.z
    div r25.xyz, r22.xyzx, r15.zzzz
    movc r25.xyz, r15.wwww, r25.xyzx, l(1.000000,1.000000,1.000000,0)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.z, l(0.080000), cb5[10].z
    add r25.xyz, r25.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mul r25.xyz, r25.xyzx, cb5[12].zzzz
    add r25.xyz, r25.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r25.xyz, r15.zzzz, r25.xyzx
    mov r26.xyz, -r25.xyzx
    add r26.xyz, r22.xyzx, r26.xyzx
    mul r26.xyz, r26.xyzx, cb5[10].wwww
    add r25.xyz, r25.xyzx, r26.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r10.w, r10.w  // fu<0:NaN:Inf>

#line 41
    mov r15.w, -r10.w
    add r15.w, r15.w, l(1.000000)
    max r15.w, r15.w, l(0.000000)
    min r15.w, r15.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r16.w, r15.w, r15.w  // fm2<0:[0f,1f]>
    mul r16.w, r16.w, r16.w
    mul r15.w, r15.w, r16.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r15.w, r15.w  // fFL<0:[-0f,1f]>
    nop 
    mov r11.w, r11.w  // fu<0:NaN:Inf>

#line 41
    mov r16.w, -r11.w
    add r16.w, r16.w, l(1.000000)
    max r16.w, r16.w, l(0.000000)
    min r16.w, r16.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r17.x, r16.w, r16.w  // fm2<0:[0f,1f]>
    mul r17.x, r17.x, r17.x
    mul r16.w, r16.w, r17.x  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r16.w, r16.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r16.xyz, r16.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r20.xyz, r20.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r6.w, r6.w  // fRoughness<0>

#line 48
    mov r17.x, r6.w  // fSigma<0>

#line 51
    dp3 r17.w, r14.xyzx, r20.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r18.w, r16.xyzx, r20.xyzx  // fLDotN<0:NaN:Inf>
    dp3 r19.w, r16.xyzx, r16.xyzx
    sqrt r19.w, r19.w  // f3Llength<0:NaN:Inf>
    dp3 r20.w, r14.xyzx, r14.xyzx
    sqrt r20.w, r20.w  // f3Vlength<0:NaN:Inf>
    div r17.w, r17.w, r20.w  // fVDotN<0:NaN:Inf>
    div r18.w, r18.w, r19.w  // fLDotN<0:NaN:Inf>
    mov r21.w, -r17.w
    max r22.w, r17.w, r21.w
    mov r23.w, -r22.w
    add r23.w, r23.w, l(1.000000)
    sqrt r23.w, r23.w
    mul r24.w, r22.w, l(-0.018729)
    add r24.w, r24.w, l(0.074261)
    mul r24.w, r22.w, r24.w
    add r24.w, r24.w, l(-0.212114)
    mul r22.w, r22.w, r24.w
    add r22.w, r22.w, l(1.570729)
    mul r22.w, r23.w, r22.w
    mul r23.w, r22.w, l(-2.000000)
    add r23.w, r23.w, l(3.141593)
    lt r21.w, r17.w, r21.w
    and r21.w, r21.w, r23.w
    add r21.w, r21.w, r22.w  // fThetaR<0:NaN:Inf>
    mul r17.x, r17.x, l(3.141593)
    div r17.x, r17.x, l(180.000000)
    mul r17.x, r17.x, r17.x
    mul r17.x, r17.x, l(1.000000)  // fSigma2<0:Inf:[0f,1.#INFf]>

#line 63
    mul r26.xyz, r17.wwww, r20.xyzx
    mov r26.xyz, -r26.xyzx
    add r26.xyz, r14.xyzx, r26.xyzx
    dp3 r17.w, r26.xyzx, r26.xyzx
    rsq r17.w, r17.w
    mul r26.xyz, r17.wwww, r26.xyzx
    mul r27.xyz, r18.wwww, r20.xyzx
    mov r27.xyz, -r27.xyzx
    add r27.xyz, r16.xyzx, r27.xyzx
    dp3 r17.w, r27.xyzx, r27.xyzx
    rsq r17.w, r17.w
    mul r27.xyz, r17.wwww, r27.xyzx
    dp3 r17.w, r26.xyzx, r27.xyzx  // fCosPhiDiff<0:NaN:Inf>
    mov r22.w, -r18.w
    max r23.w, r18.w, r22.w
    mov r24.w, -r23.w
    add r24.w, r24.w, l(1.000000)
    sqrt r24.w, r24.w
    mul r25.w, r23.w, l(-0.018729)
    add r25.w, r25.w, l(0.074261)
    mul r25.w, r23.w, r25.w
    add r25.w, r25.w, l(-0.212114)
    mul r23.w, r23.w, r25.w
    add r23.w, r23.w, l(1.570729)
    mul r23.w, r24.w, r23.w
    mul r24.w, r23.w, l(-2.000000)
    add r24.w, r24.w, l(3.141593)
    lt r18.w, r18.w, r22.w
    and r18.w, r18.w, r24.w
    add r18.w, r18.w, r23.w  // fThetaI<0:NaN:Inf>
    max r22.w, r21.w, r18.w  // fAlpha<0:NaN:Inf>
    min r18.w, r21.w, r18.w  // fBeta<0:NaN:Inf>
    lt r21.w, l(1.570796), r22.w
    if_nz r21.w
      mov r23.w, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r21.w
      mul r21.w, r17.x, l(0.500000)
      add r24.w, r17.x, l(0.330000)
      div r21.w, r21.w, r24.w
      mov r21.w, -r21.w
      add r21.w, r21.w, l(1.000000)  // fC1<0:NaN:Inf>
      mul r24.w, r17.x, l(0.450000)
      add r25.w, r17.x, l(0.090000)
      div r24.w, r24.w, r25.w  // fC2<0:NaN:Inf>
      ge r26.x, r17.w, l(0.000000)
      if_nz r26.x
        sincos r26.x, null, r22.w
        mul r26.x, r24.w, r26.x  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r26.y, null, r22.w
        mul r26.z, r18.w, l(2.000000)
        div r26.z, r26.z, l(3.141593)
        mul r26.w, r26.z, l(1.000000)
        mul r26.z, r26.z, r26.z
        mul r26.z, r26.z, r26.w
        mov r26.z, -r26.z
        add r26.y, r26.z, r26.y
        mul r26.x, r24.w, r26.y  // fC2<0:NaN:Inf>
      endif 
      mul r24.w, r17.x, l(0.125000)
      div r24.w, r24.w, r25.w
      mul r25.w, r22.w, l(4.000000)
      mul r25.w, r18.w, r25.w
      div r25.w, r25.w, l(9.869604)
      mul r25.w, r25.w, r25.w
      mul r25.w, r25.w, l(1.000000)
      mul r24.w, r24.w, r25.w  // fC3<0:NaN:Inf>
      mul r25.w, r17.w, r26.x
      sincos r26.x, null, r18.w
      sincos null, r26.y, r18.w
      div r26.x, r26.x, r26.y
      mul r25.w, r25.w, r26.x
      add r21.w, r21.w, r25.w
      mov r25.w, -r17.w
      max r25.w, r17.w, r25.w
      mov r25.w, -r25.w
      add r25.w, r25.w, l(1.000000)
      mul r24.w, r24.w, r25.w
      add r22.w, r18.w, r22.w
      div r22.w, r22.w, l(2.000000)
      sincos r25.w, null, r22.w
      sincos null, r22.w, r22.w
      div r22.w, r25.w, r22.w
      mul r22.w, r22.w, r24.w
      add r21.w, r21.w, r22.w
      mul r21.w, r21.w, l(0.795775)  // fL1<0:NaN:Inf>
      mul r22.w, r17.x, l(0.338204)
      add r24.w, r17.x, l(0.130000)
      div r22.w, r22.w, r24.w
      mul r24.w, r18.w, l(4.000000)
      mul r18.w, r18.w, r24.w
      mul r17.w, r17.w, r18.w
      div r17.w, r17.w, l(9.869604)
      mov r17.w, -r17.w
      add r17.w, r17.w, l(1.000000)
      mul r17.w, r17.w, r22.w  // fL2<0:NaN:Inf>
      add r23.w, r17.w, r21.w  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r23.w, r23.w  // fFd<0:NaN:Inf>

#line 219
    mul r17.w, r13.w, r13.w
    mul r17.w, r6.w, r17.w  // fFss90<0:NaN:Inf>
    add r17.w, r17.w, l(-1.000000)
    mul r15.w, r15.w, r17.w
    add r15.w, r15.w, l(1.000000)
    mul r16.w, r16.w, r17.w
    add r16.w, r16.w, l(1.000000)
    mul r15.w, r15.w, r16.w  // fFss<0:NaN:Inf>
    add r16.w, r10.w, r11.w
    div r16.w, l(1.000000), r16.w
    add r16.w, r16.w, l(-0.500000)
    mul r15.w, r15.w, r16.w
    add r15.w, r15.w, l(0.500000)
    mul r15.w, r15.w, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r17.yz, r17.yyzy  // f2LeanB<0:Inf,1:Inf>
    mov r18.xyz, r18.xyzx  // f3LeanM<0:Inf,1:Inf,2:Inf>
    mov r21.xyz, r21.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    mul r17.yz, r17.yyzy, l(0.000000, 0.010000, 0.010000, 0.000000)  // f2B<0:Inf,1:Inf>
    mul r18.xyz, r18.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
    mul r18.xyz, r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3M<0:Inf,1:Inf,2:Inf>
    nop 
    div r16.w, cb5[10].x, l(5.000000)  // fM<0:[-6.80565e+037f,6.80565e+037f]>

#line 123
    mul r16.w, r16.w, r16.w
    div r16.w, l(2.000000), r16.w
    add r16.w, r16.w, l(-2.000000)  // RoughnessToSpecPower<0:Inf:[-2f,1.#INFf]>

#line 143
    div r16.w, l(1.000000), r16.w  // fInvS<0:Inf>
    add r26.xy, r16.wwww, r18.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r27.xy, r17.yzyy, r17.yzyy
    mul r27.z, r17.z, r17.y
    mov r27.xyz, -r27.xyzx
    mov r26.z, r18.z
    add r27.xyz, r26.xyzx, r27.xyzx  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r18.z, r27.y, r27.x
    mul r18.w, r27.z, r27.z
    mov r18.w, -r18.w
    add r18.z, r18.w, r18.z  // fDet<0:NaN:Inf>
    div r21.xy, r21.xyxx, r21.zzzz
    mov r28.xy, -r17.yzyy
    add r21.xy, r21.xyxx, r28.xyxx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r18.w, r21.x, r21.x
    mul r18.w, r27.y, r18.w
    mul r21.w, r21.y, r21.y
    mul r21.w, r27.x, r21.w
    add r18.w, r18.w, r21.w
    mul r21.x, r21.x, l(2.000000)
    mul r21.x, r21.y, r21.x
    mul r21.x, r27.z, r21.x
    mov r21.x, -r21.x
    add r18.w, r18.w, r21.x  // fE<0:NaN:Inf>

#line 152
    lt r21.x, l(0.000000), r21.z
    lt r21.y, l(0.000000), r18.z
    and r21.x, r21.y, r21.x
    if_nz r21.x
      mul r18.w, r18.w, l(-0.500000)
      div r18.w, r18.w, r18.z
      mul r18.w, r18.w, l(1.442695)
      exp r18.w, r18.w
      sqrt r18.z, r18.z
      mul r18.z, r18.z, l(3.141593)
      mul r18.z, r18.z, l(2.000000)
      div r18.z, r18.w, r18.z  // fD<0:NaN:Inf>
    else 
      mov r18.z, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r18.z, r18.z  // LeanMapping<0:NaN:Inf>

#line 229
    mov r18.z, r18.z  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r13.w, r13.w  // fu<0:NaN:Inf>

#line 41
    mov r13.w, -r13.w
    add r13.w, r13.w, l(1.000000)
    max r13.w, r13.w, l(0.000000)
    min r13.w, r13.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r18.w, r13.w, r13.w  // fm2<0:[0f,1f]>
    mul r18.w, r18.w, r18.w
    mul r13.w, r13.w, r18.w  // SchlickFresnel<0:[-0f,1f]>

#line 232
    mov r13.w, r13.w  // fFH<0:[-0f,1f]>
    mov r21.xyz, -r25.xyzx
    add r21.xyz, r21.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r21.xyz, r13.wwww, r21.xyzx
    add r21.xyz, r21.xyzx, r25.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    mul r6.w, r6.w, l(0.500000)
    add r6.w, r6.w, l(0.500000)  // fx<0:[-1.70141e+038f,1.70141e+038f]>

#line 86
    mul r6.w, r6.w, r6.w  // Sqr<0:Inf:[0f,1.#INFf]>

#line 234
    mov r6.w, r6.w  // fRoughG<0:Inf:[0f,1.#INFf]>
    nop 
    mov r6.w, r6.w  // fAlphaG<0:Inf:[0f,1.#INFf]>

#line 111
    mul r6.w, r6.w, r6.w  // fa<0:NaN:Inf>
    mul r18.w, r10.w, r10.w  // fb<0:NaN:Inf>
    nop 
    add r21.w, r6.w, r18.w
    mul r22.w, r6.w, r18.w
    mov r22.w, -r22.w
    add r21.w, r21.w, r22.w  // fx<0:NaN:Inf>

#line 86
    mul r21.w, r21.w, r21.w  // Sqr<0:NaN:Inf>

#line 113
    add r21.w, r10.w, r21.w
    div r21.w, l(1.000000), r21.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r22.w, r11.w, r11.w  // fb<0:NaN:Inf>
    nop 
    add r24.w, r6.w, r22.w
    mul r25.x, r6.w, r22.w
    mov r25.x, -r25.x
    add r24.w, r24.w, r25.x  // fx<0:NaN:Inf>

#line 86
    mul r24.w, r24.w, r24.w  // Sqr<0:NaN:Inf>

#line 113
    add r24.w, r11.w, r24.w
    div r24.w, l(1.000000), r24.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r21.w, r21.w, r24.w  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r12.w, r12.w  // fDotNH<0:NaN:Inf>
    mul r24.w, l(-0.099000), cb5[12].y
    add r24.w, r24.w, l(0.100000)  // fa<0:[-3.3688e+037f,3.3688e+037f]>

#line 91
    ge r25.x, r24.w, l(1.000000)
    if_nz r25.x
      mov r25.y, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r25.x
      mov r25.z, r24.w  // fa<0:[-3.3688e+037f,1f]>
      mul r25.z, r25.z, r25.z  // fa2<0:Inf:[0f,1.#INFf]>
      add r25.w, r25.z, l(-1.000000)
      mul r26.w, r12.w, r25.w
      mul r12.w, r12.w, r26.w
      add r12.w, r12.w, l(1.000000)  // fT<0:NaN:Inf>
      log r25.z, r25.z
      mul r25.z, r25.z, l(0.693147)
      mul r25.z, r25.z, l(3.141593)
      mul r12.w, r12.w, r25.z
      div r25.y, r25.w, r12.w  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r25.y, r25.y  // fDr<0:NaN:Inf>
    mov r12.w, -r7.w
    add r12.w, r12.w, l(1.000000)
    mul r12.w, r12.w, r13.w
    add r7.w, r7.w, r12.w  // fFr<0:Inf>
    nop 

#line 113
    nop 
    add r12.w, r18.w, l(0.062500)
    mul r18.w, r18.w, l(0.062500)
    mov r18.w, -r18.w
    add r12.w, r12.w, r18.w  // fx<0:NaN:Inf>

#line 86
    mul r12.w, r12.w, r12.w  // Sqr<0:NaN:Inf>

#line 113
    add r12.w, r10.w, r12.w
    div r12.w, l(1.000000), r12.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r18.w, r22.w, l(0.062500)
    mul r22.w, r22.w, l(0.062500)
    mov r22.w, -r22.w
    add r18.w, r18.w, r22.w  // fx<0:NaN:Inf>

#line 86
    mul r18.w, r18.w, r18.w  // Sqr<0:NaN:Inf>

#line 113
    add r18.w, r11.w, r18.w
    div r18.w, l(1.000000), r18.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r12.w, r12.w, r18.w  // fGr<0:NaN:Inf>

#line 254
    lt r10.w, r10.w, l(0.000000)
    if_nz r10.w

#line 258
      mov r27.xyz, -r16.xyzx
      dp3 r18.w, r20.xyzx, r27.xyzx
      max r18.w, r18.w, l(0.000000)
      min r18.w, r18.w, l(1.000000)
      mul r18.w, r18.w, l(1.000000)
      add r18.w, r18.w, l(-1.000000)
      mul r18.w, r18.w, l(-1.000000)
      max r18.w, r18.w, l(0.000000)
      min r18.w, r18.w, l(1.000000)
      mul r22.w, r18.w, l(-2.000000)
      add r22.w, r22.w, l(3.000000)
      mul r18.w, r18.w, r18.w
      mul r18.w, r18.w, r22.w
      max r18.w, r18.w, l(0.000000)
      min r18.w, r18.w, l(1.000000)  // retMul<0:[0f,1f]>
      mul r22.w, r18.w, r18.w
      mul r18.w, r18.w, r22.w
      mov r22.w, -r23.w
      add r22.w, r15.w, r22.w
      mul r22.w, r22.w, cb5[11].x
      add r22.w, r22.w, r23.w
      mul r22.w, r22.w, l(0.318310)
      mul r27.xyz, r22.xyzx, r22.wwww
      add r27.xyz, r27.xyzx, cb5[11].zzzz
      mov r22.w, -cb5[10].w
      add r22.w, r22.w, l(1.000000)
      mul r27.xyz, r22.wwww, r27.xyzx
      add r27.xyz, r27.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r27.xyz, r27.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r27.xyz, r18.wwww, r27.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r21.w, l(0)  // fGs<0: 0f>
      mov r18.w, l(0)  // fFr<0: 0f>
    else 
      mov r18.w, r7.w  // fFr<0:Inf>
    endif 

#line 263
    if_z r10.w
      lt r10.w, r11.w, l(0.000000)
      if_nz r10.w

#line 267
        mov r29.xyz, -r14.xyzx
        dp3 r11.w, r20.xyzx, r29.xyzx
        add r11.w, r11.w, l(-1.000000)
        mul r11.w, r11.w, l(-1.000000)
        max r11.w, r11.w, l(0.000000)
        min r11.w, r11.w, l(1.000000)
        mul r20.x, r11.w, l(-2.000000)
        add r20.x, r20.x, l(3.000000)
        mul r11.w, r11.w, r11.w
        mul r11.w, r11.w, r20.x
        max r11.w, r11.w, l(0.000000)
        min r11.w, r11.w, l(1.000000)  // retMul<0:[0f,1f]>
        mul r20.x, r11.w, r11.w
        mul r11.w, r11.w, r20.x
        mov r20.x, -r23.w
        add r20.x, r15.w, r20.x
        mul r20.x, r20.x, cb5[11].x
        add r20.x, r20.x, r23.w
        mul r20.x, r20.x, l(0.318310)
        mul r20.xyz, r22.xyzx, r20.xxxx
        add r20.xyz, r20.xyzx, cb5[11].zzzz
        mov r22.w, -cb5[10].w
        add r22.w, r22.w, l(1.000000)
        mul r20.xyz, r20.xyzx, r22.wwww
        add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r27.xyz, r11.wwww, r20.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r21.w, l(0)  // fGs<0: 0f>
        mov r18.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r10.w
        mov r10.w, -r23.w
        add r10.w, r10.w, r15.w
        mul r10.w, r10.w, cb5[11].x
        add r10.w, r10.w, r23.w
        mul r10.w, r10.w, l(0.318310)
        mul r20.xyz, r22.xyzx, r10.wwww
        add r20.xyz, r20.xyzx, cb5[11].zzzz
        mov r10.w, -cb5[10].w
        add r10.w, r10.w, l(1.000000)
        mul r20.xyz, r10.wwww, r20.xyzx
        mul r21.xyz, r21.xyzx, r21.wwww
        mul r21.xyz, r18.zzzz, r21.xyzx
        add r20.xyz, r20.xyzx, r21.xyzx
        mul r10.w, l(0.250000), cb5[12].x
        mul r10.w, r12.w, r10.w
        mul r10.w, r18.w, r10.w
        mul r10.w, r25.y, r10.w
        add r27.xyz, r10.wwww, r20.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 138 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mul r20.xyz, r19.xyzx, r27.xyzx
    mul r20.xyz, r3.wwww, r20.xyzx
    mul r20.xyz, r4.wwww, r20.xyzx
    max r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r20.xyz, r20.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3LightColorDiffuseFrontRes<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 142
    nop 
    mov r21.xyz, -r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 161 "ggxlighting.h"
    dp3 r10.w, r21.xyzx, r21.xyzx
    rsq r10.w, r10.w
    mul r21.xyz, r10.wwww, r21.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r22.xyz, r21.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
    mul r25.yzw, r21.zzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r25.yzw, -r25.yyzw
    add r22.xyz, r22.xyzx, r25.yzwy  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
    mul r25.yzw, r21.yyzx, l(0.000000, 0.000000, 0.000000, 1.000000)
    mul r27.xyz, r21.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mov r27.xyz, -r27.xyzx
    add r25.yzw, r25.yyzw, r27.xxyz  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>
    mul r27.xyz, r21.yzxy, l(0.000000, 1.000000, 0.000000, 0.000000)
    mul r29.xyz, r21.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
    mov r29.xyz, -r29.xyzx
    add r27.xyz, r27.xyzx, r29.xyzx  // f3C3<0: 0f,1:NaN:Inf,2:NaN:Inf>
    dp3 r10.w, r22.xyzx, r22.xyzx
    sqrt r11.w, r10.w
    dp3 r12.w, r25.yzwy, r25.yzwy
    sqrt r15.w, r12.w
    lt r18.z, r15.w, r11.w
    dp3 r18.w, r27.xyzx, r27.xyzx
    sqrt r21.w, r18.w
    lt r22.w, r21.w, r11.w
    or r18.z, r18.z, r22.w
    if_nz r18.z
      rsq r10.w, r10.w
      mul r22.xyz, r10.wwww, r22.xyzx  // f3X<0:NaN:Inf,1:NaN:Inf,2: 0f>
    else 

#line 172
      lt r10.w, r11.w, r15.w
      lt r11.w, r21.w, r15.w
      or r10.w, r10.w, r11.w
      if_nz r10.w
        rsq r10.w, r12.w
        mul r22.xyz, r10.wwww, r25.yzwy  // f3X<0:NaN:Inf,1: 0f,2:NaN:Inf>
      else 

#line 178
        rsq r10.w, r18.w
        mul r22.xyz, r10.wwww, r27.xyzx  // f3X<0: 0f,1:NaN:Inf,2:NaN:Inf>

#line 172
      endif 

#line 167
    endif 

#line 180
    mul r25.yzw, r21.yyzx, r22.zzxy
    mul r27.xyz, r21.zxyz, r22.yzxy
    mov r27.xyz, -r27.xyzx
    add r25.yzw, r25.yyzw, r27.xxyz
    dp3 r10.w, r25.yzwy, r25.yzwy
    rsq r10.w, r10.w
    mul r25.yzw, r10.wwww, r25.yyzw  // f3Y<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 184
    dp3 r22.x, r23.xyzx, r22.xyzx
    dp3 r22.y, r23.xyzx, r25.yzwy
    dp3 r22.z, r23.xyzx, r21.xyzx
    dp3 r10.w, r22.xyzx, r22.xyzx
    rsq r10.w, r10.w
    mul r22.xyz, r10.wwww, r22.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 190
    dp3 r10.w, r21.xyzx, r16.xyzx  // fDotNL<0:NaN:Inf>
    dp3 r11.w, r21.xyzx, r14.xyzx  // fDotNV<0:NaN:Inf>
    div r8.w, r10.w, r8.w  // fDotNL<0:NaN:Inf>
    div r9.w, r11.w, r9.w  // fDotNV<0:NaN:Inf>

#line 197
    dp3 r10.w, r21.xyzx, r24.xyzx  // fDotNH<0:NaN:Inf>

#line 200
    nop 

#line 118
    exp r23.x, r14.w  // Mon2Lin<0:Inf:[0f,1.#INFf]>
    exp r23.y, r15.x  // Mon2Lin<1:Inf:[0f,1.#INFf]>
    exp r23.z, r15.y  // Mon2Lin<2:Inf:[0f,1.#INFf]>

#line 200
    mov r23.xyz, r23.xyzx  // f3CdLin<0:Inf:[0f,1.#INFf],1:Inf:[0f,1.#INFf],2:Inf:[0f,1.#INFf]>
    mul r11.w, r23.x, l(0.300000)
    mul r12.w, r23.y, l(0.600000)
    add r11.w, r11.w, r12.w
    mul r12.w, r23.z, l(0.100000)
    add r11.w, r11.w, r12.w  // fCdLum<0:NaN:Inf>

#line 204
    lt r12.w, l(0.000000), r11.w
    div r15.xyw, r23.xyxz, r11.wwww
    movc r15.xyw, r12.wwww, r15.xyxw, l(1.000000,1.000000,0,1.000000)  // f3CTint<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r15.xyw, r15.xyxw, l(-1.000000, -1.000000, 0.000000, -1.000000)
    mul r15.xyw, r15.xyxw, cb5[12].zzzz
    add r15.xyw, r15.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)
    mul r15.xyz, r15.xywx, r15.zzzz
    mov r24.xyz, -r15.xyzx
    add r24.xyz, r23.xyzx, r24.xyzx
    mul r24.xyz, r24.xyzx, cb5[10].wwww
    add r15.xyz, r15.xyzx, r24.xyzx  // f3CSpec0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r8.w, r8.w  // fu<0:NaN:Inf>

#line 41
    mov r11.w, -r8.w
    add r11.w, r11.w, l(1.000000)
    max r11.w, r11.w, l(0.000000)
    min r11.w, r11.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r12.w, r11.w, r11.w  // fm2<0:[0f,1f]>
    mul r12.w, r12.w, r12.w
    mul r11.w, r11.w, r12.w  // SchlickFresnel<0:[-0f,1f]>

#line 210
    mov r11.w, r11.w  // fFL<0:[-0f,1f]>
    nop 
    mov r9.w, r9.w  // fu<0:NaN:Inf>

#line 41
    mov r12.w, -r9.w
    add r12.w, r12.w, l(1.000000)
    max r12.w, r12.w, l(0.000000)
    min r12.w, r12.w, l(1.000000)  // fm<0:[-0f,1f]>
    mul r14.w, r12.w, r12.w  // fm2<0:[0f,1f]>
    mul r14.w, r14.w, r14.w
    mul r12.w, r12.w, r14.w  // SchlickFresnel<0:[-0f,1f]>

#line 211
    mov r12.w, r12.w  // fFV<0:[-0f,1f]>

#line 214
    nop 
    mov r21.xyz, r21.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 51
    dp3 r14.w, r14.xyzx, r21.xyzx  // fVDotN<0:NaN:Inf>
    dp3 r15.w, r16.xyzx, r21.xyzx  // fLDotN<0:NaN:Inf>

#line 57
    div r14.w, r14.w, r20.w  // fVDotN<0:NaN:Inf>
    div r15.w, r15.w, r19.w  // fLDotN<0:NaN:Inf>
    mov r18.z, -r14.w
    max r18.w, r14.w, r18.z
    mov r19.w, -r18.w
    add r19.w, r19.w, l(1.000000)
    sqrt r19.w, r19.w
    mul r20.w, r18.w, l(-0.018729)
    add r20.w, r20.w, l(0.074261)
    mul r20.w, r18.w, r20.w
    add r20.w, r20.w, l(-0.212114)
    mul r18.w, r18.w, r20.w
    add r18.w, r18.w, l(1.570729)
    mul r18.w, r19.w, r18.w
    mul r19.w, r18.w, l(-2.000000)
    add r19.w, r19.w, l(3.141593)
    lt r18.z, r14.w, r18.z
    and r18.z, r18.z, r19.w
    add r18.z, r18.z, r18.w  // fThetaR<0:NaN:Inf>

#line 63
    mul r24.xyz, r14.wwww, r21.xyzx
    mov r24.xyz, -r24.xyzx
    add r24.xyz, r14.xyzx, r24.xyzx
    dp3 r14.w, r24.xyzx, r24.xyzx
    rsq r14.w, r14.w
    mul r24.xyz, r14.wwww, r24.xyzx
    mul r25.yzw, r15.wwww, r21.xxyz
    mov r25.yzw, -r25.yyzw
    add r25.yzw, r16.xxyz, r25.yyzw
    dp3 r14.w, r25.yzwy, r25.yzwy
    rsq r14.w, r14.w
    mul r25.yzw, r14.wwww, r25.yyzw
    dp3 r14.w, r24.xyzx, r25.yzwy  // fCosPhiDiff<0:NaN:Inf>
    mov r18.w, -r15.w
    max r19.w, r15.w, r18.w
    mov r20.w, -r19.w
    add r20.w, r20.w, l(1.000000)
    sqrt r20.w, r20.w
    mul r21.w, r19.w, l(-0.018729)
    add r21.w, r21.w, l(0.074261)
    mul r21.w, r19.w, r21.w
    add r21.w, r21.w, l(-0.212114)
    mul r19.w, r19.w, r21.w
    add r19.w, r19.w, l(1.570729)
    mul r19.w, r20.w, r19.w
    mul r20.w, r19.w, l(-2.000000)
    add r20.w, r20.w, l(3.141593)
    lt r15.w, r15.w, r18.w
    and r15.w, r15.w, r20.w
    add r15.w, r15.w, r19.w  // fThetaI<0:NaN:Inf>
    max r18.w, r18.z, r15.w  // fAlpha<0:NaN:Inf>
    min r15.w, r18.z, r15.w  // fBeta<0:NaN:Inf>
    lt r18.z, l(1.570796), r18.w
    if_nz r18.z
      mov r19.w, l(0)  // OrenNayar<0: 0f>
    endif 
    if_z r18.z
      mul r18.z, r17.x, l(0.500000)
      add r20.w, r17.x, l(0.330000)
      div r18.z, r18.z, r20.w
      mov r18.z, -r18.z
      add r18.z, r18.z, l(1.000000)  // fC1<0:NaN:Inf>
      mul r20.w, r17.x, l(0.450000)
      add r21.w, r17.x, l(0.090000)
      div r20.w, r20.w, r21.w  // fC2<0:NaN:Inf>
      ge r22.w, r14.w, l(0.000000)
      if_nz r22.w
        sincos r22.w, null, r18.w
        mul r22.w, r20.w, r22.w  // fC2<0:NaN:Inf>
      else 

#line 74
        sincos r23.w, null, r18.w
        mul r24.x, r15.w, l(2.000000)
        div r24.x, r24.x, l(3.141593)
        mul r24.y, r24.x, l(1.000000)
        mul r24.x, r24.x, r24.x
        mul r24.x, r24.x, r24.y
        mov r24.x, -r24.x
        add r23.w, r23.w, r24.x
        mul r22.w, r20.w, r23.w  // fC2<0:NaN:Inf>
      endif 
      mul r20.w, r17.x, l(0.125000)
      div r20.w, r20.w, r21.w
      mul r21.w, r18.w, l(4.000000)
      mul r21.w, r15.w, r21.w
      div r21.w, r21.w, l(9.869604)
      mul r21.w, r21.w, r21.w
      mul r21.w, r21.w, l(1.000000)
      mul r20.w, r20.w, r21.w  // fC3<0:NaN:Inf>
      mul r21.w, r14.w, r22.w
      sincos r22.w, null, r15.w
      sincos null, r23.w, r15.w
      div r22.w, r22.w, r23.w
      mul r21.w, r21.w, r22.w
      add r18.z, r18.z, r21.w
      mov r21.w, -r14.w
      max r21.w, r14.w, r21.w
      mov r21.w, -r21.w
      add r21.w, r21.w, l(1.000000)
      mul r20.w, r20.w, r21.w
      add r18.w, r15.w, r18.w
      div r18.w, r18.w, l(2.000000)
      sincos r21.w, null, r18.w
      sincos null, r18.w, r18.w
      div r18.w, r21.w, r18.w
      mul r18.w, r18.w, r20.w
      add r18.z, r18.w, r18.z
      mul r18.z, r18.z, l(0.795775)  // fL1<0:NaN:Inf>
      mul r18.w, r17.x, l(0.338204)
      add r17.x, r17.x, l(0.130000)
      div r17.x, r18.w, r17.x
      mul r18.w, r15.w, l(4.000000)
      mul r15.w, r15.w, r18.w
      mul r14.w, r14.w, r15.w
      div r14.w, r14.w, l(9.869604)
      mov r14.w, -r14.w
      add r14.w, r14.w, l(1.000000)
      mul r14.w, r14.w, r17.x  // fL2<0:NaN:Inf>
      add r19.w, r14.w, r18.z  // OrenNayar<0:NaN:Inf>

#line 70
    endif 

#line 214
    mov r19.w, r19.w  // fFd<0:NaN:Inf>

#line 220
    mul r11.w, r17.w, r11.w
    add r11.w, r11.w, l(1.000000)
    mul r12.w, r17.w, r12.w
    add r12.w, r12.w, l(1.000000)
    mul r11.w, r11.w, r12.w  // fFss<0:NaN:Inf>
    add r12.w, r8.w, r9.w
    div r12.w, l(1.000000), r12.w
    add r12.w, r12.w, l(-0.500000)
    mul r11.w, r11.w, r12.w
    add r11.w, r11.w, l(0.500000)
    mul r11.w, r11.w, l(1.250000)  // fss<0:NaN:Inf>

#line 225
    nop 
    nop 

#line 229
    nop 
    mov r22.xyz, r22.xyzx  // f3Ht<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 143
    nop 
    add r26.xy, r16.wwww, r18.xyxx  // f3M<0:NaN:Inf,1:NaN:Inf>
    mul r18.xy, r17.yzyy, r17.yzyy
    mul r18.z, r17.z, r17.y
    mov r17.xyz, -r18.xyzx
    add r17.xyz, r17.xyzx, r26.xyzx  // f3Sigma<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r12.w, r17.y, r17.x
    mul r14.w, r17.z, r17.z
    mov r14.w, -r14.w
    add r12.w, r12.w, r14.w  // fDet<0:NaN:Inf>
    div r18.xy, r22.xyxx, r22.zzzz
    add r18.xy, r28.xyxx, r18.xyxx  // f2H<0:NaN:Inf,1:NaN:Inf>
    mul r14.w, r18.x, r18.x
    mul r14.w, r17.y, r14.w
    mul r15.w, r18.y, r18.y
    mul r15.w, r17.x, r15.w
    add r14.w, r14.w, r15.w
    mul r15.w, r18.x, l(2.000000)
    mul r15.w, r18.y, r15.w
    mul r15.w, r17.z, r15.w
    mov r15.w, -r15.w
    add r14.w, r14.w, r15.w  // fE<0:NaN:Inf>

#line 152
    lt r15.w, l(0.000000), r22.z
    lt r16.w, l(0.000000), r12.w
    and r15.w, r15.w, r16.w
    if_nz r15.w
      mul r14.w, r14.w, l(-0.500000)
      div r14.w, r14.w, r12.w
      mul r14.w, r14.w, l(1.442695)
      exp r14.w, r14.w
      sqrt r12.w, r12.w
      mul r12.w, r12.w, l(3.141593)
      mul r12.w, r12.w, l(2.000000)
      div r12.w, r14.w, r12.w  // fD<0:NaN:Inf>
    else 
      mov r12.w, l(0)  // fD<0: 0f>
    endif 

#line 155
    mov r12.w, r12.w  // LeanMapping<0:NaN:Inf>

#line 229
    mov r12.w, r12.w  // fD<0:NaN:Inf>
    nop 

#line 106
    nop 
    nop 
    nop 

#line 232
    nop 
    mov r17.xyz, -r15.xyzx
    add r17.xyz, r17.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r17.xyz, r13.wwww, r17.xyzx
    add r15.xyz, r15.xyzx, r17.xyzx  // f3Fs<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    nop 

#line 112
    mul r13.w, r8.w, r8.w  // fb<0:NaN:Inf>
    nop 
    add r14.w, r6.w, r13.w
    mul r15.w, r6.w, r13.w
    mov r15.w, -r15.w
    add r14.w, r14.w, r15.w  // fx<0:NaN:Inf>

#line 86
    mul r14.w, r14.w, r14.w  // Sqr<0:NaN:Inf>

#line 113
    add r14.w, r8.w, r14.w
    div r14.w, l(1.000000), r14.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    nop 

#line 112
    mul r15.w, r9.w, r9.w  // fb<0:NaN:Inf>
    nop 
    add r16.w, r6.w, r15.w
    mul r6.w, r6.w, r15.w
    mov r6.w, -r6.w
    add r6.w, r6.w, r16.w  // fx<0:NaN:Inf>

#line 86
    mul r6.w, r6.w, r6.w  // Sqr<0:NaN:Inf>

#line 113
    add r6.w, r6.w, r9.w
    div r6.w, l(1.000000), r6.w  // SmithG_GGX<0:NaN:Inf>

#line 235
    mul r6.w, r6.w, r14.w  // fGs<0:NaN:Inf>

#line 249
    nop 
    mov r10.w, r10.w  // fDotNH<0:NaN:Inf>

#line 91
    if_nz r25.x
      mov r14.w, l(0.318310)  // GTR1<0: 0.31831f>
    endif 
    if_z r25.x
      mul r16.w, r24.w, r24.w  // fa2<0:Inf:[0f,1.#INFf]>
      add r17.x, r16.w, l(-1.000000)
      mul r17.y, r10.w, r17.x
      mul r10.w, r10.w, r17.y
      add r10.w, r10.w, l(1.000000)  // fT<0:NaN:Inf>
      log r16.w, r16.w
      mul r16.w, r16.w, l(0.693147)
      mul r16.w, r16.w, l(3.141593)
      mul r10.w, r10.w, r16.w
      div r14.w, r17.x, r10.w  // GTR1<0:NaN:Inf>
    endif 

#line 249
    mov r14.w, r14.w  // fDr<0:NaN:Inf>
    nop 

#line 113
    nop 
    add r10.w, r13.w, l(0.062500)
    mul r13.w, r13.w, l(0.062500)
    mov r13.w, -r13.w
    add r10.w, r10.w, r13.w  // fx<0:NaN:Inf>

#line 86
    mul r10.w, r10.w, r10.w  // Sqr<0:NaN:Inf>

#line 113
    add r10.w, r8.w, r10.w
    div r10.w, l(1.000000), r10.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    nop 

#line 113
    nop 
    add r13.w, r15.w, l(0.062500)
    mul r15.w, r15.w, l(0.062500)
    mov r15.w, -r15.w
    add r13.w, r13.w, r15.w  // fx<0:NaN:Inf>

#line 86
    mul r13.w, r13.w, r13.w  // Sqr<0:NaN:Inf>

#line 113
    add r13.w, r9.w, r13.w
    div r13.w, l(1.000000), r13.w  // SmithG_GGX<0:NaN:Inf>

#line 251
    mul r10.w, r10.w, r13.w  // fGr<0:NaN:Inf>

#line 254
    lt r8.w, r8.w, l(0.000000)
    if_nz r8.w

#line 258
      mov r16.xyz, -r16.xyzx
      dp3 r13.w, r21.xyzx, r16.xyzx
      max r13.w, r13.w, l(0.000000)
      min r13.w, r13.w, l(1.000000)
      mul r13.w, r13.w, l(1.000000)
      add r13.w, r13.w, l(-1.000000)
      mul r13.w, r13.w, l(-1.000000)
      max r13.w, r13.w, l(0.000000)
      min r13.w, r13.w, l(1.000000)
      mul r15.w, r13.w, l(-2.000000)
      add r15.w, r15.w, l(3.000000)
      mul r13.w, r13.w, r13.w
      mul r13.w, r13.w, r15.w
      max r13.w, r13.w, l(0.000000)
      min r13.w, r13.w, l(1.000000)  // retMul<0:[0f,1f]>
      mul r15.w, r13.w, r13.w
      mul r13.w, r13.w, r15.w
      mov r15.w, -r19.w
      add r15.w, r11.w, r15.w
      mul r15.w, r15.w, cb5[11].x
      add r15.w, r15.w, r19.w
      mul r15.w, r15.w, l(0.318310)
      mul r16.xyz, r23.xyzx, r15.wwww
      add r16.xyz, r16.xyzx, cb5[11].zzzz
      mov r15.w, -cb5[10].w
      add r15.w, r15.w, l(1.000000)
      mul r16.xyz, r15.wwww, r16.xyzx
      add r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      add r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      mul r16.xyz, r13.wwww, r16.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 256
      mov r6.w, l(0)  // fGs<0: 0f>
      mov r7.w, l(0)  // fFr<0: 0f>
    endif 

#line 263
    if_z r8.w
      lt r8.w, r9.w, l(0.000000)
      if_nz r8.w

#line 267
        mov r14.xyz, -r14.xyzx
        dp3 r9.w, r21.xyzx, r14.xyzx
        add r9.w, r9.w, l(-1.000000)
        mul r9.w, r9.w, l(-1.000000)
        max r9.w, r9.w, l(0.000000)
        min r9.w, r9.w, l(1.000000)
        mul r13.w, r9.w, l(-2.000000)
        add r13.w, r13.w, l(3.000000)
        mul r9.w, r9.w, r9.w
        mul r9.w, r9.w, r13.w
        max r9.w, r9.w, l(0.000000)
        min r9.w, r9.w, l(1.000000)  // retMul<0:[0f,1f]>
        mul r13.w, r9.w, r9.w
        mul r9.w, r9.w, r13.w
        mov r13.w, -r19.w
        add r13.w, r11.w, r13.w
        mul r13.w, r13.w, cb5[11].x
        add r13.w, r13.w, r19.w
        mul r13.w, r13.w, l(0.318310)
        mul r14.xyz, r23.xyzx, r13.wwww
        add r14.xyz, r14.xyzx, cb5[11].zzzz
        mov r13.w, -cb5[10].w
        add r13.w, r13.w, l(1.000000)
        mul r14.xyz, r13.wwww, r14.xyzx
        add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        add r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        mul r16.xyz, r9.wwww, r14.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 265
        mov r6.w, l(0)  // fGs<0: 0f>
        mov r7.w, l(0)  // fFr<0: 0f>
      endif 

#line 276
      if_z r8.w
        mov r8.w, -r19.w
        add r8.w, r8.w, r11.w
        mul r8.w, r8.w, cb5[11].x
        add r8.w, r8.w, r19.w
        mul r8.w, r8.w, l(0.318310)
        mul r14.xyz, r23.xyzx, r8.wwww
        add r14.xyz, r14.xyzx, cb5[11].zzzz
        mov r8.w, -cb5[10].w
        add r8.w, r8.w, l(1.000000)
        mul r14.xyz, r8.wwww, r14.xyzx
        mul r15.xyz, r15.xyzx, r6.wwww
        mul r15.xyz, r12.wwww, r15.xyzx
        add r14.xyz, r14.xyzx, r15.xyzx
        mul r6.w, l(0.250000), cb5[12].x
        mul r6.w, r10.w, r6.w
        mul r6.w, r7.w, r6.w
        mul r6.w, r14.w, r6.w
        add r16.xyz, r6.wwww, r14.xyzx  // BRDF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      endif 

#line 263
    endif 

#line 142 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mul r14.xyz, r16.xyzx, r19.xyzx
    mul r14.xyz, r3.wwww, r14.xyzx
    mul r14.xyz, r4.wwww, r14.xyzx
    max r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r14.xyz, r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3LightColorDiffuseBackRes<0:[0f,1f],1:[0f,1f],2:[0f,1f]>

#line 127
  else 
    mov r20.xyz, l(0,0,0,0)  // f3LightColorDiffuseFrontRes<0: 0f,1: 0f,2: 0f>
    mov r14.xyz, l(0,0,0,0)  // f3LightColorDiffuseBackRes<0: 0f,1: 0f,2: 0f>
  endif 

#line 298
  mov r20.xyz, r20.xyzx  // f3LightColorDiffuseFrontRes<0:NaN,1:NaN,2:NaN>
  mov r14.xyz, r14.xyzx  // f3LightColorDiffuseBackRes<0:NaN,1:NaN,2:NaN>

#line 303
  mov r3.w, -cb5[1].w
  add r3.w, r3.w, l(1.000000)
  mul r3.w, r3.w, l(8.000000)
  mul r15.xyz, r20.xyzx, r3.wwww
  add r15.xyz, r15.xyzx, r20.xyzx  // f3LightColorDiffuseFrontRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r16.xyz, r14.xyzx, r3.wwww
  add r14.xyz, r14.xyzx, r16.xyzx  // f3LightColorDiffuseBackRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 308
  ine r3.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r3.w
    ld_indexable(buffer)(float,float,float,float) r16.xyz, r3.zzzz, t5.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>

#line 313
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r3.zzzz, t6.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>
    mov r18.xyz, r5.yzwy  // f4TexColor<0:Inf,1:Inf,2:Inf>
    dp3 r3.z, r9.xyzx, r9.xyzx
    sqrt r3.z, r3.z  // fThickValue<0:NaN:Inf>
    nop 
    mov r16.xyz, r16.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r17.xyz, r17.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r18.xyz, r18.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r3.z, r3.z  // fThickValue<0:NaN:Inf>
    mov r3.w, cb5[3].x  // f4SSSBRDFParams<0>
    mov r19.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r20.xyz, v6.xyzx  // f3CamPos<0,1,2>
    mov r15.xyz, r15.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 158 "constant.h"
    mov r3.w, r3.w  // fMaterialThickness<0>
    mov r19.x, r19.x  // fExtinctionCoefficientRed<0>
    mov r19.y, r19.y  // fExtinctionCoefficientGreen<0>
    mov r19.z, r19.z  // fExtinctionCoefficientBlue<0>

#line 165
    mov r18.xyz, r18.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 171
    add r20.xyz, r12.xyzx, r20.xyzx
    dp3 r4.w, r20.xyzx, r20.xyzx
    rsq r4.w, r4.w
    mul r20.xyz, r4.wwww, r20.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r21.xyz, -r20.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, r16.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>

#line 176
    add r22.xyz, r12.xyzx, r16.xyzx
    mov r22.w, l(0)
    dp4 r4.w, r22.xyzw, r22.xyzw
    sqrt r4.w, r4.w
    div r4.w, l(1.000000), r4.w
    mul r4.w, r4.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mov r21.xyz, r21.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 141
    dp3 r6.w, r21.xyzx, r13.xyzx  // fProduct<0:NaN:Inf>
    mul r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r6.w, r6.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r13.xyz, r4.wwww, r6.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r22.xyz, -r2.xyzx
    dp3 r7.w, r22.xyzx, r21.xyzx
    max r7.w, r7.w, l(0.000000)
    mul r22.xyz, r3.wwww, r7.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 141
    dp3 r7.w, r21.xyzx, r21.xyzx  // fProduct<0:NaN:Inf>
    mul r7.w, r7.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r7.w, r7.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r7.w, r7.w  // HalfLambert<0:NaN:Inf>

#line 182
    mul r7.w, r3.w, r7.w
    add r21.xyz, r7.wwww, r22.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r22.xyz, r4.wwww, r21.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r23.x, r19.x, r22.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r23.y, r19.y, r22.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r23.z, r19.z, r22.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r22.xyz, r3.zzzz, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r13.xyz, r18.xyzx, r13.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r13.xyz, r22.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.xyz, r17.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r4.w, r20.xyzx, r2.xyzx
    max r4.w, r4.w, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
    lt r4.w, r4.w, l(0.700000)
    lt r3.w, l(2.000000), r3.w
    and r3.w, r3.w, r4.w
    if_nz r3.w

#line 205
      mul r20.xyz, r22.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r20.xyz, r20.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r20.xyz, r20.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r15.xyz, r15.xyzx, r20.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 210
      mul r15.xyz, r13.xyzx, r15.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 318 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mov r15.xyz, r15.xyzx  // f3LightColorDiffuseFrontRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 322
    nop 
    mov r14.xyz, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 176 "constant.h"
    add r12.xyz, r12.xyzx, r16.xyzx
    mov r12.w, l(0)
    dp4 r4.w, r12.xyzw, r12.xyzw
    sqrt r4.w, r4.w
    div r4.w, l(1.000000), r4.w
    mul r4.w, r4.w, l(30.000000)  // fAttenuation<0:NaN:Inf>

#line 179
    nop 
    mul r12.xyz, r4.wwww, r6.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 182
    nop 
    mul r13.xyz, r4.wwww, r21.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r16.x, r19.x, r13.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r16.y, r19.y, r13.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r16.z, r19.z, r13.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r13.xyz, r3.zzzz, r16.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 193
    mul r12.xyz, r18.xyzx, r12.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r12.xyz, r13.xyzx, r12.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r12.xyz, r17.xyzx, r12.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    if_nz r3.w
      mul r13.xyz, r13.xyzx, l(0.066660, 0.066660, 0.066660, 0.000000)
      max r13.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r14.xyz, r13.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 210
      mul r14.xyz, r12.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 203
    endif 

#line 322 "\\?\C:\Projects\Vektoria_2015-05-22_V13withPatch4\Vektoria\trunk\VektoriaApp\shaders\Source\transperency.hlsl"
    mov r14.xyz, r14.xyzx  // f3LightColorDiffuseBackRes<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 308
  endif 

#line 329
  add r1.yzw, r1.yyzw, r15.xxyz  // f3AccumDiffuseFront<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r7.xyz, r7.xyzx, r14.xyzx  // f3AccumDiffuseBack<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 289
  iadd r2.w, r2.w, l(1)  // i<0>
endloop 

#line 336
mul r0.xyz, r1.yzwy, l(15.000000, 15.000000, 15.000000, 0.000000)  // f3AccumDiffuseFront<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.xyz, r7.xyzx, l(15.000000, 15.000000, 15.000000, 0.000000)  // f3AccumDiffuseBack<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 342
mul r0.w, r2.x, l(0.500000)
mul r0.w, r0.w, l(0.500000)  // fAmbientBlendFront<0:NaN:Inf>
mul r4.xyz, r0.wwww, cb2[20].xyzx
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r5.yzw, r0.wwww, cb2[21].xxyz
add r4.xyz, r4.xyzx, r5.yzwy  // f3AmbientFront<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.w, -r2.x
mul r0.w, r0.w, l(0.500000)
mul r0.w, r0.w, l(0.500000)  // fAmbientBlendBack<0:NaN:Inf>
mul r5.yzw, r0.wwww, cb2[20].xxyz
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r7.xyz, r0.wwww, cb2[21].xyzx
add r5.yzw, r5.yyzw, r7.xxyz  // f3AmbientBack<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 349
mul r0.xyz, r0.xyzx, r4.xyzx
add r0.xyz, r6.xyzx, r0.xyzx  // f3DiffuseAndAmbientFront<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.xyz, r1.xyzx, r5.yzwy
add r1.xyz, r6.xyzx, r1.xyzx  // f3DiffuseAndAmbientBack<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
add r0.xyz, r0.xyzx, r1.xyzx  // f3AccumLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.x, r5.x  // f4DiffTex<3:Inf>
ine r0.w, l(0, 0, 0, 0), cb5[7].z
if_nz r0.w

#line 361
  resinfo_indexable(texture2d)(float,float,float,float)_uint r1.xy, l(0), t15.xyzw  // iWidth<0>, iHeight<0>, iLevels<0>

#line 364
  utof r0.w, r1.x
  mul r4.x, r0.w, r3.x  // f2TexCoord2<0:NaN:Inf>
  utof r0.w, r1.y
  mul r4.y, r0.w, r3.y  // f2TexCoord2<1:NaN:Inf>

#line 369
  ld_indexable(texture2d)(float,float,float,float) r1.xyz, l(0, 0, 0, 0), t15.xyzw  // f4ChromaKey<0:Inf,1:Inf,2:Inf,3:Inf>

#line 378
  add r3.zw, r4.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)  // f2TexPos1<0:NaN:Inf,1:NaN:Inf>
  add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000)  // f2TexPos2<0:NaN:Inf,1:NaN:Inf>
  add r5.yz, r4.xxyx, l(0.000000, -0.500000, 0.500000, 0.000000)  // f2TexPos3<0:NaN:Inf,1:NaN:Inf>
  add r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // f2TexPos4<0:NaN:Inf,1:NaN:Inf>
  ftoi r6.xy, r3.zwzz
  mov r6.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r6.xyzw, r6.xyzw, t15.wxyz  // f4Col1<3:Inf,0:Inf,1:Inf,2:Inf>
  ftoi r7.xy, r4.zwzz
  mov r7.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r7.xyzw, t15.wxyz  // f4Col2<3:Inf,0:Inf,1:Inf,2:Inf>
  ftoi r8.xy, r5.yzyy
  mov r8.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r8.xyzw, r8.xyzw, t15.wxyz  // f4Col3<3:Inf,0:Inf,1:Inf,2:Inf>
  ftoi r4.xy, r4.xyxx
  mov r4.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.xyzw, t15.wxyz  // f4Col4<3:Inf,0:Inf,1:Inf,2:Inf>
  eq r0.w, r6.y, r1.x
  eq r1.w, r6.z, r1.y
  and r0.w, r0.w, r1.w
  eq r1.w, r6.w, r1.z
  and r0.w, r0.w, r1.w
  if_nz r0.w
    mov r6.x, l(0)  // f4Col1<3: 0f>
  endif 
  eq r0.w, r7.y, r1.x
  eq r1.w, r7.z, r1.y
  and r0.w, r0.w, r1.w
  eq r1.w, r7.w, r1.z
  and r0.w, r0.w, r1.w
  if_nz r0.w
    mov r7.x, l(0)  // f4Col2<3: 0f>
  endif 
  eq r0.w, r8.y, r1.x
  eq r1.w, r8.z, r1.y
  and r0.w, r0.w, r1.w
  eq r1.w, r8.w, r1.z
  and r0.w, r0.w, r1.w
  if_nz r0.w
    mov r8.x, l(0)  // f4Col3<3: 0f>
  endif 

#line 389
  eq r0.w, r4.y, r1.x
  eq r1.x, r4.z, r1.y
  and r0.w, r0.w, r1.x
  eq r1.x, r4.w, r1.z
  and r0.w, r0.w, r1.x
  if_nz r0.w
    mov r4.x, l(0)  // f4Col4<3: 0f>
  endif 
  frc r0.w, r3.z  // f2TexPos1<0:NaN>
  frc r1.x, r3.w  // f2TexPos1<1:NaN>

#line 393
  mov r1.y, -r6.x
  add r1.y, r1.y, r7.x
  mul r1.y, r0.w, r1.y
  add r1.y, r6.x, r1.y  // fAlpha<0:NaN:Inf>
  mov r1.z, -r8.x
  add r1.z, r1.z, r4.x
  mul r0.w, r0.w, r1.z
  add r0.w, r8.x, r0.w
  mov r1.z, -r1.y
  add r0.w, r0.w, r1.z
  mul r0.w, r1.x, r0.w
  add r5.x, r1.y, r0.w  // fAlpha<0:NaN:Inf>

#line 413
  mov r5.x, r5.x  // f4DiffTex<3:NaN:Inf>

#line 356
endif 

#line 418
mov r0.xyz, r0.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
ine r0.w, l(0, 0, 0, 0), cb5[7].w
if_nz r0.w
  mov r1.xyz, -v2.xyzx
  add r1.xyz, r1.xyzx, v6.xyzx
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r1.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r0.w, r1.xyzx, r2.xyzx
  add r1.z, r0.w, r0.w
  mov r1.z, -r1.z
  mul r1.zw, r1.zzzz, r2.xxxy
  add r1.zw, r1.xxxy, r1.zzzw  // f3Reflection<0:NaN:Inf,1:NaN:Inf>
  mul r2.z, r0.w, r0.w
  mov r2.z, -r2.z
  add r2.z, r2.z, l(1.000000)
  mul r2.z, r2.z, l(0.980100)
  mov r2.z, -r2.z
  add r2.z, r2.z, l(1.000000)
  sqrt r2.w, r2.z
  mul r0.w, r0.w, l(0.990000)
  add r0.w, r2.w, r0.w
  ge r2.z, r2.z, l(0.000000)
  mul r1.xy, r1.xyxx, l(0.990000, 0.990000, 0.000000, 0.000000)
  mul r2.xy, r2.xyxx, r0.wwww
  mov r2.xy, -r2.xyxx
  add r1.xy, r1.xyxx, r2.xyxx
  movc r1.xy, r2.zzzz, r1.xyxx, l(0,0,0,0)  // f3Refraction<0:NaN:Inf,1:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t19.xyzw, s0  // f3RefrColor<0:Inf,1:Inf,2:Inf>
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.zwzz, t19.xyzw, s0  // f3ReflColor<0:Inf,1:Inf,2:Inf>
  ine r0.w, l(0, 0, 0, 0), cb5[8].w
  if_nz r0.w

#line 430
    sample_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t19.xyzw, s0  // fReflectionFactor<0:Inf>
    mov r3.xyz, -r2.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    add r3.xyz, r2.xyzx, r3.xyzx
    div r3.xyz, r3.xyzx, cb5[2].wwww
    mul r3.xyz, r0.wwww, r3.xyzx
    dp3 r0.w, r0.xyzx, r0.xyzx
    sqrt r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r3.xyz, r0.wwww, r3.xyzx
    mul r0.xyz, r0.xyzx, r3.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 428
  else 

#line 435
    mov r3.xyz, -r2.xyzx
    add r1.xyz, r1.xyzx, r3.xyzx
    mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    add r1.xyz, r1.xyzx, r2.xyzx
    div r1.xyz, r1.xyzx, cb5[2].wwww
    dp3 r0.w, r0.xyzx, r0.xyzx
    sqrt r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r1.xyz, r0.wwww, r1.xyzx
    add r0.xyz, r0.xyzx, r1.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 428
  endif 

#line 420
endif 

#line 439
min r0.w, r5.x, cb5[1].w  // fTrans<0:Inf>
mov r0.w, r0.w  // f4ColorOut<3:Inf>
dp3 r1.x, r0.xyzx, r0.xyzx
sqrt r1.x, r1.x  // fLength<0:NaN:Inf>
mul r1.x, r1.x, l(1.000000)
mul r0.w, r0.w, r1.x  // f4ColorOut<3:NaN:Inf>
mov o0.xyz, r0.xyzx  // RenderBlendedPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o0.w, r0.w  // RenderBlendedPS<3:NaN:Inf>
ret 
// Approximately 2553 instruction slots used
